
LAB_projekt_Heater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800d378  0800d378  0000e378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d820  0800d820  0000f324  2**0
                  CONTENTS
  4 .ARM          00000008  0800d820  0800d820  0000e820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d828  0800d828  0000f324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d828  0800d828  0000e828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d82c  0800d82c  0000e82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800d830  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e4  0800da14  0000f1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000284  0800dab4  0000f284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000aa0  20000324  0800db54  0000f324  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000dc4  0800db54  0000fdc4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000f324  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ea7a  00000000  00000000  0000f354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004442  00000000  00000000  0002ddce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001918  00000000  00000000  00032210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000137f  00000000  00000000  00033b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aeae  00000000  00000000  00034ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022537  00000000  00000000  0005fd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100fb2  00000000  00000000  0008228c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018323e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007ea4  00000000  00000000  00183284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0018b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000324 	.word	0x20000324
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d35c 	.word	0x0800d35c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000328 	.word	0x20000328
 800020c:	0800d35c 	.word	0x0800d35c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0x9c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001042:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <MX_ADC1_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104e:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001062:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001064:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <MX_ADC1_Init+0xa0>)
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_ADC1_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001082:	480e      	ldr	r0, [pc, #56]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001084:	f001 fb88 	bl	8002798 <HAL_ADC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800108e:	f000 fe0f 	bl	8001cb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001092:	2303      	movs	r3, #3
 8001094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_ADC1_Init+0x98>)
 80010a4:	f001 fe50 	bl	8002d48 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ae:	f000 fdff 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000340 	.word	0x20000340
 80010c0:	40012000 	.word	0x40012000
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	@ 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a30      	ldr	r2, [pc, #192]	@ (80011a8 <HAL_ADC_MspInit+0xe0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d15a      	bne.n	80011a0 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <HAL_ADC_MspInit+0xe4>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a2f      	ldr	r2, [pc, #188]	@ (80011ac <HAL_ADC_MspInit+0xe4>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <HAL_ADC_MspInit+0xe4>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <HAL_ADC_MspInit+0xe4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a29      	ldr	r2, [pc, #164]	@ (80011ac <HAL_ADC_MspInit+0xe4>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <HAL_ADC_MspInit+0xe4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800111a:	2308      	movs	r3, #8
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4820      	ldr	r0, [pc, #128]	@ (80011b0 <HAL_ADC_MspInit+0xe8>)
 800112e:	f003 f841 	bl	80041b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 8001134:	4a20      	ldr	r2, [pc, #128]	@ (80011b8 <HAL_ADC_MspInit+0xf0>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 800114c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001150:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 8001154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001158:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 800115c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001160:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001174:	480f      	ldr	r0, [pc, #60]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 8001176:	f002 f953 	bl	8003420 <HAL_DMA_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001180:	f000 fd96 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <HAL_ADC_MspInit+0xec>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2012      	movs	r0, #18
 8001196:	f002 f90c 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800119a:	2012      	movs	r0, #18
 800119c:	f002 f925 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40012000 	.word	0x40012000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	20000388 	.word	0x20000388
 80011b8:	40026410 	.word	0x40026410

080011bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_DMA_Init+0x38>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <MX_DMA_Init+0x38>)
 80011c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_DMA_Init+0x38>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2038      	movs	r0, #56	@ 0x38
 80011e0:	f002 f8e7 	bl	80033b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011e4:	2038      	movs	r0, #56	@ 0x38
 80011e6:	f002 f900 	bl	80033ea <HAL_NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <MX_ETH_Init+0x84>)
 80011fe:	4a20      	ldr	r2, [pc, #128]	@ (8001280 <MX_ETH_Init+0x88>)
 8001200:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <MX_ETH_Init+0x8c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001208:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <MX_ETH_Init+0x8c>)
 800120a:	2280      	movs	r2, #128	@ 0x80
 800120c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_ETH_Init+0x8c>)
 8001210:	22e1      	movs	r2, #225	@ 0xe1
 8001212:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_ETH_Init+0x8c>)
 8001216:	2200      	movs	r2, #0
 8001218:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_ETH_Init+0x8c>)
 800121c:	2200      	movs	r2, #0
 800121e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_ETH_Init+0x8c>)
 8001222:	2200      	movs	r2, #0
 8001224:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_ETH_Init+0x84>)
 8001228:	4a16      	ldr	r2, [pc, #88]	@ (8001284 <MX_ETH_Init+0x8c>)
 800122a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_ETH_Init+0x84>)
 800122e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001232:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_ETH_Init+0x84>)
 8001236:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <MX_ETH_Init+0x90>)
 8001238:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <MX_ETH_Init+0x84>)
 800123c:	4a13      	ldr	r2, [pc, #76]	@ (800128c <MX_ETH_Init+0x94>)
 800123e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_ETH_Init+0x84>)
 8001242:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001246:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <MX_ETH_Init+0x84>)
 800124a:	f002 fc65 	bl	8003b18 <HAL_ETH_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001254:	f000 fd2c 	bl	8001cb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001258:	2238      	movs	r2, #56	@ 0x38
 800125a:	2100      	movs	r1, #0
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <MX_ETH_Init+0x98>)
 800125e:	f008 fd22 	bl	8009ca6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <MX_ETH_Init+0x98>)
 8001264:	2221      	movs	r2, #33	@ 0x21
 8001266:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_ETH_Init+0x98>)
 800126a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800126e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_ETH_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000420 	.word	0x20000420
 8001280:	40028000 	.word	0x40028000
 8001284:	200004d0 	.word	0x200004d0
 8001288:	20000284 	.word	0x20000284
 800128c:	200001e4 	.word	0x200001e4
 8001290:	200003e8 	.word	0x200003e8

08001294 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	@ 0x38
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a4e      	ldr	r2, [pc, #312]	@ (80013ec <HAL_ETH_MspInit+0x158>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	f040 8096 	bne.w	80013e4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012b8:	4b4d      	ldr	r3, [pc, #308]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a4c      	ldr	r2, [pc, #304]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b4a      	ldr	r3, [pc, #296]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	4a46      	ldr	r2, [pc, #280]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012da:	6313      	str	r3, [r2, #48]	@ 0x30
 80012dc:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4b41      	ldr	r3, [pc, #260]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	4a40      	ldr	r2, [pc, #256]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f4:	4b3e      	ldr	r3, [pc, #248]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	4a3a      	ldr	r2, [pc, #232]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6313      	str	r3, [r2, #48]	@ 0x30
 800130c:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	4a34      	ldr	r2, [pc, #208]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6313      	str	r3, [r2, #48]	@ 0x30
 8001324:	4b32      	ldr	r3, [pc, #200]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b2f      	ldr	r3, [pc, #188]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001334:	4a2e      	ldr	r2, [pc, #184]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	6313      	str	r3, [r2, #48]	@ 0x30
 800133c:	4b2c      	ldr	r3, [pc, #176]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	4a28      	ldr	r2, [pc, #160]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 800134e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001352:	6313      	str	r3, [r2, #48]	@ 0x30
 8001354:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <HAL_ETH_MspInit+0x15c>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001360:	2332      	movs	r3, #50	@ 0x32
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001370:	230b      	movs	r3, #11
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	481e      	ldr	r0, [pc, #120]	@ (80013f4 <HAL_ETH_MspInit+0x160>)
 800137c:	f002 ff1a 	bl	80041b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001380:	2386      	movs	r3, #134	@ 0x86
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001390:	230b      	movs	r3, #11
 8001392:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4817      	ldr	r0, [pc, #92]	@ (80013f8 <HAL_ETH_MspInit+0x164>)
 800139c:	f002 ff0a 	bl	80041b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b2:	230b      	movs	r3, #11
 80013b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	480f      	ldr	r0, [pc, #60]	@ (80013fc <HAL_ETH_MspInit+0x168>)
 80013be:	f002 fef9 	bl	80041b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013c2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d4:	230b      	movs	r3, #11
 80013d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	4808      	ldr	r0, [pc, #32]	@ (8001400 <HAL_ETH_MspInit+0x16c>)
 80013e0:	f002 fee8 	bl	80041b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80013e4:	bf00      	nop
 80013e6:	3738      	adds	r7, #56	@ 0x38
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40028000 	.word	0x40028000
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40021800 	.word	0x40021800

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <MX_GPIO_Init+0x134>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a46      	ldr	r2, [pc, #280]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a40      	ldr	r2, [pc, #256]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <MX_GPIO_Init+0x134>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a3a      	ldr	r2, [pc, #232]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b38      	ldr	r3, [pc, #224]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a34      	ldr	r2, [pc, #208]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	4b2f      	ldr	r3, [pc, #188]	@ (8001538 <MX_GPIO_Init+0x134>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a2e      	ldr	r2, [pc, #184]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001492:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a28      	ldr	r2, [pc, #160]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <MX_GPIO_Init+0x134>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|Fun_out_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f244 0191 	movw	r1, #16529	@ 0x4091
 80014b0:	4822      	ldr	r0, [pc, #136]	@ (800153c <MX_GPIO_Init+0x138>)
 80014b2:	f003 f82b 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2140      	movs	r1, #64	@ 0x40
 80014ba:	4821      	ldr	r0, [pc, #132]	@ (8001540 <MX_GPIO_Init+0x13c>)
 80014bc:	f003 f826 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	481b      	ldr	r0, [pc, #108]	@ (8001544 <MX_GPIO_Init+0x140>)
 80014d8:	f002 fe6c 	bl	80041b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin Fun_out_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|Fun_out_Pin|LD2_Pin;
 80014dc:	f244 0391 	movw	r3, #16529	@ 0x4091
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4811      	ldr	r0, [pc, #68]	@ (800153c <MX_GPIO_Init+0x138>)
 80014f6:	f002 fe5d 	bl	80041b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014fa:	2340      	movs	r3, #64	@ 0x40
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <MX_GPIO_Init+0x13c>)
 8001512:	f002 fe4f 	bl	80041b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_GPIO_Init+0x13c>)
 800152a:	f002 fe43 	bl	80041b4 <HAL_GPIO_Init>

}
 800152e:	bf00      	nop
 8001530:	3730      	adds	r7, #48	@ 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40020400 	.word	0x40020400
 8001540:	40021800 	.word	0x40021800
 8001544:	40020800 	.word	0x40020800

08001548 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_I2C1_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	@ (80015c0 <MX_I2C1_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001552:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001554:	4a1b      	ldr	r2, [pc, #108]	@ (80015c4 <MX_I2C1_Init+0x7c>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001560:	2201      	movs	r2, #1
 8001562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_I2C1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001570:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001582:	480e      	ldr	r0, [pc, #56]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001584:	f002 ffdc 	bl	8004540 <HAL_I2C_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800158e:	f000 fb8f 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001592:	2100      	movs	r1, #0
 8001594:	4809      	ldr	r0, [pc, #36]	@ (80015bc <MX_I2C1_Init+0x74>)
 8001596:	f003 f86f 	bl	8004678 <HAL_I2CEx_ConfigAnalogFilter>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015a0:	f000 fb86 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_I2C1_Init+0x74>)
 80015a8:	f003 f8b1 	bl	800470e <HAL_I2CEx_ConfigDigitalFilter>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 fb7d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200004d8 	.word	0x200004d8
 80015c0:	40005400 	.word	0x40005400
 80015c4:	00808cd2 	.word	0x00808cd2

080015c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0aa      	sub	sp, #168	@ 0xa8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2284      	movs	r2, #132	@ 0x84
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 fb5c 	bl	8009ca6 <memset>
  if(i2cHandle->Instance==I2C1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a22      	ldr	r2, [pc, #136]	@ (800167c <HAL_I2C_MspInit+0xb4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d13c      	bne.n	8001672 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015fe:	2300      	movs	r3, #0
 8001600:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fee2 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001612:	f000 fb4d 	bl	8001cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_I2C_MspInit+0xb8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_I2C_MspInit+0xb8>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_I2C_MspInit+0xb8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800162e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001632:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001648:	2304      	movs	r3, #4
 800164a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001652:	4619      	mov	r1, r3
 8001654:	480b      	ldr	r0, [pc, #44]	@ (8001684 <HAL_I2C_MspInit+0xbc>)
 8001656:	f002 fdad 	bl	80041b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_I2C_MspInit+0xb8>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_I2C_MspInit+0xb8>)
 8001660:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_I2C_MspInit+0xb8>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001672:	bf00      	nop
 8001674:	37a8      	adds	r7, #168	@ 0xa8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40005400 	.word	0x40005400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <HAL_UART_RxCpltCallback+0x54>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d11c      	bne.n	80016d2 <HAL_UART_RxCpltCallback+0x4a>
	{
		if(strncmp("Set ", (char*) rx_buffer, 4) == 0)
 8001698:	2204      	movs	r2, #4
 800169a:	4911      	ldr	r1, [pc, #68]	@ (80016e0 <HAL_UART_RxCpltCallback+0x58>)
 800169c:	4811      	ldr	r0, [pc, #68]	@ (80016e4 <HAL_UART_RxCpltCallback+0x5c>)
 800169e:	f008 fb0a 	bl	8009cb6 <strncmp>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d108      	bne.n	80016ba <HAL_UART_RxCpltCallback+0x32>
		{
			set_val = strtol((char*) &rx_buffer[4], 0, 10);
 80016a8:	220a      	movs	r2, #10
 80016aa:	2100      	movs	r1, #0
 80016ac:	480e      	ldr	r0, [pc, #56]	@ (80016e8 <HAL_UART_RxCpltCallback+0x60>)
 80016ae:	f007 fb5f 	bl	8008d70 <strtol>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <HAL_UART_RxCpltCallback+0x64>)
 80016b8:	701a      	strb	r2, [r3, #0]
		}


		memset((char*)rx_buffer, "", sizeof(rx_buffer));
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_UART_RxCpltCallback+0x68>)
 80016bc:	220a      	movs	r2, #10
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	@ (80016e0 <HAL_UART_RxCpltCallback+0x58>)
 80016c2:	f008 faf0 	bl	8009ca6 <memset>

		HAL_UART_Receive_IT(&huart3, rx_buffer, buff_len);
 80016c6:	230a      	movs	r3, #10
 80016c8:	461a      	mov	r2, r3
 80016ca:	4905      	ldr	r1, [pc, #20]	@ (80016e0 <HAL_UART_RxCpltCallback+0x58>)
 80016cc:	4803      	ldr	r0, [pc, #12]	@ (80016dc <HAL_UART_RxCpltCallback+0x54>)
 80016ce:	f005 fdd0 	bl	8007272 <HAL_UART_Receive_IT>
	}
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000070c 	.word	0x2000070c
 80016e0:	2000052c 	.word	0x2000052c
 80016e4:	0800d378 	.word	0x0800d378
 80016e8:	20000530 	.word	0x20000530
 80016ec:	20000000 	.word	0x20000000
 80016f0:	0800d380 	.word	0x0800d380

080016f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016f8:	b091      	sub	sp, #68	@ 0x44
 80016fa:	af0a      	add	r7, sp, #40	@ 0x28
 80016fc:	60f8      	str	r0, [r7, #12]
    if(htim == &htim4)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a78      	ldr	r2, [pc, #480]	@ (80018e4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d16d      	bne.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0xee>
    {
        HAL_ADC_Start(&hadc1);
 8001706:	4878      	ldr	r0, [pc, #480]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001708:	f001 f88a 	bl	8002820 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, ADC1_TIMEOUT) == HAL_OK)
 800170c:	210a      	movs	r1, #10
 800170e:	4876      	ldr	r0, [pc, #472]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001710:	f001 f954 	bl	80029bc <HAL_ADC_PollForConversion>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11f      	bne.n	800175a <HAL_TIM_PeriodElapsedCallback+0x66>
        {
            adc_voltage = ADC_REG2VOLTAGE(HAL_ADC_GetValue(&hadc1));
 800171a:	4873      	ldr	r0, [pc, #460]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800171c:	f001 fae9 	bl	8002cf2 <HAL_ADC_GetValue>
 8001720:	4603      	mov	r3, r0
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f950 	bl	80019c8 <ADC_REG2VOLTAGE>
 8001728:	eef0 7a40 	vmov.f32	s15, s0
 800172c:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800172e:	edc3 7a00 	vstr	s15, [r3]
            updateAdcVoltage(adc_voltage);
 8001732:	4b6e      	ldr	r3, [pc, #440]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f000 f8f4 	bl	8001928 <updateAdcVoltage>

            actual_val = convertADC_to_temp(calculateAverage());
 8001740:	f000 f916 	bl	8001970 <calculateAverage>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	f000 f956 	bl	80019fc <convertADC_to_temp>
 8001750:	eef0 7a40 	vmov.f32	s15, s0
 8001754:	4b66      	ldr	r3, [pc, #408]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001756:	edc3 7a00 	vstr	s15, [r3]
        }
        int tx_msg_len = sprintf((char*)tx_buffer, "SetPoint: %d, Measured: %.2f, Kp: %.3f, Ki: %.4f, Kd: %.3f, PID: %.2f \r\r", set_val, actual_val, Kp, Ki, Kd, pid_output);
 800175a:	4b66      	ldr	r3, [pc, #408]	@ (80018f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461e      	mov	r6, r3
 8001760:	4b63      	ldr	r3, [pc, #396]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ff0f 	bl	8000588 <__aeabi_f2d>
 800176a:	4604      	mov	r4, r0
 800176c:	460d      	mov	r5, r1
 800176e:	4b62      	ldr	r3, [pc, #392]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ff08 	bl	8000588 <__aeabi_f2d>
 8001778:	4680      	mov	r8, r0
 800177a:	4689      	mov	r9, r1
 800177c:	4b5f      	ldr	r3, [pc, #380]	@ (80018fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe ff01 	bl	8000588 <__aeabi_f2d>
 8001786:	4682      	mov	sl, r0
 8001788:	468b      	mov	fp, r1
 800178a:	4b5d      	ldr	r3, [pc, #372]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fefa 	bl	8000588 <__aeabi_f2d>
 8001794:	e9c7 0100 	strd	r0, r1, [r7]
 8001798:	4b5a      	ldr	r3, [pc, #360]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fef3 	bl	8000588 <__aeabi_f2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80017aa:	ed97 7b00 	vldr	d7, [r7]
 80017ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80017b2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80017b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017ba:	e9cd 4500 	strd	r4, r5, [sp]
 80017be:	4632      	mov	r2, r6
 80017c0:	4951      	ldr	r1, [pc, #324]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80017c2:	4852      	ldr	r0, [pc, #328]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017c4:	f008 fa0c 	bl	8009be0 <siprintf>
 80017c8:	6178      	str	r0, [r7, #20]
        HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	2364      	movs	r3, #100	@ 0x64
 80017d0:	494e      	ldr	r1, [pc, #312]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017d2:	484f      	ldr	r0, [pc, #316]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80017d4:	f005 fcc4 	bl	8007160 <HAL_UART_Transmit>
        memset((char*)tx_buffer, 0, sizeof(tx_buffer));
 80017d8:	2264      	movs	r2, #100	@ 0x64
 80017da:	2100      	movs	r1, #0
 80017dc:	484b      	ldr	r0, [pc, #300]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017de:	f008 fa62 	bl	8009ca6 <memset>
    }

    if (htim == &htim6)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d177      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0x1e6>
    {
        HAL_ADC_Start(&hadc1);
 80017ea:	483f      	ldr	r0, [pc, #252]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80017ec:	f001 f818 	bl	8002820 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, ADC1_TIMEOUT) == HAL_OK)
 80017f0:	210a      	movs	r1, #10
 80017f2:	483d      	ldr	r0, [pc, #244]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80017f4:	f001 f8e2 	bl	80029bc <HAL_ADC_PollForConversion>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11f      	bne.n	800183e <HAL_TIM_PeriodElapsedCallback+0x14a>
        {
            adc_voltage = ADC_REG2VOLTAGE(HAL_ADC_GetValue(&hadc1));
 80017fe:	483a      	ldr	r0, [pc, #232]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001800:	f001 fa77 	bl	8002cf2 <HAL_ADC_GetValue>
 8001804:	4603      	mov	r3, r0
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f8de 	bl	80019c8 <ADC_REG2VOLTAGE>
 800180c:	eef0 7a40 	vmov.f32	s15, s0
 8001810:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001812:	edc3 7a00 	vstr	s15, [r3]
            updateAdcVoltage(adc_voltage);
 8001816:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f000 f882 	bl	8001928 <updateAdcVoltage>

            actual_val = convertADC_to_temp(calculateAverage());
 8001824:	f000 f8a4 	bl	8001970 <calculateAverage>
 8001828:	eef0 7a40 	vmov.f32	s15, s0
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	f000 f8e4 	bl	80019fc <convertADC_to_temp>
 8001834:	eef0 7a40 	vmov.f32	s15, s0
 8001838:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800183a:	edc3 7a00 	vstr	s15, [r3]
        }

        // Obliczanie wyjścia PID
        float dt = 0.01f; // Okres przerwania w sekundach (10 ms)
 800183e:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001840:	613b      	str	r3, [r7, #16]
        pid_output = calculatePID(set_val, actual_val, Kp, Ki, Kd, dt);
 8001842:	4b2c      	ldr	r3, [pc, #176]	@ (80018f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184e:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001856:	edd3 6a00 	vldr	s13, [r3]
 800185a:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800185c:	ed93 6a00 	vldr	s12, [r3]
 8001860:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001862:	edd3 5a00 	vldr	s11, [r3]
 8001866:	edd7 2a04 	vldr	s5, [r7, #16]
 800186a:	eeb0 2a65 	vmov.f32	s4, s11
 800186e:	eef0 1a46 	vmov.f32	s3, s12
 8001872:	eeb0 1a66 	vmov.f32	s2, s13
 8001876:	eef0 0a47 	vmov.f32	s1, s14
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	f000 f8d9 	bl	8001a34 <calculatePID>
 8001882:	eef0 7a40 	vmov.f32	s15, s0
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001888:	edc3 7a00 	vstr	s15, [r3]

        // Stosowanie wyjścia PID do PWM
        if (pid_output < 0) pid_output = 0;
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189a:	d503      	bpl.n	80018a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
        if (pid_output > 100) pid_output = 100;
 80018a4:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800191c <HAL_TIM_PeriodElapsedCallback+0x228>
 80018ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	dd02      	ble.n	80018be <HAL_TIM_PeriodElapsedCallback+0x1ca>
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80018ba:	4a19      	ldr	r2, [pc, #100]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80018bc:	601a      	str	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(pid_output * 10));
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d4:	ee17 2a90 	vmov	r2, s15
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e4:	20000628 	.word	0x20000628
 80018e8:	20000340 	.word	0x20000340
 80018ec:	200005c8 	.word	0x200005c8
 80018f0:	2000059c 	.word	0x2000059c
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004
 80018fc:	20000008 	.word	0x20000008
 8001900:	2000000c 	.word	0x2000000c
 8001904:	200005d4 	.word	0x200005d4
 8001908:	0800d384 	.word	0x0800d384
 800190c:	20000538 	.word	0x20000538
 8001910:	2000070c 	.word	0x2000070c
 8001914:	20000674 	.word	0x20000674
 8001918:	3c23d70a 	.word	0x3c23d70a
 800191c:	42c80000 	.word	0x42c80000
 8001920:	42c80000 	.word	0x42c80000
 8001924:	200005dc 	.word	0x200005dc

08001928 <updateAdcVoltage>:

void updateAdcVoltage(float adc_voltage) {
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Przesunięcie elementów tablicy w prawo
    for (int j = 9; j > 0; j--) {
 8001932:	2309      	movs	r3, #9
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e00d      	b.n	8001954 <updateAdcVoltage+0x2c>
        adc_voltage_tab[j] = adc_voltage_tab[j - 1];
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3b01      	subs	r3, #1
 800193c:	4a0b      	ldr	r2, [pc, #44]	@ (800196c <updateAdcVoltage+0x44>)
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4909      	ldr	r1, [pc, #36]	@ (800196c <updateAdcVoltage+0x44>)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	601a      	str	r2, [r3, #0]
    for (int j = 9; j > 0; j--) {
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3b01      	subs	r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dcee      	bgt.n	8001938 <updateAdcVoltage+0x10>
    }
    // Wstawienie nowej wartości na początek
    adc_voltage_tab[0] = adc_voltage;
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <updateAdcVoltage+0x44>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	200005a0 	.word	0x200005a0

08001970 <calculateAverage>:

// Funkcja obliczająca średnią
float calculateAverage() {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
    float sum = 0.0;
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 10; i++) {
 800197c:	2300      	movs	r3, #0
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	e00e      	b.n	80019a0 <calculateAverage+0x30>
        sum += adc_voltage_tab[i];
 8001982:	4a10      	ldr	r2, [pc, #64]	@ (80019c4 <calculateAverage+0x54>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001996:	edc7 7a01 	vstr	s15, [r7, #4]
    for (int i = 0; i < 10; i++) {
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2b09      	cmp	r3, #9
 80019a4:	dded      	ble.n	8001982 <calculateAverage+0x12>
    }
    return sum / 10; // Zwrócenie średniej
 80019a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019aa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	200005a0 	.word	0x200005a0

080019c8 <ADC_REG2VOLTAGE>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float ADC_REG2VOLTAGE(uint32_t adc_value) {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    return ((float) adc_value / ADC_MAX_VALUE) * ADC_REFERENCE_VOLTAGE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019da:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80019f8 <ADC_REG2VOLTAGE+0x30>
 80019de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80019e6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	457ff000 	.word	0x457ff000

080019fc <convertADC_to_temp>:

float convertADC_to_temp(float adc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	ed87 0a01 	vstr	s0, [r7, #4]
    float temp = 0;
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
    temp = adc * 100;
 8001a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a10:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001a30 <convertADC_to_temp+0x34>
 8001a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a18:	edc7 7a03 	vstr	s15, [r7, #12]

    return temp;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	ee07 3a90 	vmov	s15, r3
}
 8001a22:	eeb0 0a67 	vmov.f32	s0, s15
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	42c80000 	.word	0x42c80000

08001a34 <calculatePID>:

float calculatePID(float setpoint, float measured, float kp, float ki, float kd, float dt) {
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a3e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a42:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a46:	edc7 1a02 	vstr	s3, [r7, #8]
 8001a4a:	ed87 2a01 	vstr	s4, [r7, #4]
 8001a4e:	edc7 2a00 	vstr	s5, [r7]
    if (setpoint < measured) return 0.0f;
 8001a52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	d502      	bpl.n	8001a6a <calculatePID+0x36>
 8001a64:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8001af4 <calculatePID+0xc0>
 8001a68:	e03c      	b.n	8001ae4 <calculatePID+0xb0>
    float error = setpoint - measured;
 8001a6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	edc7 7a07 	vstr	s15, [r7, #28]
    integral += error * dt;
 8001a7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a7e:	edd7 7a00 	vldr	s15, [r7]
 8001a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <calculatePID+0xc4>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <calculatePID+0xc4>)
 8001a92:	edc3 7a00 	vstr	s15, [r3]
    float derivative = (error - previous_error) / dt;
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <calculatePID+0xc8>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001aa4:	ed97 7a00 	vldr	s14, [r7]
 8001aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aac:	edc7 7a06 	vstr	s15, [r7, #24]
    previous_error = error;
 8001ab0:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <calculatePID+0xc8>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	6013      	str	r3, [r2, #0]
    return (kp * error) + (ki * integral) + (kd * derivative);
 8001ab6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <calculatePID+0xc4>)
 8001ac4:	edd3 6a00 	vldr	s13, [r3]
 8001ac8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ad8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	00000000 	.word	0x00000000
 8001af8:	200005cc 	.word	0x200005cc
 8001afc:	200005d0 	.word	0x200005d0

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b04:	f000 fdc7 	bl	8002696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b08:	f000 f86a 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0c:	f7ff fc7a 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b10:	f7ff fb54 	bl	80011bc <MX_DMA_Init>
  MX_ETH_Init();
 8001b14:	f7ff fb70 	bl	80011f8 <MX_ETH_Init>
  MX_I2C1_Init();
 8001b18:	f7ff fd16 	bl	8001548 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001b1c:	f000 fc52 	bl	80023c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b20:	f000 fce8 	bl	80024f4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001b24:	f000 fa32 	bl	8001f8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b28:	f000 faa8 	bl	800207c <MX_TIM4_Init>
  MX_TIM14_Init();
 8001b2c:	f000 fb56 	bl	80021dc <MX_TIM14_Init>
  MX_ADC1_Init();
 8001b30:	f7ff fa78 	bl	8001024 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001b34:	f000 fb1c 	bl	8002170 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8001b38:	4820      	ldr	r0, [pc, #128]	@ (8001bbc <main+0xbc>)
 8001b3a:	f004 f891 	bl	8005c60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001b3e:	4820      	ldr	r0, [pc, #128]	@ (8001bc0 <main+0xc0>)
 8001b40:	f004 f88e 	bl	8005c60 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b44:	2100      	movs	r1, #0
 8001b46:	481f      	ldr	r0, [pc, #124]	@ (8001bc4 <main+0xc4>)
 8001b48:	f004 f9c4 	bl	8005ed4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, rx_buffer, buff_len);
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	461a      	mov	r2, r3
 8001b50:	491d      	ldr	r1, [pc, #116]	@ (8001bc8 <main+0xc8>)
 8001b52:	481e      	ldr	r0, [pc, #120]	@ (8001bcc <main+0xcc>)
 8001b54:	f005 fb8d 	bl	8007272 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 8001b58:	481d      	ldr	r0, [pc, #116]	@ (8001bd0 <main+0xd0>)
 8001b5a:	f000 fe61 	bl	8002820 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(set_val - actual_val<=-1){
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <main+0xd4>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <main+0xd8>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b74:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	d804      	bhi.n	8001b8c <main+0x8c>
		  HAL_GPIO_WritePin(GPIOB, Fun_out_Pin, 1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2110      	movs	r1, #16
 8001b86:	4815      	ldr	r0, [pc, #84]	@ (8001bdc <main+0xdc>)
 8001b88:	f002 fcc0 	bl	800450c <HAL_GPIO_WritePin>
	  }
	  if(set_val - actual_val>=-0.5){
 8001b8c:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <main+0xd4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <main+0xd8>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	db04      	blt.n	8001bba <main+0xba>
		  HAL_GPIO_WritePin(GPIOB, Fun_out_Pin, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	4809      	ldr	r0, [pc, #36]	@ (8001bdc <main+0xdc>)
 8001bb6:	f002 fca9 	bl	800450c <HAL_GPIO_WritePin>
	  if(set_val - actual_val<=-1){
 8001bba:	e7d0      	b.n	8001b5e <main+0x5e>
 8001bbc:	20000628 	.word	0x20000628
 8001bc0:	20000674 	.word	0x20000674
 8001bc4:	200005dc 	.word	0x200005dc
 8001bc8:	2000052c 	.word	0x2000052c
 8001bcc:	2000070c 	.word	0x2000070c
 8001bd0:	20000340 	.word	0x20000340
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	2000059c 	.word	0x2000059c
 8001bdc:	40020400 	.word	0x40020400

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	@ 0x50
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	2230      	movs	r2, #48	@ 0x30
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f008 f859 	bl	8009ca6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c04:	f002 ff0a 	bl	8004a1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <SystemClock_Config+0xc8>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	4a26      	ldr	r2, [pc, #152]	@ (8001ca8 <SystemClock_Config+0xc8>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c14:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <SystemClock_Config+0xc8>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <SystemClock_Config+0xcc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c28:	4a20      	ldr	r2, [pc, #128]	@ (8001cac <SystemClock_Config+0xcc>)
 8001c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <SystemClock_Config+0xcc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c40:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c46:	2302      	movs	r3, #2
 8001c48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c50:	2304      	movs	r3, #4
 8001c52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c54:	2348      	movs	r3, #72	@ 0x48
 8001c56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fee9 	bl	8004a3c <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c70:	f000 f81e 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c74:	230f      	movs	r3, #15
 8001c76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	2102      	movs	r1, #2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 f977 	bl	8004f84 <HAL_RCC_ClockConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c9c:	f000 f808 	bl	8001cb0 <Error_Handler>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3750      	adds	r7, #80	@ 0x50
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40007000 	.word	0x40007000

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <Error_Handler+0x8>

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_MspInit+0x44>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_MspInit+0x44>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <NMI_Handler+0x4>

08001d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5a:	f000 fcd9 	bl	8002710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <ADC_IRQHandler+0x10>)
 8001d6a:	f000 feb2 	bl	8002ad2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000340 	.word	0x20000340

08001d78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <TIM3_IRQHandler+0x10>)
 8001d7e:	f004 f9a3 	bl	80060c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200005dc 	.word	0x200005dc

08001d8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <TIM4_IRQHandler+0x10>)
 8001d92:	f004 f999 	bl	80060c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000628 	.word	0x20000628

08001da0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <USART3_IRQHandler+0x10>)
 8001da6:	f005 faa9 	bl	80072fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000070c 	.word	0x2000070c

08001db4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <TIM6_DAC_IRQHandler+0x10>)
 8001dba:	f004 f985 	bl	80060c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000674 	.word	0x20000674

08001dc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <DMA2_Stream0_IRQHandler+0x10>)
 8001dce:	f001 fc67 	bl	80036a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000388 	.word	0x20000388

08001ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return 1;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_kill>:

int _kill(int pid, int sig)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df6:	f007 ffbb 	bl	8009d70 <__errno>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2216      	movs	r2, #22
 8001dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_exit>:

void _exit (int status)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ffe7 	bl	8001dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e1e:	bf00      	nop
 8001e20:	e7fd      	b.n	8001e1e <_exit+0x12>

08001e22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e00a      	b.n	8001e4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e34:	f3af 8000 	nop.w
 8001e38:	4601      	mov	r1, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	b2ca      	uxtb	r2, r1
 8001e42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3301      	adds	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	dbf0      	blt.n	8001e34 <_read+0x12>
  }

  return len;
 8001e52:	687b      	ldr	r3, [r7, #4]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e009      	b.n	8001e82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	60ba      	str	r2, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbf1      	blt.n	8001e6e <_write+0x12>
  }
  return len;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_close>:

int _close(int file)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_isatty>:

int _isatty(int file)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f007 ff20 	bl	8009d70 <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20050000 	.word	0x20050000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	200005d8 	.word	0x200005d8
 8001f64:	20000dc8 	.word	0x20000dc8

08001f68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08e      	sub	sp, #56	@ 0x38
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fac:	463b      	mov	r3, r7
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002078 <MX_TIM3_Init+0xec>)
 8001fc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8001fc6:	2247      	movs	r2, #71	@ 0x47
 8001fc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001fd0:	4b28      	ldr	r3, [pc, #160]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8001fd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fde:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fe4:	4823      	ldr	r0, [pc, #140]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8001fe6:	f003 fde3 	bl	8005bb0 <HAL_TIM_Base_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ff0:	f7ff fe5e 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ffe:	4619      	mov	r1, r3
 8002000:	481c      	ldr	r0, [pc, #112]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8002002:	f004 faf7 	bl	80065f4 <HAL_TIM_ConfigClockSource>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800200c:	f7ff fe50 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002010:	4818      	ldr	r0, [pc, #96]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8002012:	f003 fefe 	bl	8005e12 <HAL_TIM_PWM_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800201c:	f7ff fe48 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	4811      	ldr	r0, [pc, #68]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8002030:	f004 ff9c 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800203a:	f7ff fe39 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203e:	2360      	movs	r3, #96	@ 0x60
 8002040:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002042:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002046:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	4619      	mov	r1, r3
 8002056:	4807      	ldr	r0, [pc, #28]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8002058:	f004 f9b8 	bl	80063cc <HAL_TIM_PWM_ConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002062:	f7ff fe25 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002066:	4803      	ldr	r0, [pc, #12]	@ (8002074 <MX_TIM3_Init+0xe8>)
 8002068:	f000 f94e 	bl	8002308 <HAL_TIM_MspPostInit>

}
 800206c:	bf00      	nop
 800206e:	3738      	adds	r7, #56	@ 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200005dc 	.word	0x200005dc
 8002078:	40000400 	.word	0x40000400

0800207c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	@ 0x38
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209c:	463b      	mov	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	615a      	str	r2, [r3, #20]
 80020ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002168 <MX_TIM4_Init+0xec>)
 80020b0:	4a2e      	ldr	r2, [pc, #184]	@ (800216c <MX_TIM4_Init+0xf0>)
 80020b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 80020b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002168 <MX_TIM4_Init+0xec>)
 80020b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80020ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <MX_TIM4_Init+0xec>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 80020c2:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <MX_TIM4_Init+0xec>)
 80020c4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80020c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80020ca:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <MX_TIM4_Init+0xec>)
 80020cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020d2:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <MX_TIM4_Init+0xec>)
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020d8:	4823      	ldr	r0, [pc, #140]	@ (8002168 <MX_TIM4_Init+0xec>)
 80020da:	f003 fd69 	bl	8005bb0 <HAL_TIM_Base_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80020e4:	f7ff fde4 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020f2:	4619      	mov	r1, r3
 80020f4:	481c      	ldr	r0, [pc, #112]	@ (8002168 <MX_TIM4_Init+0xec>)
 80020f6:	f004 fa7d 	bl	80065f4 <HAL_TIM_ConfigClockSource>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002100:	f7ff fdd6 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002104:	4818      	ldr	r0, [pc, #96]	@ (8002168 <MX_TIM4_Init+0xec>)
 8002106:	f003 fe23 	bl	8005d50 <HAL_TIM_OC_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002110:	f7ff fdce 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	4619      	mov	r1, r3
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <MX_TIM4_Init+0xec>)
 8002124:	f004 ff22 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800212e:	f7ff fdbf 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	2200      	movs	r2, #0
 8002146:	4619      	mov	r1, r3
 8002148:	4807      	ldr	r0, [pc, #28]	@ (8002168 <MX_TIM4_Init+0xec>)
 800214a:	f004 f8c5 	bl	80062d8 <HAL_TIM_OC_ConfigChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8002154:	f7ff fdac 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002158:	4803      	ldr	r0, [pc, #12]	@ (8002168 <MX_TIM4_Init+0xec>)
 800215a:	f000 f8d5 	bl	8002308 <HAL_TIM_MspPostInit>

}
 800215e:	bf00      	nop
 8002160:	3738      	adds	r7, #56	@ 0x38
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000628 	.word	0x20000628
 800216c:	40000800 	.word	0x40000800

08002170 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <MX_TIM6_Init+0x64>)
 8002182:	4a15      	ldr	r2, [pc, #84]	@ (80021d8 <MX_TIM6_Init+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8002186:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <MX_TIM6_Init+0x64>)
 8002188:	2247      	movs	r2, #71	@ 0x47
 800218a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <MX_TIM6_Init+0x64>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <MX_TIM6_Init+0x64>)
 8002194:	2263      	movs	r2, #99	@ 0x63
 8002196:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <MX_TIM6_Init+0x64>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800219e:	480d      	ldr	r0, [pc, #52]	@ (80021d4 <MX_TIM6_Init+0x64>)
 80021a0:	f003 fd06 	bl	8005bb0 <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80021aa:	f7ff fd81 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <MX_TIM6_Init+0x64>)
 80021bc:	f004 fed6 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80021c6:	f7ff fd73 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000674 	.word	0x20000674
 80021d8:	40001000 	.word	0x40001000

080021dc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <MX_TIM14_Init+0x40>)
 80021e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <MX_TIM14_Init+0x44>)
 80021e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80021e6:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <MX_TIM14_Init+0x40>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <MX_TIM14_Init+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <MX_TIM14_Init+0x40>)
 80021f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <MX_TIM14_Init+0x40>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <MX_TIM14_Init+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	@ (800221c <MX_TIM14_Init+0x40>)
 8002208:	f003 fcd2 	bl	8005bb0 <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002212:	f7ff fd4d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200006c0 	.word	0x200006c0
 8002220:	40002000 	.word	0x40002000

08002224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a30      	ldr	r2, [pc, #192]	@ (80022f4 <HAL_TIM_Base_MspInit+0xd0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d114      	bne.n	8002260 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002236:	4b30      	ldr	r3, [pc, #192]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a2f      	ldr	r2, [pc, #188]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b2d      	ldr	r3, [pc, #180]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	201d      	movs	r0, #29
 8002254:	f001 f8ad 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002258:	201d      	movs	r0, #29
 800225a:	f001 f8c6 	bl	80033ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800225e:	e044      	b.n	80022ea <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a25      	ldr	r2, [pc, #148]	@ (80022fc <HAL_TIM_Base_MspInit+0xd8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d114      	bne.n	8002294 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800226a:	4b23      	ldr	r3, [pc, #140]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a22      	ldr	r2, [pc, #136]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	201e      	movs	r0, #30
 8002288:	f001 f893 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800228c:	201e      	movs	r0, #30
 800228e:	f001 f8ac 	bl	80033ea <HAL_NVIC_EnableIRQ>
}
 8002292:	e02a      	b.n	80022ea <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <HAL_TIM_Base_MspInit+0xdc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d114      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800229e:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a15      	ldr	r2, [pc, #84]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2036      	movs	r0, #54	@ 0x36
 80022bc:	f001 f879 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022c0:	2036      	movs	r0, #54	@ 0x36
 80022c2:	f001 f892 	bl	80033ea <HAL_NVIC_EnableIRQ>
}
 80022c6:	e010      	b.n	80022ea <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <HAL_TIM_Base_MspInit+0xe0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10b      	bne.n	80022ea <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80022d2:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4a08      	ldr	r2, [pc, #32]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_TIM_Base_MspInit+0xd4>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40000800 	.word	0x40000800
 8002300:	40001000 	.word	0x40001000
 8002304:	40002000 	.word	0x40002000

08002308 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a22      	ldr	r2, [pc, #136]	@ (80023b0 <HAL_TIM_MspPostInit+0xa8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d11c      	bne.n	8002364 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <HAL_TIM_MspPostInit+0xac>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a21      	ldr	r2, [pc, #132]	@ (80023b4 <HAL_TIM_MspPostInit+0xac>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <HAL_TIM_MspPostInit+0xac>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002342:	2340      	movs	r3, #64	@ 0x40
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002352:	2302      	movs	r3, #2
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4816      	ldr	r0, [pc, #88]	@ (80023b8 <HAL_TIM_MspPostInit+0xb0>)
 800235e:	f001 ff29 	bl	80041b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002362:	e021      	b.n	80023a8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a14      	ldr	r2, [pc, #80]	@ (80023bc <HAL_TIM_MspPostInit+0xb4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11c      	bne.n	80023a8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_TIM_MspPostInit+0xac>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <HAL_TIM_MspPostInit+0xac>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <HAL_TIM_MspPostInit+0xac>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002398:	2302      	movs	r3, #2
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	4619      	mov	r1, r3
 80023a2:	4807      	ldr	r0, [pc, #28]	@ (80023c0 <HAL_TIM_MspPostInit+0xb8>)
 80023a4:	f001 ff06 	bl	80041b4 <HAL_GPIO_Init>
}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	@ 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40020c00 	.word	0x40020c00

080023c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023c8:	4b14      	ldr	r3, [pc, #80]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023ca:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <MX_USART3_UART_Init+0x5c>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <MX_USART3_UART_Init+0x58>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <MX_USART3_UART_Init+0x58>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	@ (800241c <MX_USART3_UART_Init+0x58>)
 8002408:	f004 fe5c 	bl	80070c4 <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002412:	f7ff fc4d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000070c 	.word	0x2000070c
 8002420:	40004800 	.word	0x40004800

08002424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0aa      	sub	sp, #168	@ 0xa8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	2284      	movs	r2, #132	@ 0x84
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f007 fc2e 	bl	8009ca6 <memset>
  if(uartHandle->Instance==USART3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a26      	ldr	r2, [pc, #152]	@ (80024e8 <HAL_UART_MspInit+0xc4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d144      	bne.n	80024de <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002458:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800245a:	2300      	movs	r3, #0
 800245c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f002 ffb4 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800246e:	f7ff fc1f 	bl	8001cb0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002472:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <HAL_UART_MspInit+0xc8>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	4a1d      	ldr	r2, [pc, #116]	@ (80024ec <HAL_UART_MspInit+0xc8>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800247c:	6413      	str	r3, [r2, #64]	@ 0x40
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_UART_MspInit+0xc8>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800248a:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <HAL_UART_MspInit+0xc8>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	4a17      	ldr	r2, [pc, #92]	@ (80024ec <HAL_UART_MspInit+0xc8>)
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	6313      	str	r3, [r2, #48]	@ 0x30
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <HAL_UART_MspInit+0xc8>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024bc:	2307      	movs	r3, #7
 80024be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80024c6:	4619      	mov	r1, r3
 80024c8:	4809      	ldr	r0, [pc, #36]	@ (80024f0 <HAL_UART_MspInit+0xcc>)
 80024ca:	f001 fe73 	bl	80041b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	2027      	movs	r0, #39	@ 0x27
 80024d4:	f000 ff6d 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024d8:	2027      	movs	r0, #39	@ 0x27
 80024da:	f000 ff86 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024de:	bf00      	nop
 80024e0:	37a8      	adds	r7, #168	@ 0xa8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40004800 	.word	0x40004800
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020c00 	.word	0x40020c00

080024f4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80024fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002502:	2206      	movs	r2, #6
 8002504:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002508:	2202      	movs	r2, #2
 800250a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250e:	2200      	movs	r2, #0
 8002510:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002512:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002514:	2202      	movs	r2, #2
 8002516:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251a:	2201      	movs	r2, #1
 800251c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002520:	2200      	movs	r2, #0
 8002522:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002526:	2200      	movs	r2, #0
 8002528:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800252a:	4b08      	ldr	r3, [pc, #32]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252c:	2201      	movs	r2, #1
 800252e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002532:	2200      	movs	r2, #0
 8002534:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002538:	f002 f935 	bl	80047a6 <HAL_PCD_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002542:	f7ff fbb5 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000794 	.word	0x20000794

08002550 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0ac      	sub	sp, #176	@ 0xb0
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002568:	f107 0318 	add.w	r3, r7, #24
 800256c:	2284      	movs	r2, #132	@ 0x84
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f007 fb98 	bl	8009ca6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800257e:	d159      	bne.n	8002634 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002580:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002584:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258c:	f107 0318 	add.w	r3, r7, #24
 8002590:	4618      	mov	r0, r3
 8002592:	f002 ff1d 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800259c:	f7ff fb88 	bl	8001cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	4b26      	ldr	r3, [pc, #152]	@ (800263c <HAL_PCD_MspInit+0xec>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	4a25      	ldr	r2, [pc, #148]	@ (800263c <HAL_PCD_MspInit+0xec>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <HAL_PCD_MspInit+0xec>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80025b8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80025bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025d2:	230a      	movs	r3, #10
 80025d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025dc:	4619      	mov	r1, r3
 80025de:	4818      	ldr	r0, [pc, #96]	@ (8002640 <HAL_PCD_MspInit+0xf0>)
 80025e0:	f001 fde8 	bl	80041b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025fc:	4619      	mov	r1, r3
 80025fe:	4810      	ldr	r0, [pc, #64]	@ (8002640 <HAL_PCD_MspInit+0xf0>)
 8002600:	f001 fdd8 	bl	80041b4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002604:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <HAL_PCD_MspInit+0xec>)
 8002606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002608:	4a0c      	ldr	r2, [pc, #48]	@ (800263c <HAL_PCD_MspInit+0xec>)
 800260a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800260e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_PCD_MspInit+0xec>)
 8002612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4b07      	ldr	r3, [pc, #28]	@ (800263c <HAL_PCD_MspInit+0xec>)
 800261e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002620:	4a06      	ldr	r2, [pc, #24]	@ (800263c <HAL_PCD_MspInit+0xec>)
 8002622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002626:	6453      	str	r3, [r2, #68]	@ 0x44
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <HAL_PCD_MspInit+0xec>)
 800262a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002634:	bf00      	nop
 8002636:	37b0      	adds	r7, #176	@ 0xb0
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000

08002644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800267c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002648:	f7ff fc8e 	bl	8001f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800264c:	480c      	ldr	r0, [pc, #48]	@ (8002680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800264e:	490d      	ldr	r1, [pc, #52]	@ (8002684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002664:	4c0a      	ldr	r4, [pc, #40]	@ (8002690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002672:	f007 fb83 	bl	8009d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002676:	f7ff fa43 	bl	8001b00 <main>
  bx  lr    
 800267a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800267c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002684:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002688:	0800d830 	.word	0x0800d830
  ldr r2, =_sbss
 800268c:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 8002690:	20000dc4 	.word	0x20000dc4

08002694 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002694:	e7fe      	b.n	8002694 <CAN1_RX0_IRQHandler>

08002696 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269a:	2003      	movs	r0, #3
 800269c:	f000 fe7e 	bl	800339c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 f805 	bl	80026b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a6:	f7ff fb09 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b8:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <HAL_InitTick+0x54>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_InitTick+0x58>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fe99 	bl	8003406 <HAL_SYSTICK_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e00e      	b.n	80026fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d80a      	bhi.n	80026fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f000 fe61 	bl	80033b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f0:	4a06      	ldr	r2, [pc, #24]	@ (800270c <HAL_InitTick+0x5c>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000010 	.word	0x20000010
 8002708:	20000018 	.word	0x20000018
 800270c:	20000014 	.word	0x20000014

08002710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_IncTick+0x20>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_IncTick+0x24>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <HAL_IncTick+0x24>)
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000018 	.word	0x20000018
 8002734:	20000c74 	.word	0x20000c74

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b03      	ldr	r3, [pc, #12]	@ (800274c <HAL_GetTick+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000c74 	.word	0x20000c74

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff ffee 	bl	8002738 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d005      	beq.n	8002776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276a:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_Delay+0x44>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002776:	bf00      	nop
 8002778:	f7ff ffde 	bl	8002738 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d8f7      	bhi.n	8002778 <HAL_Delay+0x28>
  {
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000018 	.word	0x20000018

08002798 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e031      	b.n	8002812 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fc86 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d116      	bne.n	8002804 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027da:	4b10      	ldr	r3, [pc, #64]	@ (800281c <HAL_ADC_Init+0x84>)
 80027dc:	4013      	ands	r3, r2
 80027de:	f043 0202 	orr.w	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fc04 	bl	8002ff4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	f043 0201 	orr.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
 8002802:	e001      	b.n	8002808 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	ffffeefd 	.word	0xffffeefd

08002820 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_ADC_Start+0x1a>
 8002836:	2302      	movs	r3, #2
 8002838:	e0ad      	b.n	8002996 <HAL_ADC_Start+0x176>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d018      	beq.n	8002882 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002860:	4b50      	ldr	r3, [pc, #320]	@ (80029a4 <HAL_ADC_Start+0x184>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a50      	ldr	r2, [pc, #320]	@ (80029a8 <HAL_ADC_Start+0x188>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0c9a      	lsrs	r2, r3, #18
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002874:	e002      	b.n	800287c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3b01      	subs	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f9      	bne.n	8002876 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d175      	bne.n	800297c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002894:	4b45      	ldr	r3, [pc, #276]	@ (80029ac <HAL_ADC_Start+0x18c>)
 8002896:	4013      	ands	r3, r2
 8002898:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ca:	d106      	bne.n	80028da <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	f023 0206 	bic.w	r2, r3, #6
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80028d8:	e002      	b.n	80028e0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80028f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80028f2:	4b2f      	ldr	r3, [pc, #188]	@ (80029b0 <HAL_ADC_Start+0x190>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10f      	bne.n	800291e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d143      	bne.n	8002994 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	e03a      	b.n	8002994 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a24      	ldr	r2, [pc, #144]	@ (80029b4 <HAL_ADC_Start+0x194>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10e      	bne.n	8002946 <HAL_ADC_Start+0x126>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d107      	bne.n	8002946 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002944:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002946:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <HAL_ADC_Start+0x190>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d120      	bne.n	8002994 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a18      	ldr	r2, [pc, #96]	@ (80029b8 <HAL_ADC_Start+0x198>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d11b      	bne.n	8002994 <HAL_ADC_Start+0x174>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d114      	bne.n	8002994 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	e00b      	b.n	8002994 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	f043 0210 	orr.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000010 	.word	0x20000010
 80029a8:	431bde83 	.word	0x431bde83
 80029ac:	fffff8fe 	.word	0xfffff8fe
 80029b0:	40012300 	.word	0x40012300
 80029b4:	40012000 	.word	0x40012000
 80029b8:	40012200 	.word	0x40012200

080029bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d8:	d113      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e8:	d10b      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f043 0220 	orr.w	r2, r3, #32
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e063      	b.n	8002aca <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a02:	f7ff fe99 	bl	8002738 <HAL_GetTick>
 8002a06:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a08:	e021      	b.n	8002a4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d01d      	beq.n	8002a4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_ADC_PollForConversion+0x6c>
 8002a18:	f7ff fe8e 	bl	8002738 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d212      	bcs.n	8002a4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d00b      	beq.n	8002a4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f043 0204 	orr.w	r2, r3, #4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e03d      	b.n	8002aca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d1d6      	bne.n	8002a0a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0212 	mvn.w	r2, #18
 8002a64:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d123      	bne.n	8002ac8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11f      	bne.n	8002ac8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d049      	beq.n	8002b9c <HAL_ADC_IRQHandler+0xca>
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d046      	beq.n	8002b9c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d12b      	bne.n	8002b8c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d127      	bne.n	8002b8c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d119      	bne.n	8002b8c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0220 	bic.w	r2, r2, #32
 8002b66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8bd 	bl	8002d0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0212 	mvn.w	r2, #18
 8002b9a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002baa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d057      	beq.n	8002c62 <HAL_ADC_IRQHandler+0x190>
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d054      	beq.n	8002c62 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d139      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d12b      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d124      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11d      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d119      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c2c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fac8 	bl	80031e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 020c 	mvn.w	r2, #12
 8002c60:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c70:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d017      	beq.n	8002ca8 <HAL_ADC_IRQHandler+0x1d6>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d014      	beq.n	8002ca8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f841 	bl	8002d20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0201 	mvn.w	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cb6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_ADC_IRQHandler+0x218>
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc8:	f043 0202 	orr.w	r2, r3, #2
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0220 	mvn.w	r2, #32
 8002cd8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f82a 	bl	8002d34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0220 	mvn.w	r2, #32
 8002ce8:	601a      	str	r2, [r3, #0]
  }
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1c>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e136      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x28a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	d93a      	bls.n	8002dea <HAL_ADC_ConfigChannel+0xa2>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d7c:	d035      	beq.n	8002dea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68d9      	ldr	r1, [r3, #12]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	3b1e      	subs	r3, #30
 8002d94:	2207      	movs	r2, #7
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	400a      	ands	r2, r1
 8002da2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8d      	ldr	r2, [pc, #564]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x298>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10a      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68d9      	ldr	r1, [r3, #12]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	061a      	lsls	r2, r3, #24
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc2:	e035      	b.n	8002e30 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4403      	add	r3, r0
 8002ddc:	3b1e      	subs	r3, #30
 8002dde:	409a      	lsls	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de8:	e022      	b.n	8002e30 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6919      	ldr	r1, [r3, #16]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	2207      	movs	r2, #7
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43da      	mvns	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6919      	ldr	r1, [r3, #16]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4603      	mov	r3, r0
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4403      	add	r3, r0
 8002e26:	409a      	lsls	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d824      	bhi.n	8002e82 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	3b05      	subs	r3, #5
 8002e4a:	221f      	movs	r2, #31
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43da      	mvns	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	400a      	ands	r2, r1
 8002e58:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	3b05      	subs	r3, #5
 8002e74:	fa00 f203 	lsl.w	r2, r0, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e80:	e04c      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d824      	bhi.n	8002ed4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	3b23      	subs	r3, #35	@ 0x23
 8002e9c:	221f      	movs	r2, #31
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3b23      	subs	r3, #35	@ 0x23
 8002ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ed2:	e023      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b41      	subs	r3, #65	@ 0x41
 8002ee6:	221f      	movs	r2, #31
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43da      	mvns	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4618      	mov	r0, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3b41      	subs	r3, #65	@ 0x41
 8002f10:	fa00 f203 	lsl.w	r2, r0, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a30      	ldr	r2, [pc, #192]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x29c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10a      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1f4>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f2e:	d105      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f30:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f36:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f3a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a28      	ldr	r2, [pc, #160]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x29c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10f      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x21e>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b12      	cmp	r3, #18
 8002f4c:	d10b      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f4e:	4b26      	ldr	r3, [pc, #152]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a25      	ldr	r2, [pc, #148]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f58:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f5a:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4a22      	ldr	r2, [pc, #136]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x29c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d12b      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x280>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x298>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d003      	beq.n	8002f82 <HAL_ADC_ConfigChannel+0x23a>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b11      	cmp	r3, #17
 8002f80:	d122      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f82:	4b19      	ldr	r3, [pc, #100]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a18      	ldr	r2, [pc, #96]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f88:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f8c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f8e:	4b16      	ldr	r3, [pc, #88]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f98:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x298>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d111      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fa4:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_ADC_ConfigChannel+0x2a4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0c9a      	lsrs	r2, r3, #18
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fba:	e002      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f9      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	10000012 	.word	0x10000012
 8002fe4:	40012000 	.word	0x40012000
 8002fe8:	40012300 	.word	0x40012300
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	431bde83 	.word	0x431bde83

08002ff4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ffc:	4b78      	ldr	r3, [pc, #480]	@ (80031e0 <ADC_Init+0x1ec>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a77      	ldr	r2, [pc, #476]	@ (80031e0 <ADC_Init+0x1ec>)
 8003002:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003006:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003008:	4b75      	ldr	r3, [pc, #468]	@ (80031e0 <ADC_Init+0x1ec>)
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4973      	ldr	r1, [pc, #460]	@ (80031e0 <ADC_Init+0x1ec>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	021a      	lsls	r2, r3, #8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800306a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6899      	ldr	r1, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	4a58      	ldr	r2, [pc, #352]	@ (80031e4 <ADC_Init+0x1f0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003096:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	e00f      	b.n	80030ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0202 	bic.w	r2, r2, #2
 80030fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6899      	ldr	r1, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	005a      	lsls	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01b      	beq.n	8003154 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800313a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	3b01      	subs	r3, #1
 8003148:	035a      	lsls	r2, r3, #13
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e007      	b.n	8003164 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003162:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	3b01      	subs	r3, #1
 8003180:	051a      	lsls	r2, r3, #20
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031a6:	025a      	lsls	r2, r3, #9
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6899      	ldr	r1, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	029a      	lsls	r2, r3, #10
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40012300 	.word	0x40012300
 80031e4:	0f000001 	.word	0x0f000001

080031e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <__NVIC_SetPriorityGrouping+0x40>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003224:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003226:	4313      	orrs	r3, r2
 8003228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322a:	4a04      	ldr	r2, [pc, #16]	@ (800323c <__NVIC_SetPriorityGrouping+0x40>)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	60d3      	str	r3, [r2, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00
 8003240:	05fa0000 	.word	0x05fa0000

08003244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	@ (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db0b      	blt.n	800328a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4907      	ldr	r1, [pc, #28]	@ (8003298 <__NVIC_EnableIRQ+0x38>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2001      	movs	r0, #1
 8003282:	fa00 f202 	lsl.w	r2, r0, r2
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100

0800329c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	db0a      	blt.n	80032c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	490c      	ldr	r1, [pc, #48]	@ (80032e8 <__NVIC_SetPriority+0x4c>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	440b      	add	r3, r1
 80032c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c4:	e00a      	b.n	80032dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4908      	ldr	r1, [pc, #32]	@ (80032ec <__NVIC_SetPriority+0x50>)
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	3b04      	subs	r3, #4
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	440b      	add	r3, r1
 80032da:	761a      	strb	r2, [r3, #24]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	@ 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f1c3 0307 	rsb	r3, r3, #7
 800330a:	2b04      	cmp	r3, #4
 800330c:	bf28      	it	cs
 800330e:	2304      	movcs	r3, #4
 8003310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3304      	adds	r3, #4
 8003316:	2b06      	cmp	r3, #6
 8003318:	d902      	bls.n	8003320 <NVIC_EncodePriority+0x30>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3b03      	subs	r3, #3
 800331e:	e000      	b.n	8003322 <NVIC_EncodePriority+0x32>
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	401a      	ands	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003338:	f04f 31ff 	mov.w	r1, #4294967295
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43d9      	mvns	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	4313      	orrs	r3, r2
         );
}
 800334a:	4618      	mov	r0, r3
 800334c:	3724      	adds	r7, #36	@ 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003368:	d301      	bcc.n	800336e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336a:	2301      	movs	r3, #1
 800336c:	e00f      	b.n	800338e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800336e:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <SysTick_Config+0x40>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003376:	210f      	movs	r1, #15
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	f7ff ff8e 	bl	800329c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <SysTick_Config+0x40>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003386:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <SysTick_Config+0x40>)
 8003388:	2207      	movs	r2, #7
 800338a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	e000e010 	.word	0xe000e010

0800339c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff29 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033c4:	f7ff ff3e 	bl	8003244 <__NVIC_GetPriorityGrouping>
 80033c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	6978      	ldr	r0, [r7, #20]
 80033d0:	f7ff ff8e 	bl	80032f0 <NVIC_EncodePriority>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff5d 	bl	800329c <__NVIC_SetPriority>
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff31 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffa2 	bl	8003358 <SysTick_Config>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff f984 	bl	8002738 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e099      	b.n	8003570 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800345c:	e00f      	b.n	800347e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800345e:	f7ff f96b 	bl	8002738 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b05      	cmp	r3, #5
 800346a:	d908      	bls.n	800347e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2203      	movs	r2, #3
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e078      	b.n	8003570 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e8      	bne.n	800345e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <HAL_DMA_Init+0x158>)
 8003498:	4013      	ands	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d107      	bne.n	80034e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e0:	4313      	orrs	r3, r2
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	2b04      	cmp	r3, #4
 8003510:	d117      	bne.n	8003542 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa7b 	bl	8003a20 <DMA_CheckFifoParam>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2240      	movs	r2, #64	@ 0x40
 8003534:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800353e:	2301      	movs	r3, #1
 8003540:	e016      	b.n	8003570 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa32 	bl	80039b4 <DMA_CalcBaseAndBitshift>
 8003550:	4603      	mov	r3, r0
 8003552:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003558:	223f      	movs	r2, #63	@ 0x3f
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	f010803f 	.word	0xf010803f

0800357c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003588:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800358a:	f7ff f8d5 	bl	8002738 <HAL_GetTick>
 800358e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d008      	beq.n	80035ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2280      	movs	r2, #128	@ 0x80
 80035a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e052      	b.n	8003654 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0216 	bic.w	r2, r2, #22
 80035bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <HAL_DMA_Abort+0x62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fe:	e013      	b.n	8003628 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003600:	f7ff f89a 	bl	8002738 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b05      	cmp	r3, #5
 800360c:	d90c      	bls.n	8003628 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2203      	movs	r2, #3
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e015      	b.n	8003654 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e4      	bne.n	8003600 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	223f      	movs	r2, #63	@ 0x3f
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d004      	beq.n	800367a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2280      	movs	r2, #128	@ 0x80
 8003674:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e00c      	b.n	8003694 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2205      	movs	r2, #5
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80036ac:	4b8e      	ldr	r3, [pc, #568]	@ (80038e8 <HAL_DMA_IRQHandler+0x248>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a8e      	ldr	r2, [pc, #568]	@ (80038ec <HAL_DMA_IRQHandler+0x24c>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0a9b      	lsrs	r3, r3, #10
 80036b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	2208      	movs	r2, #8
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01a      	beq.n	800370c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f8:	2208      	movs	r2, #8
 80036fa:	409a      	lsls	r2, r3
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003710:	2201      	movs	r2, #1
 8003712:	409a      	lsls	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d012      	beq.n	8003742 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372e:	2201      	movs	r2, #1
 8003730:	409a      	lsls	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003746:	2204      	movs	r2, #4
 8003748:	409a      	lsls	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d012      	beq.n	8003778 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003764:	2204      	movs	r2, #4
 8003766:	409a      	lsls	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003770:	f043 0204 	orr.w	r2, r3, #4
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377c:	2210      	movs	r2, #16
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d043      	beq.n	8003810 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d03c      	beq.n	8003810 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	2210      	movs	r2, #16
 800379c:	409a      	lsls	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d018      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d024      	beq.n	8003810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
 80037ce:	e01f      	b.n	8003810 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
 80037e0:	e016      	b.n	8003810 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0208 	bic.w	r2, r2, #8
 80037fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	2220      	movs	r2, #32
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 808f 	beq.w	8003940 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8087 	beq.w	8003940 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003836:	2220      	movs	r2, #32
 8003838:	409a      	lsls	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b05      	cmp	r3, #5
 8003848:	d136      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0216 	bic.w	r2, r2, #22
 8003858:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003868:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <HAL_DMA_IRQHandler+0x1da>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0208 	bic.w	r2, r2, #8
 8003888:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388e:	223f      	movs	r2, #63	@ 0x3f
 8003890:	409a      	lsls	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d07e      	beq.n	80039ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
        }
        return;
 80038b6:	e079      	b.n	80039ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01d      	beq.n	8003902 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d031      	beq.n	8003940 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e02c      	b.n	8003940 <HAL_DMA_IRQHandler+0x2a0>
 80038e6:	bf00      	nop
 80038e8:	20000010 	.word	0x20000010
 80038ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d023      	beq.n	8003940 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
 8003900:	e01e      	b.n	8003940 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10f      	bne.n	8003930 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0210 	bic.w	r2, r2, #16
 800391e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003944:	2b00      	cmp	r3, #0
 8003946:	d032      	beq.n	80039ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d022      	beq.n	800399a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2205      	movs	r2, #5
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	3301      	adds	r3, #1
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	d307      	bcc.n	8003988 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f2      	bne.n	800396c <HAL_DMA_IRQHandler+0x2cc>
 8003986:	e000      	b.n	800398a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003988:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
 80039aa:	e000      	b.n	80039ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80039ac:	bf00      	nop
    }
  }
}
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	3b10      	subs	r3, #16
 80039c4:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <DMA_CalcBaseAndBitshift+0x60>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <DMA_CalcBaseAndBitshift+0x64>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d908      	bls.n	80039f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <DMA_CalcBaseAndBitshift+0x68>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	1d1a      	adds	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80039f2:	e006      	b.n	8003a02 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <DMA_CalcBaseAndBitshift+0x68>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	aaaaaaab 	.word	0xaaaaaaab
 8003a18:	0800d3e8 	.word	0x0800d3e8
 8003a1c:	fffffc00 	.word	0xfffffc00

08003a20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11f      	bne.n	8003a7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d856      	bhi.n	8003aee <DMA_CheckFifoParam+0xce>
 8003a40:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <DMA_CheckFifoParam+0x28>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a6b 	.word	0x08003a6b
 8003a50:	08003a59 	.word	0x08003a59
 8003a54:	08003aef 	.word	0x08003aef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d046      	beq.n	8003af2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a68:	e043      	b.n	8003af2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a72:	d140      	bne.n	8003af6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a78:	e03d      	b.n	8003af6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a82:	d121      	bne.n	8003ac8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d837      	bhi.n	8003afa <DMA_CheckFifoParam+0xda>
 8003a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a90 <DMA_CheckFifoParam+0x70>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003aa7 	.word	0x08003aa7
 8003a98:	08003aa1 	.word	0x08003aa1
 8003a9c:	08003ab9 	.word	0x08003ab9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e030      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d025      	beq.n	8003afe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab6:	e022      	b.n	8003afe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ac0:	d11f      	bne.n	8003b02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ac6:	e01c      	b.n	8003b02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d903      	bls.n	8003ad6 <DMA_CheckFifoParam+0xb6>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d003      	beq.n	8003adc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ad4:	e018      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8003ada:	e015      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e00b      	b.n	8003b06 <DMA_CheckFifoParam+0xe6>
      break;
 8003aee:	bf00      	nop
 8003af0:	e00a      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003af2:	bf00      	nop
 8003af4:	e008      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e006      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003afa:	bf00      	nop
 8003afc:	e004      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <DMA_CheckFifoParam+0xe8>
      break;
 8003b06:	bf00      	nop
    }
  } 
  
  return status; 
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop

08003b18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e086      	b.n	8003c38 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2223      	movs	r2, #35	@ 0x23
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd fba9 	bl	8001294 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b42:	4b3f      	ldr	r3, [pc, #252]	@ (8003c40 <HAL_ETH_Init+0x128>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	4a3e      	ldr	r2, [pc, #248]	@ (8003c40 <HAL_ETH_Init+0x128>)
 8003b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c40 <HAL_ETH_Init+0x128>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c44 <HAL_ETH_Init+0x12c>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a39      	ldr	r2, [pc, #228]	@ (8003c44 <HAL_ETH_Init+0x12c>)
 8003b60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b66:	4b37      	ldr	r3, [pc, #220]	@ (8003c44 <HAL_ETH_Init+0x12c>)
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4935      	ldr	r1, [pc, #212]	@ (8003c44 <HAL_ETH_Init+0x12c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b74:	4b33      	ldr	r3, [pc, #204]	@ (8003c44 <HAL_ETH_Init+0x12c>)
 8003b76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b90:	f7fe fdd2 	bl	8002738 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b96:	e011      	b.n	8003bbc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b98:	f7fe fdce 	bl	8002738 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003ba6:	d909      	bls.n	8003bbc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2204      	movs	r2, #4
 8003bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	22e0      	movs	r2, #224	@ 0xe0
 8003bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e03d      	b.n	8003c38 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e4      	bne.n	8003b98 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f97a 	bl	8003ec8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fa25 	bl	8004024 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fa7b 	bl	80040d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	461a      	mov	r2, r3
 8003be6:	2100      	movs	r1, #0
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f9e3 	bl	8003fb4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <HAL_ETH_Init+0x130>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003c22:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2210      	movs	r2, #16
 8003c32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40013800 	.word	0x40013800
 8003c48:	00020060 	.word	0x00020060

08003c4c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4b53      	ldr	r3, [pc, #332]	@ (8003db0 <ETH_SetMACConfig+0x164>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	7b9b      	ldrb	r3, [r3, #14]
 8003c6a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	7c12      	ldrb	r2, [r2, #16]
 8003c70:	2a00      	cmp	r2, #0
 8003c72:	d102      	bne.n	8003c7a <ETH_SetMACConfig+0x2e>
 8003c74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c78:	e000      	b.n	8003c7c <ETH_SetMACConfig+0x30>
 8003c7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003c7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	7c52      	ldrb	r2, [r2, #17]
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d102      	bne.n	8003c8c <ETH_SetMACConfig+0x40>
 8003c86:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003c8a:	e000      	b.n	8003c8e <ETH_SetMACConfig+0x42>
 8003c8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	7fdb      	ldrb	r3, [r3, #31]
 8003c9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003c9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ca2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	7f92      	ldrb	r2, [r2, #30]
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	d102      	bne.n	8003cb2 <ETH_SetMACConfig+0x66>
 8003cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cb0:	e000      	b.n	8003cb4 <ETH_SetMACConfig+0x68>
 8003cb2:	2200      	movs	r2, #0
                        macconf->Speed |
 8003cb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	7f1b      	ldrb	r3, [r3, #28]
 8003cba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003cbc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003cc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	791b      	ldrb	r3, [r3, #4]
 8003cc8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003cca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	d102      	bne.n	8003cdc <ETH_SetMACConfig+0x90>
 8003cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cda:	e000      	b.n	8003cde <ETH_SetMACConfig+0x92>
 8003cdc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	7bdb      	ldrb	r3, [r3, #15]
 8003ce4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ce6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cf4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d0e:	2001      	movs	r0, #1
 8003d10:	f7fe fd1e 	bl	8002750 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003d3a:	2a00      	cmp	r2, #0
 8003d3c:	d101      	bne.n	8003d42 <ETH_SetMACConfig+0xf6>
 8003d3e:	2280      	movs	r2, #128	@ 0x80
 8003d40:	e000      	b.n	8003d44 <ETH_SetMACConfig+0xf8>
 8003d42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003d52:	2a01      	cmp	r2, #1
 8003d54:	d101      	bne.n	8003d5a <ETH_SetMACConfig+0x10e>
 8003d56:	2208      	movs	r2, #8
 8003d58:	e000      	b.n	8003d5c <ETH_SetMACConfig+0x110>
 8003d5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003d64:	2a01      	cmp	r2, #1
 8003d66:	d101      	bne.n	8003d6c <ETH_SetMACConfig+0x120>
 8003d68:	2204      	movs	r2, #4
 8003d6a:	e000      	b.n	8003d6e <ETH_SetMACConfig+0x122>
 8003d6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003d76:	2a01      	cmp	r2, #1
 8003d78:	d101      	bne.n	8003d7e <ETH_SetMACConfig+0x132>
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	e000      	b.n	8003d80 <ETH_SetMACConfig+0x134>
 8003d7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d80:	4313      	orrs	r3, r2
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7fe fcd9 	bl	8002750 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	619a      	str	r2, [r3, #24]
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	fd20810f 	.word	0xfd20810f

08003db4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec4 <ETH_SetDMAConfig+0x110>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	7b1b      	ldrb	r3, [r3, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <ETH_SetDMAConfig+0x2c>
 8003dda:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003dde:	e000      	b.n	8003de2 <ETH_SetDMAConfig+0x2e>
 8003de0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	7b5b      	ldrb	r3, [r3, #13]
 8003de6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003de8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	7f52      	ldrb	r2, [r2, #29]
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	d102      	bne.n	8003df8 <ETH_SetDMAConfig+0x44>
 8003df2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003df6:	e000      	b.n	8003dfa <ETH_SetDMAConfig+0x46>
 8003df8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003dfa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	7b9b      	ldrb	r3, [r3, #14]
 8003e00:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e02:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	7f1b      	ldrb	r3, [r3, #28]
 8003e0e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003e10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	7f9b      	ldrb	r3, [r3, #30]
 8003e16:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e18:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e26:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7fe fc80 	bl	8002750 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	791b      	ldrb	r3, [r3, #4]
 8003e62:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e68:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e6e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e74:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e7c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e7e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e86:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e8c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e9a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	f7fe fc51 	bl	8002750 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	f8de3f23 	.word	0xf8de3f23

08003ec8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b0a6      	sub	sp, #152	@ 0x98
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003edc:	2300      	movs	r3, #0
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f34:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff fe7f 	bl	8003c4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f84:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003f88:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f8e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f9e:	f107 0308 	add.w	r3, r7, #8
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff05 	bl	8003db4 <ETH_SetDMAConfig>
}
 8003faa:	bf00      	nop
 8003fac:	3798      	adds	r7, #152	@ 0x98
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3305      	adds	r3, #5
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	3204      	adds	r2, #4
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	4b11      	ldr	r3, [pc, #68]	@ (800401c <ETH_MACAddressConfig+0x68>)
 8003fd6:	4413      	add	r3, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3303      	adds	r3, #3
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	061a      	lsls	r2, r3, #24
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	7812      	ldrb	r2, [r2, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <ETH_MACAddressConfig+0x6c>)
 8004006:	4413      	add	r3, r2
 8004008:	461a      	mov	r2, r3
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40028040 	.word	0x40028040
 8004020:	40028044 	.word	0x40028044

08004024 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e03e      	b.n	80040b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68d9      	ldr	r1, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	440b      	add	r3, r1
 8004042:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2200      	movs	r2, #0
 800404e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	3206      	adds	r2, #6
 8004064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d80c      	bhi.n	8004094 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68d9      	ldr	r1, [r3, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	e004      	b.n	800409e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3301      	adds	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d9bd      	bls.n	8004032 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c8:	611a      	str	r2, [r3, #16]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e048      	b.n	8004176 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6919      	ldr	r1, [r3, #16]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	440b      	add	r3, r1
 80040f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2200      	movs	r2, #0
 8004112:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004120:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	3212      	adds	r2, #18
 8004142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d80c      	bhi.n	8004166 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6919      	ldr	r1, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	440b      	add	r3, r1
 800415e:	461a      	mov	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	60da      	str	r2, [r3, #12]
 8004164:	e004      	b.n	8004170 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3301      	adds	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d9b3      	bls.n	80040e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a6:	60da      	str	r2, [r3, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b089      	sub	sp, #36	@ 0x24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e175      	b.n	80044c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041d4:	2201      	movs	r2, #1
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	f040 8164 	bne.w	80044ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d005      	beq.n	800420a <HAL_GPIO_Init+0x56>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d130      	bne.n	800426c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2203      	movs	r2, #3
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004240:	2201      	movs	r2, #1
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 0201 	and.w	r2, r3, #1
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b03      	cmp	r3, #3
 8004276:	d017      	beq.n	80042a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	2203      	movs	r2, #3
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d123      	bne.n	80042fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	08da      	lsrs	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3208      	adds	r2, #8
 80042bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	220f      	movs	r2, #15
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	08da      	lsrs	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3208      	adds	r2, #8
 80042f6:	69b9      	ldr	r1, [r7, #24]
 80042f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2203      	movs	r2, #3
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0203 	and.w	r2, r3, #3
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80be 	beq.w	80044ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800433e:	4b66      	ldr	r3, [pc, #408]	@ (80044d8 <HAL_GPIO_Init+0x324>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	4a65      	ldr	r2, [pc, #404]	@ (80044d8 <HAL_GPIO_Init+0x324>)
 8004344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004348:	6453      	str	r3, [r2, #68]	@ 0x44
 800434a:	4b63      	ldr	r3, [pc, #396]	@ (80044d8 <HAL_GPIO_Init+0x324>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004356:	4a61      	ldr	r2, [pc, #388]	@ (80044dc <HAL_GPIO_Init+0x328>)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	089b      	lsrs	r3, r3, #2
 800435c:	3302      	adds	r3, #2
 800435e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	220f      	movs	r2, #15
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a58      	ldr	r2, [pc, #352]	@ (80044e0 <HAL_GPIO_Init+0x32c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d037      	beq.n	80043f2 <HAL_GPIO_Init+0x23e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a57      	ldr	r2, [pc, #348]	@ (80044e4 <HAL_GPIO_Init+0x330>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d031      	beq.n	80043ee <HAL_GPIO_Init+0x23a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a56      	ldr	r2, [pc, #344]	@ (80044e8 <HAL_GPIO_Init+0x334>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02b      	beq.n	80043ea <HAL_GPIO_Init+0x236>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a55      	ldr	r2, [pc, #340]	@ (80044ec <HAL_GPIO_Init+0x338>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d025      	beq.n	80043e6 <HAL_GPIO_Init+0x232>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a54      	ldr	r2, [pc, #336]	@ (80044f0 <HAL_GPIO_Init+0x33c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01f      	beq.n	80043e2 <HAL_GPIO_Init+0x22e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a53      	ldr	r2, [pc, #332]	@ (80044f4 <HAL_GPIO_Init+0x340>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d019      	beq.n	80043de <HAL_GPIO_Init+0x22a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a52      	ldr	r2, [pc, #328]	@ (80044f8 <HAL_GPIO_Init+0x344>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_GPIO_Init+0x226>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a51      	ldr	r2, [pc, #324]	@ (80044fc <HAL_GPIO_Init+0x348>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00d      	beq.n	80043d6 <HAL_GPIO_Init+0x222>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a50      	ldr	r2, [pc, #320]	@ (8004500 <HAL_GPIO_Init+0x34c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <HAL_GPIO_Init+0x21e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004504 <HAL_GPIO_Init+0x350>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_GPIO_Init+0x21a>
 80043ca:	2309      	movs	r3, #9
 80043cc:	e012      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043ce:	230a      	movs	r3, #10
 80043d0:	e010      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043d2:	2308      	movs	r3, #8
 80043d4:	e00e      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043d6:	2307      	movs	r3, #7
 80043d8:	e00c      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043da:	2306      	movs	r3, #6
 80043dc:	e00a      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043de:	2305      	movs	r3, #5
 80043e0:	e008      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043e2:	2304      	movs	r3, #4
 80043e4:	e006      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043e6:	2303      	movs	r3, #3
 80043e8:	e004      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e002      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_GPIO_Init+0x240>
 80043f2:	2300      	movs	r3, #0
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	f002 0203 	and.w	r2, r2, #3
 80043fa:	0092      	lsls	r2, r2, #2
 80043fc:	4093      	lsls	r3, r2
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004404:	4935      	ldr	r1, [pc, #212]	@ (80044dc <HAL_GPIO_Init+0x328>)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	3302      	adds	r3, #2
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004412:	4b3d      	ldr	r3, [pc, #244]	@ (8004508 <HAL_GPIO_Init+0x354>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004436:	4a34      	ldr	r2, [pc, #208]	@ (8004508 <HAL_GPIO_Init+0x354>)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800443c:	4b32      	ldr	r3, [pc, #200]	@ (8004508 <HAL_GPIO_Init+0x354>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004460:	4a29      	ldr	r2, [pc, #164]	@ (8004508 <HAL_GPIO_Init+0x354>)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004466:	4b28      	ldr	r3, [pc, #160]	@ (8004508 <HAL_GPIO_Init+0x354>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800448a:	4a1f      	ldr	r2, [pc, #124]	@ (8004508 <HAL_GPIO_Init+0x354>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004490:	4b1d      	ldr	r3, [pc, #116]	@ (8004508 <HAL_GPIO_Init+0x354>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b4:	4a14      	ldr	r2, [pc, #80]	@ (8004508 <HAL_GPIO_Init+0x354>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3301      	adds	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	f67f ae86 	bls.w	80041d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3724      	adds	r7, #36	@ 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40020000 	.word	0x40020000
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020c00 	.word	0x40020c00
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40021400 	.word	0x40021400
 80044f8:	40021800 	.word	0x40021800
 80044fc:	40021c00 	.word	0x40021c00
 8004500:	40022000 	.word	0x40022000
 8004504:	40022400 	.word	0x40022400
 8004508:	40013c00 	.word	0x40013c00

0800450c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
 8004518:	4613      	mov	r3, r2
 800451a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800451c:	787b      	ldrb	r3, [r7, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004522:	887a      	ldrh	r2, [r7, #2]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004528:	e003      	b.n	8004532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	041a      	lsls	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	619a      	str	r2, [r3, #24]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e08b      	b.n	800466a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fd f82e 	bl	80015c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	@ 0x24
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	e006      	b.n	80045c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d108      	bne.n	80045e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	e007      	b.n	80045f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <HAL_I2C_Init+0x134>)
 80045fe:	430b      	orrs	r3, r1
 8004600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69d9      	ldr	r1, [r3, #28]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	02008000 	.word	0x02008000

08004678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	d138      	bne.n	8004700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004698:	2302      	movs	r3, #2
 800469a:	e032      	b.n	8004702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	@ 0x24
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b20      	cmp	r3, #32
 8004722:	d139      	bne.n	8004798 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800472e:	2302      	movs	r3, #2
 8004730:	e033      	b.n	800479a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2224      	movs	r2, #36	@ 0x24
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004760:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af02      	add	r7, sp, #8
 80047ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e108      	b.n	80049ca <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd febc 	bl	8002550 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2203      	movs	r2, #3
 80047dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047e6:	d102      	bne.n	80047ee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f003 ffaa 	bl	800874c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	7c1a      	ldrb	r2, [r3, #16]
 8004800:	f88d 2000 	strb.w	r2, [sp]
 8004804:	3304      	adds	r3, #4
 8004806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004808:	f003 ff46 	bl	8008698 <USB_CoreInit>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0d5      	b.n	80049ca <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f003 ffa2 	bl	800876e <USB_SetCurrentMode>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0c6      	b.n	80049ca <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800483c:	2300      	movs	r3, #0
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	e04a      	b.n	80048d8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	3315      	adds	r3, #21
 8004852:	2201      	movs	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004856:	7bfa      	ldrb	r2, [r7, #15]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	3314      	adds	r3, #20
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	b298      	uxth	r0, r3
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	332e      	adds	r3, #46	@ 0x2e
 800487e:	4602      	mov	r2, r0
 8004880:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3318      	adds	r3, #24
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004896:	7bfa      	ldrb	r2, [r7, #15]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	331c      	adds	r3, #28
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048aa:	7bfa      	ldrb	r2, [r7, #15]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	3320      	adds	r3, #32
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048be:	7bfa      	ldrb	r2, [r7, #15]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3324      	adds	r3, #36	@ 0x24
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	3301      	adds	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	791b      	ldrb	r3, [r3, #4]
 80048dc:	7bfa      	ldrb	r2, [r7, #15]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d3af      	bcc.n	8004842 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	e044      	b.n	8004972 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048fe:	7bfa      	ldrb	r2, [r7, #15]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004910:	7bfa      	ldrb	r2, [r7, #15]
 8004912:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004914:	7bfa      	ldrb	r2, [r7, #15]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	3301      	adds	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	791b      	ldrb	r3, [r3, #4]
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	429a      	cmp	r2, r3
 800497a:	d3b5      	bcc.n	80048e8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7c1a      	ldrb	r2, [r3, #16]
 8004984:	f88d 2000 	strb.w	r2, [sp]
 8004988:	3304      	adds	r3, #4
 800498a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800498c:	f003 ff3c 	bl	8008808 <USB_DevInit>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e013      	b.n	80049ca <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	7b1b      	ldrb	r3, [r3, #12]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d102      	bne.n	80049be <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f80b 	bl	80049d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f004 f8f7 	bl	8008bb6 <USB_DevDisconnect>

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a02:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	10000003 	.word	0x10000003

08004a1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a20:	4b05      	ldr	r3, [pc, #20]	@ (8004a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2a:	6013      	str	r3, [r2, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40007000 	.word	0x40007000

08004a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a44:	2300      	movs	r3, #0
 8004a46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e291      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8087 	beq.w	8004b6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a60:	4b96      	ldr	r3, [pc, #600]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d00c      	beq.n	8004a86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6c:	4b93      	ldr	r3, [pc, #588]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d112      	bne.n	8004a9e <HAL_RCC_OscConfig+0x62>
 8004a78:	4b90      	ldr	r3, [pc, #576]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a84:	d10b      	bne.n	8004a9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a86:	4b8d      	ldr	r3, [pc, #564]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d06c      	beq.n	8004b6c <HAL_RCC_OscConfig+0x130>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d168      	bne.n	8004b6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e26b      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x7a>
 8004aa8:	4b84      	ldr	r3, [pc, #528]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a83      	ldr	r2, [pc, #524]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e02e      	b.n	8004b14 <HAL_RCC_OscConfig+0xd8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x9c>
 8004abe:	4b7f      	ldr	r3, [pc, #508]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	4b7c      	ldr	r3, [pc, #496]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a7b      	ldr	r2, [pc, #492]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004ad0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e01d      	b.n	8004b14 <HAL_RCC_OscConfig+0xd8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0xc0>
 8004ae2:	4b76      	ldr	r3, [pc, #472]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a75      	ldr	r2, [pc, #468]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b73      	ldr	r3, [pc, #460]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a72      	ldr	r2, [pc, #456]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e00b      	b.n	8004b14 <HAL_RCC_OscConfig+0xd8>
 8004afc:	4b6f      	ldr	r3, [pc, #444]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a6e      	ldr	r2, [pc, #440]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	4b6c      	ldr	r3, [pc, #432]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a6b      	ldr	r2, [pc, #428]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d013      	beq.n	8004b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd fe0c 	bl	8002738 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b24:	f7fd fe08 	bl	8002738 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	@ 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e21f      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	4b61      	ldr	r3, [pc, #388]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0xe8>
 8004b42:	e014      	b.n	8004b6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd fdf8 	bl	8002738 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b4c:	f7fd fdf4 	bl	8002738 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b64      	cmp	r3, #100	@ 0x64
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e20b      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5e:	4b57      	ldr	r3, [pc, #348]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x110>
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d069      	beq.n	8004c4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b7a:	4b50      	ldr	r3, [pc, #320]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b86:	4b4d      	ldr	r3, [pc, #308]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d11c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x190>
 8004b92:	4b4a      	ldr	r3, [pc, #296]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d116      	bne.n	8004bcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9e:	4b47      	ldr	r3, [pc, #284]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x17a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e1df      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb6:	4b41      	ldr	r3, [pc, #260]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	493d      	ldr	r1, [pc, #244]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bca:	e040      	b.n	8004c4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd4:	4b39      	ldr	r3, [pc, #228]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a38      	ldr	r2, [pc, #224]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fd fdaa 	bl	8002738 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be8:	f7fd fda6 	bl	8002738 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1bd      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfa:	4b30      	ldr	r3, [pc, #192]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c06:	4b2d      	ldr	r3, [pc, #180]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4929      	ldr	r1, [pc, #164]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
 8004c1a:	e018      	b.n	8004c4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1c:	4b27      	ldr	r3, [pc, #156]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a26      	ldr	r2, [pc, #152]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fd fd86 	bl	8002738 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c30:	f7fd fd82 	bl	8002738 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e199      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	4b1e      	ldr	r3, [pc, #120]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d038      	beq.n	8004ccc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d019      	beq.n	8004c96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c62:	4b16      	ldr	r3, [pc, #88]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c66:	4a15      	ldr	r2, [pc, #84]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6e:	f7fd fd63 	bl	8002738 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c76:	f7fd fd5f 	bl	8002738 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e176      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c88:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCC_OscConfig+0x23a>
 8004c94:	e01a      	b.n	8004ccc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c96:	4b09      	ldr	r3, [pc, #36]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9a:	4a08      	ldr	r2, [pc, #32]	@ (8004cbc <HAL_RCC_OscConfig+0x280>)
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7fd fd49 	bl	8002738 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004caa:	f7fd fd45 	bl	8002738 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d903      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e15c      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
 8004cbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc0:	4b91      	ldr	r3, [pc, #580]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ee      	bne.n	8004caa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80a4 	beq.w	8004e22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cda:	4b8b      	ldr	r3, [pc, #556]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	4b88      	ldr	r3, [pc, #544]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cea:	4a87      	ldr	r2, [pc, #540]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf2:	4b85      	ldr	r3, [pc, #532]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d02:	4b82      	ldr	r3, [pc, #520]	@ (8004f0c <HAL_RCC_OscConfig+0x4d0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d118      	bne.n	8004d40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f0c <HAL_RCC_OscConfig+0x4d0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7e      	ldr	r2, [pc, #504]	@ (8004f0c <HAL_RCC_OscConfig+0x4d0>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1a:	f7fd fd0d 	bl	8002738 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d22:	f7fd fd09 	bl	8002738 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b64      	cmp	r3, #100	@ 0x64
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e120      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d34:	4b75      	ldr	r3, [pc, #468]	@ (8004f0c <HAL_RCC_OscConfig+0x4d0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d106      	bne.n	8004d56 <HAL_RCC_OscConfig+0x31a>
 8004d48:	4b6f      	ldr	r3, [pc, #444]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d54:	e02d      	b.n	8004db2 <HAL_RCC_OscConfig+0x376>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x33c>
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d62:	4a69      	ldr	r2, [pc, #420]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d6a:	4b67      	ldr	r3, [pc, #412]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	4a66      	ldr	r2, [pc, #408]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d70:	f023 0304 	bic.w	r3, r3, #4
 8004d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d76:	e01c      	b.n	8004db2 <HAL_RCC_OscConfig+0x376>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b05      	cmp	r3, #5
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCC_OscConfig+0x35e>
 8004d80:	4b61      	ldr	r3, [pc, #388]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d84:	4a60      	ldr	r2, [pc, #384]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d86:	f043 0304 	orr.w	r3, r3, #4
 8004d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d90:	4a5d      	ldr	r2, [pc, #372]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d98:	e00b      	b.n	8004db2 <HAL_RCC_OscConfig+0x376>
 8004d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da6:	4b58      	ldr	r3, [pc, #352]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004daa:	4a57      	ldr	r2, [pc, #348]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004dac:	f023 0304 	bic.w	r3, r3, #4
 8004db0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d015      	beq.n	8004de6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dba:	f7fd fcbd 	bl	8002738 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc2:	f7fd fcb9 	bl	8002738 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0ce      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ee      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x386>
 8004de4:	e014      	b.n	8004e10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fd fca7 	bl	8002738 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dec:	e00a      	b.n	8004e04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fd fca3 	bl	8002738 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e0b8      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e04:	4b40      	ldr	r3, [pc, #256]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ee      	bne.n	8004dee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4b3c      	ldr	r3, [pc, #240]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80a4 	beq.w	8004f74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e2c:	4b36      	ldr	r3, [pc, #216]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d06b      	beq.n	8004f10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d149      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e40:	4b31      	ldr	r3, [pc, #196]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a30      	ldr	r2, [pc, #192]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fc74 	bl	8002738 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd fc70 	bl	8002738 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e087      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e66:	4b28      	ldr	r3, [pc, #160]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69da      	ldr	r2, [r3, #28]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	019b      	lsls	r3, r3, #6
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	041b      	lsls	r3, r3, #16
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	4313      	orrs	r3, r2
 8004e98:	4a1b      	ldr	r2, [pc, #108]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004e9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea0:	4b19      	ldr	r3, [pc, #100]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a18      	ldr	r2, [pc, #96]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fd fc44 	bl	8002738 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd fc40 	bl	8002738 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e057      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	4b10      	ldr	r3, [pc, #64]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x478>
 8004ed2:	e04f      	b.n	8004f74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fd fc2a 	bl	8002738 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fd fc26 	bl	8002738 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e03d      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	4b03      	ldr	r3, [pc, #12]	@ (8004f08 <HAL_RCC_OscConfig+0x4cc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x4ac>
 8004f06:	e035      	b.n	8004f74 <HAL_RCC_OscConfig+0x538>
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f10:	4b1b      	ldr	r3, [pc, #108]	@ (8004f80 <HAL_RCC_OscConfig+0x544>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d028      	beq.n	8004f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d121      	bne.n	8004f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d11a      	bne.n	8004f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f40:	4013      	ands	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d111      	bne.n	8004f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40023800 	.word	0x40023800

08004f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0d0      	b.n	800513e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d910      	bls.n	8004fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b67      	ldr	r3, [pc, #412]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 020f 	bic.w	r2, r3, #15
 8004fb2:	4965      	ldr	r1, [pc, #404]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	4b63      	ldr	r3, [pc, #396]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0b8      	b.n	800513e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d020      	beq.n	800501a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe4:	4b59      	ldr	r3, [pc, #356]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4a58      	ldr	r2, [pc, #352]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ffc:	4b53      	ldr	r3, [pc, #332]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4a52      	ldr	r2, [pc, #328]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005002:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005006:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005008:	4b50      	ldr	r3, [pc, #320]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	494d      	ldr	r1, [pc, #308]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005016:	4313      	orrs	r3, r2
 8005018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d040      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d107      	bne.n	800503e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502e:	4b47      	ldr	r3, [pc, #284]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d115      	bne.n	8005066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e07f      	b.n	800513e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d107      	bne.n	8005056 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005046:	4b41      	ldr	r3, [pc, #260]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e073      	b.n	800513e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005056:	4b3d      	ldr	r3, [pc, #244]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e06b      	b.n	800513e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005066:	4b39      	ldr	r3, [pc, #228]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f023 0203 	bic.w	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4936      	ldr	r1, [pc, #216]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	4313      	orrs	r3, r2
 8005076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005078:	f7fd fb5e 	bl	8002738 <HAL_GetTick>
 800507c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507e:	e00a      	b.n	8005096 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005080:	f7fd fb5a 	bl	8002738 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e053      	b.n	800513e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	4b2d      	ldr	r3, [pc, #180]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 020c 	and.w	r2, r3, #12
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d1eb      	bne.n	8005080 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050a8:	4b27      	ldr	r3, [pc, #156]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d210      	bcs.n	80050d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b6:	4b24      	ldr	r3, [pc, #144]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f023 020f 	bic.w	r2, r3, #15
 80050be:	4922      	ldr	r1, [pc, #136]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c6:	4b20      	ldr	r3, [pc, #128]	@ (8005148 <HAL_RCC_ClockConfig+0x1c4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e032      	b.n	800513e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e4:	4b19      	ldr	r3, [pc, #100]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4916      	ldr	r1, [pc, #88]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005102:	4b12      	ldr	r3, [pc, #72]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	490e      	ldr	r1, [pc, #56]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 8005112:	4313      	orrs	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005116:	f000 f821 	bl	800515c <HAL_RCC_GetSysClockFreq>
 800511a:	4602      	mov	r2, r0
 800511c:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <HAL_RCC_ClockConfig+0x1c8>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	490a      	ldr	r1, [pc, #40]	@ (8005150 <HAL_RCC_ClockConfig+0x1cc>)
 8005128:	5ccb      	ldrb	r3, [r1, r3]
 800512a:	fa22 f303 	lsr.w	r3, r2, r3
 800512e:	4a09      	ldr	r2, [pc, #36]	@ (8005154 <HAL_RCC_ClockConfig+0x1d0>)
 8005130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005132:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <HAL_RCC_ClockConfig+0x1d4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fd faba 	bl	80026b0 <HAL_InitTick>

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40023c00 	.word	0x40023c00
 800514c:	40023800 	.word	0x40023800
 8005150:	0800d3d0 	.word	0x0800d3d0
 8005154:	20000010 	.word	0x20000010
 8005158:	20000014 	.word	0x20000014

0800515c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800515c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005160:	b094      	sub	sp, #80	@ 0x50
 8005162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	647b      	str	r3, [r7, #68]	@ 0x44
 8005168:	2300      	movs	r3, #0
 800516a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800516c:	2300      	movs	r3, #0
 800516e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005174:	4b79      	ldr	r3, [pc, #484]	@ (800535c <HAL_RCC_GetSysClockFreq+0x200>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 030c 	and.w	r3, r3, #12
 800517c:	2b08      	cmp	r3, #8
 800517e:	d00d      	beq.n	800519c <HAL_RCC_GetSysClockFreq+0x40>
 8005180:	2b08      	cmp	r3, #8
 8005182:	f200 80e1 	bhi.w	8005348 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_RCC_GetSysClockFreq+0x34>
 800518a:	2b04      	cmp	r3, #4
 800518c:	d003      	beq.n	8005196 <HAL_RCC_GetSysClockFreq+0x3a>
 800518e:	e0db      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005190:	4b73      	ldr	r3, [pc, #460]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x204>)
 8005192:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005194:	e0db      	b.n	800534e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005196:	4b73      	ldr	r3, [pc, #460]	@ (8005364 <HAL_RCC_GetSysClockFreq+0x208>)
 8005198:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800519a:	e0d8      	b.n	800534e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800519c:	4b6f      	ldr	r3, [pc, #444]	@ (800535c <HAL_RCC_GetSysClockFreq+0x200>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051a6:	4b6d      	ldr	r3, [pc, #436]	@ (800535c <HAL_RCC_GetSysClockFreq+0x200>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d063      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b2:	4b6a      	ldr	r3, [pc, #424]	@ (800535c <HAL_RCC_GetSysClockFreq+0x200>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	2200      	movs	r2, #0
 80051ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c6:	2300      	movs	r3, #0
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051ce:	4622      	mov	r2, r4
 80051d0:	462b      	mov	r3, r5
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	0159      	lsls	r1, r3, #5
 80051dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051e0:	0150      	lsls	r0, r2, #5
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4621      	mov	r1, r4
 80051e8:	1a51      	subs	r1, r2, r1
 80051ea:	6139      	str	r1, [r7, #16]
 80051ec:	4629      	mov	r1, r5
 80051ee:	eb63 0301 	sbc.w	r3, r3, r1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005200:	4659      	mov	r1, fp
 8005202:	018b      	lsls	r3, r1, #6
 8005204:	4651      	mov	r1, sl
 8005206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800520a:	4651      	mov	r1, sl
 800520c:	018a      	lsls	r2, r1, #6
 800520e:	4651      	mov	r1, sl
 8005210:	ebb2 0801 	subs.w	r8, r2, r1
 8005214:	4659      	mov	r1, fp
 8005216:	eb63 0901 	sbc.w	r9, r3, r1
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800522a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800522e:	4690      	mov	r8, r2
 8005230:	4699      	mov	r9, r3
 8005232:	4623      	mov	r3, r4
 8005234:	eb18 0303 	adds.w	r3, r8, r3
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	462b      	mov	r3, r5
 800523c:	eb49 0303 	adc.w	r3, r9, r3
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800524e:	4629      	mov	r1, r5
 8005250:	024b      	lsls	r3, r1, #9
 8005252:	4621      	mov	r1, r4
 8005254:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005258:	4621      	mov	r1, r4
 800525a:	024a      	lsls	r2, r1, #9
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005262:	2200      	movs	r2, #0
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800526c:	f7fb fd2c 	bl	8000cc8 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005278:	e058      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527a:	4b38      	ldr	r3, [pc, #224]	@ (800535c <HAL_RCC_GetSysClockFreq+0x200>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	099b      	lsrs	r3, r3, #6
 8005280:	2200      	movs	r2, #0
 8005282:	4618      	mov	r0, r3
 8005284:	4611      	mov	r1, r2
 8005286:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800528a:	623b      	str	r3, [r7, #32]
 800528c:	2300      	movs	r3, #0
 800528e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005294:	4642      	mov	r2, r8
 8005296:	464b      	mov	r3, r9
 8005298:	f04f 0000 	mov.w	r0, #0
 800529c:	f04f 0100 	mov.w	r1, #0
 80052a0:	0159      	lsls	r1, r3, #5
 80052a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a6:	0150      	lsls	r0, r2, #5
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4641      	mov	r1, r8
 80052ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80052b2:	4649      	mov	r1, r9
 80052b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052cc:	ebb2 040a 	subs.w	r4, r2, sl
 80052d0:	eb63 050b 	sbc.w	r5, r3, fp
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	00eb      	lsls	r3, r5, #3
 80052de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052e2:	00e2      	lsls	r2, r4, #3
 80052e4:	4614      	mov	r4, r2
 80052e6:	461d      	mov	r5, r3
 80052e8:	4643      	mov	r3, r8
 80052ea:	18e3      	adds	r3, r4, r3
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	464b      	mov	r3, r9
 80052f0:	eb45 0303 	adc.w	r3, r5, r3
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005302:	4629      	mov	r1, r5
 8005304:	028b      	lsls	r3, r1, #10
 8005306:	4621      	mov	r1, r4
 8005308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800530c:	4621      	mov	r1, r4
 800530e:	028a      	lsls	r2, r1, #10
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005316:	2200      	movs	r2, #0
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	61fa      	str	r2, [r7, #28]
 800531c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005320:	f7fb fcd2 	bl	8000cc8 <__aeabi_uldivmod>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4613      	mov	r3, r2
 800532a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800532c:	4b0b      	ldr	r3, [pc, #44]	@ (800535c <HAL_RCC_GetSysClockFreq+0x200>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	3301      	adds	r3, #1
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800533c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800533e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005346:	e002      	b.n	800534e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005348:	4b05      	ldr	r3, [pc, #20]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x204>)
 800534a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800534c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005350:	4618      	mov	r0, r3
 8005352:	3750      	adds	r7, #80	@ 0x50
 8005354:	46bd      	mov	sp, r7
 8005356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800535a:	bf00      	nop
 800535c:	40023800 	.word	0x40023800
 8005360:	00f42400 	.word	0x00f42400
 8005364:	007a1200 	.word	0x007a1200

08005368 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800536c:	4b03      	ldr	r3, [pc, #12]	@ (800537c <HAL_RCC_GetHCLKFreq+0x14>)
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000010 	.word	0x20000010

08005380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005384:	f7ff fff0 	bl	8005368 <HAL_RCC_GetHCLKFreq>
 8005388:	4602      	mov	r2, r0
 800538a:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	0a9b      	lsrs	r3, r3, #10
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	4903      	ldr	r1, [pc, #12]	@ (80053a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005396:	5ccb      	ldrb	r3, [r1, r3]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40023800 	.word	0x40023800
 80053a4:	0800d3e0 	.word	0x0800d3e0

080053a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053ac:	f7ff ffdc 	bl	8005368 <HAL_RCC_GetHCLKFreq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	0b5b      	lsrs	r3, r3, #13
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	4903      	ldr	r1, [pc, #12]	@ (80053cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053be:	5ccb      	ldrb	r3, [r1, r3]
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40023800 	.word	0x40023800
 80053cc:	0800d3e0 	.word	0x0800d3e0

080053d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053f8:	4b69      	ldr	r3, [pc, #420]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	4a68      	ldr	r2, [pc, #416]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005402:	6093      	str	r3, [r2, #8]
 8005404:	4b66      	ldr	r3, [pc, #408]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540c:	4964      	ldr	r1, [pc, #400]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800541a:	2301      	movs	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d017      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800542a:	4b5d      	ldr	r3, [pc, #372]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005430:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	4959      	ldr	r1, [pc, #356]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005448:	d101      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800544a:	2301      	movs	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005456:	2301      	movs	r3, #1
 8005458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d017      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005466:	4b4e      	ldr	r3, [pc, #312]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800546c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005474:	494a      	ldr	r1, [pc, #296]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005484:	d101      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005486:	2301      	movs	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 808b 	beq.w	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b4:	4b3a      	ldr	r3, [pc, #232]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b8:	4a39      	ldr	r2, [pc, #228]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054be:	6413      	str	r3, [r2, #64]	@ 0x40
 80054c0:	4b37      	ldr	r3, [pc, #220]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054cc:	4b35      	ldr	r3, [pc, #212]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a34      	ldr	r2, [pc, #208]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d8:	f7fd f92e 	bl	8002738 <HAL_GetTick>
 80054dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e0:	f7fd f92a 	bl	8002738 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b64      	cmp	r3, #100	@ 0x64
 80054ec:	d901      	bls.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e357      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054f2:	4b2c      	ldr	r3, [pc, #176]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0f0      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054fe:	4b28      	ldr	r3, [pc, #160]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005506:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d035      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	429a      	cmp	r2, r3
 800551a:	d02e      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800551c:	4b20      	ldr	r3, [pc, #128]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005524:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005526:	4b1e      	ldr	r3, [pc, #120]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552a:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005530:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005532:	4b1b      	ldr	r3, [pc, #108]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005536:	4a1a      	ldr	r2, [pc, #104]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800553e:	4a18      	ldr	r2, [pc, #96]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005544:	4b16      	ldr	r3, [pc, #88]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d114      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fd f8f2 	bl	8002738 <HAL_GetTick>
 8005554:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005556:	e00a      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005558:	f7fd f8ee 	bl	8002738 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e319      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556e:	4b0c      	ldr	r3, [pc, #48]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0ee      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005586:	d111      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005588:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005594:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005596:	400b      	ands	r3, r1
 8005598:	4901      	ldr	r1, [pc, #4]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
 800559e:	e00b      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40007000 	.word	0x40007000
 80055a8:	0ffffcff 	.word	0x0ffffcff
 80055ac:	4baa      	ldr	r3, [pc, #680]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4aa9      	ldr	r2, [pc, #676]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80055b6:	6093      	str	r3, [r2, #8]
 80055b8:	4ba7      	ldr	r3, [pc, #668]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	49a4      	ldr	r1, [pc, #656]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055d6:	4ba0      	ldr	r3, [pc, #640]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055dc:	4a9e      	ldr	r2, [pc, #632]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80055e6:	4b9c      	ldr	r3, [pc, #624]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	4999      	ldr	r1, [pc, #612]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005604:	4b94      	ldr	r3, [pc, #592]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005612:	4991      	ldr	r1, [pc, #580]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005626:	4b8c      	ldr	r3, [pc, #560]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005634:	4988      	ldr	r1, [pc, #544]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005648:	4b83      	ldr	r3, [pc, #524]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005656:	4980      	ldr	r1, [pc, #512]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800566a:	4b7b      	ldr	r3, [pc, #492]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005670:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005678:	4977      	ldr	r1, [pc, #476]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800568c:	4b72      	ldr	r3, [pc, #456]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005692:	f023 0203 	bic.w	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	496f      	ldr	r1, [pc, #444]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b4:	f023 020c 	bic.w	r2, r3, #12
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056bc:	4966      	ldr	r1, [pc, #408]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056d0:	4b61      	ldr	r3, [pc, #388]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056de:	495e      	ldr	r1, [pc, #376]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056f2:	4b59      	ldr	r3, [pc, #356]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005700:	4955      	ldr	r1, [pc, #340]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005714:	4b50      	ldr	r3, [pc, #320]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005722:	494d      	ldr	r1, [pc, #308]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005736:	4b48      	ldr	r3, [pc, #288]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005744:	4944      	ldr	r1, [pc, #272]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005758:	4b3f      	ldr	r3, [pc, #252]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005766:	493c      	ldr	r1, [pc, #240]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800577a:	4b37      	ldr	r3, [pc, #220]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005780:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005788:	4933      	ldr	r1, [pc, #204]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800579c:	4b2e      	ldr	r3, [pc, #184]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057aa:	492b      	ldr	r1, [pc, #172]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d011      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057be:	4b26      	ldr	r3, [pc, #152]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057cc:	4922      	ldr	r1, [pc, #136]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057dc:	d101      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057de:	2301      	movs	r3, #1
 80057e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057ee:	2301      	movs	r3, #1
 80057f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057fe:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005804:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580c:	4912      	ldr	r1, [pc, #72]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005820:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005826:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005830:	4909      	ldr	r1, [pc, #36]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d006      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80d9 	beq.w	80059fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800584c:	4b02      	ldr	r3, [pc, #8]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a01      	ldr	r2, [pc, #4]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005852:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005856:	e001      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005858:	40023800 	.word	0x40023800
 800585c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585e:	f7fc ff6b 	bl	8002738 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005866:	f7fc ff67 	bl	8002738 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b64      	cmp	r3, #100	@ 0x64
 8005872:	d901      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e194      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005878:	4b6c      	ldr	r3, [pc, #432]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1f0      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d021      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005894:	2b00      	cmp	r3, #0
 8005896:	d11d      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005898:	4b64      	ldr	r3, [pc, #400]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800589a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800589e:	0c1b      	lsrs	r3, r3, #16
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058a6:	4b61      	ldr	r3, [pc, #388]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ac:	0e1b      	lsrs	r3, r3, #24
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	019a      	lsls	r2, r3, #6
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	431a      	orrs	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	061b      	lsls	r3, r3, #24
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	071b      	lsls	r3, r3, #28
 80058cc:	4957      	ldr	r1, [pc, #348]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058e8:	d00a      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d02e      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058fe:	d129      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005900:	4b4a      	ldr	r3, [pc, #296]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005906:	0c1b      	lsrs	r3, r3, #16
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800590e:	4b47      	ldr	r3, [pc, #284]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005914:	0f1b      	lsrs	r3, r3, #28
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	019a      	lsls	r2, r3, #6
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	061b      	lsls	r3, r3, #24
 800592e:	431a      	orrs	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	071b      	lsls	r3, r3, #28
 8005934:	493d      	ldr	r1, [pc, #244]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800593c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800593e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005942:	f023 021f 	bic.w	r2, r3, #31
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	3b01      	subs	r3, #1
 800594c:	4937      	ldr	r1, [pc, #220]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01d      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005960:	4b32      	ldr	r3, [pc, #200]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005966:	0e1b      	lsrs	r3, r3, #24
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800596e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005974:	0f1b      	lsrs	r3, r3, #28
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	019a      	lsls	r2, r3, #6
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	431a      	orrs	r2, r3
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	431a      	orrs	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	071b      	lsls	r3, r3, #28
 8005994:	4925      	ldr	r1, [pc, #148]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d011      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	019a      	lsls	r2, r3, #6
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	061b      	lsls	r3, r3, #24
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	071b      	lsls	r3, r3, #28
 80059c4:	4919      	ldr	r1, [pc, #100]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059cc:	4b17      	ldr	r3, [pc, #92]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d8:	f7fc feae 	bl	8002738 <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059e0:	f7fc feaa 	bl	8002738 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	@ 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e0d7      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059f2:	4b0e      	ldr	r3, [pc, #56]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f040 80cd 	bne.w	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a06:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a08      	ldr	r2, [pc, #32]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a12:	f7fc fe91 	bl	8002738 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a18:	e00a      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a1a:	f7fc fe8d 	bl	8002738 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b64      	cmp	r3, #100	@ 0x64
 8005a26:	d903      	bls.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e0ba      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a30:	4b5e      	ldr	r3, [pc, #376]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a3c:	d0ed      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d02e      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d12a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a66:	4b51      	ldr	r3, [pc, #324]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a74:	4b4d      	ldr	r3, [pc, #308]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	0f1b      	lsrs	r3, r3, #28
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	019a      	lsls	r2, r3, #6
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	061b      	lsls	r3, r3, #24
 8005a94:	431a      	orrs	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	071b      	lsls	r3, r3, #28
 8005a9a:	4944      	ldr	r1, [pc, #272]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005aa2:	4b42      	ldr	r3, [pc, #264]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aa8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	493d      	ldr	r1, [pc, #244]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d022      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005acc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ad0:	d11d      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ad2:	4b36      	ldr	r3, [pc, #216]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad8:	0e1b      	lsrs	r3, r3, #24
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ae0:	4b32      	ldr	r3, [pc, #200]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae6:	0f1b      	lsrs	r3, r3, #28
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	019a      	lsls	r2, r3, #6
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	431a      	orrs	r2, r3
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	061b      	lsls	r3, r3, #24
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	071b      	lsls	r3, r3, #28
 8005b06:	4929      	ldr	r1, [pc, #164]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d028      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b1a:	4b24      	ldr	r3, [pc, #144]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b20:	0e1b      	lsrs	r3, r3, #24
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b28:	4b20      	ldr	r3, [pc, #128]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	0c1b      	lsrs	r3, r3, #16
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	019a      	lsls	r2, r3, #6
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	431a      	orrs	r2, r3
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	061b      	lsls	r3, r3, #24
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	071b      	lsls	r3, r3, #28
 8005b4e:	4917      	ldr	r1, [pc, #92]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b56:	4b15      	ldr	r3, [pc, #84]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	4911      	ldr	r1, [pc, #68]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0e      	ldr	r2, [pc, #56]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b78:	f7fc fdde 	bl	8002738 <HAL_GetTick>
 8005b7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b80:	f7fc fdda 	bl	8002738 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	@ 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e007      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b92:	4b06      	ldr	r3, [pc, #24]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b9e:	d1ef      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40023800 	.word	0x40023800

08005bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e049      	b.n	8005c56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fc fb24 	bl	8002224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f000 fdf2 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e054      	b.n	8005d22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a26      	ldr	r2, [pc, #152]	@ (8005d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d022      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a22      	ldr	r2, [pc, #136]	@ (8005d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a21      	ldr	r2, [pc, #132]	@ (8005d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d40 <HAL_TIM_Base_Start_IT+0xe0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <HAL_TIM_Base_Start_IT+0xe4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <HAL_TIM_Base_Start_IT+0xe8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d115      	bne.n	8005d0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	4b19      	ldr	r3, [pc, #100]	@ (8005d4c <HAL_TIM_Base_Start_IT+0xec>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d015      	beq.n	8005d1e <HAL_TIM_Base_Start_IT+0xbe>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d011      	beq.n	8005d1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	e008      	b.n	8005d1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e000      	b.n	8005d20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40001800 	.word	0x40001800
 8005d4c:	00010007 	.word	0x00010007

08005d50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e049      	b.n	8005df6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f841 	bl	8005dfe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f000 fd22 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e049      	b.n	8005eb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f841 	bl	8005ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f000 fcc1 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <HAL_TIM_PWM_Start+0x24>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	e03c      	b.n	8005f72 <HAL_TIM_PWM_Start+0x9e>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d109      	bne.n	8005f12 <HAL_TIM_PWM_Start+0x3e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	bf14      	ite	ne
 8005f0a:	2301      	movne	r3, #1
 8005f0c:	2300      	moveq	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	e02f      	b.n	8005f72 <HAL_TIM_PWM_Start+0x9e>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d109      	bne.n	8005f2c <HAL_TIM_PWM_Start+0x58>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	e022      	b.n	8005f72 <HAL_TIM_PWM_Start+0x9e>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	d109      	bne.n	8005f46 <HAL_TIM_PWM_Start+0x72>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	bf14      	ite	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	2300      	moveq	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	e015      	b.n	8005f72 <HAL_TIM_PWM_Start+0x9e>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d109      	bne.n	8005f60 <HAL_TIM_PWM_Start+0x8c>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e008      	b.n	8005f72 <HAL_TIM_PWM_Start+0x9e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e092      	b.n	80060a0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_PWM_Start+0xb6>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f88:	e023      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xfe>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d104      	bne.n	8005f9a <HAL_TIM_PWM_Start+0xc6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f98:	e01b      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xfe>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_PWM_Start+0xd6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fa8:	e013      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xfe>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_PWM_Start+0xe6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fb8:	e00b      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xfe>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Start+0xf6>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fc8:	e003      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xfe>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 ffa0 	bl	8006f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a30      	ldr	r2, [pc, #192]	@ (80060a8 <HAL_TIM_PWM_Start+0x1d4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_TIM_PWM_Start+0x120>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a2f      	ldr	r2, [pc, #188]	@ (80060ac <HAL_TIM_PWM_Start+0x1d8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIM_PWM_Start+0x124>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <HAL_TIM_PWM_Start+0x126>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800600c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a25      	ldr	r2, [pc, #148]	@ (80060a8 <HAL_TIM_PWM_Start+0x1d4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d022      	beq.n	800605e <HAL_TIM_PWM_Start+0x18a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006020:	d01d      	beq.n	800605e <HAL_TIM_PWM_Start+0x18a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a22      	ldr	r2, [pc, #136]	@ (80060b0 <HAL_TIM_PWM_Start+0x1dc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d018      	beq.n	800605e <HAL_TIM_PWM_Start+0x18a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a20      	ldr	r2, [pc, #128]	@ (80060b4 <HAL_TIM_PWM_Start+0x1e0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <HAL_TIM_PWM_Start+0x18a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <HAL_TIM_PWM_Start+0x1e4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00e      	beq.n	800605e <HAL_TIM_PWM_Start+0x18a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a19      	ldr	r2, [pc, #100]	@ (80060ac <HAL_TIM_PWM_Start+0x1d8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d009      	beq.n	800605e <HAL_TIM_PWM_Start+0x18a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1b      	ldr	r2, [pc, #108]	@ (80060bc <HAL_TIM_PWM_Start+0x1e8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d004      	beq.n	800605e <HAL_TIM_PWM_Start+0x18a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a19      	ldr	r2, [pc, #100]	@ (80060c0 <HAL_TIM_PWM_Start+0x1ec>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d115      	bne.n	800608a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	4b17      	ldr	r3, [pc, #92]	@ (80060c4 <HAL_TIM_PWM_Start+0x1f0>)
 8006066:	4013      	ands	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b06      	cmp	r3, #6
 800606e:	d015      	beq.n	800609c <HAL_TIM_PWM_Start+0x1c8>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006076:	d011      	beq.n	800609c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006088:	e008      	b.n	800609c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e000      	b.n	800609e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40010000 	.word	0x40010000
 80060ac:	40010400 	.word	0x40010400
 80060b0:	40000400 	.word	0x40000400
 80060b4:	40000800 	.word	0x40000800
 80060b8:	40000c00 	.word	0x40000c00
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40001800 	.word	0x40001800
 80060c4:	00010007 	.word	0x00010007

080060c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d020      	beq.n	800612c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01b      	beq.n	800612c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0202 	mvn.w	r2, #2
 80060fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fb42 	bl	800679c <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fb34 	bl	8006788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fb45 	bl	80067b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d020      	beq.n	8006178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01b      	beq.n	8006178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0204 	mvn.w	r2, #4
 8006148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2202      	movs	r2, #2
 800614e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fb1c 	bl	800679c <HAL_TIM_IC_CaptureCallback>
 8006164:	e005      	b.n	8006172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fb0e 	bl	8006788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fb1f 	bl	80067b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d020      	beq.n	80061c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01b      	beq.n	80061c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0208 	mvn.w	r2, #8
 8006194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2204      	movs	r2, #4
 800619a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 faf6 	bl	800679c <HAL_TIM_IC_CaptureCallback>
 80061b0:	e005      	b.n	80061be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fae8 	bl	8006788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 faf9 	bl	80067b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d020      	beq.n	8006210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01b      	beq.n	8006210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0210 	mvn.w	r2, #16
 80061e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2208      	movs	r2, #8
 80061e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fad0 	bl	800679c <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fac2 	bl	8006788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fad3 	bl	80067b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0201 	mvn.w	r2, #1
 800622c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fb fa60 	bl	80016f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00c      	beq.n	8006262 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800625a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 ff1d 	bl	800709c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00c      	beq.n	8006286 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800627e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 ff15 	bl	80070b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00c      	beq.n	80062aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa8d 	bl	80067c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00c      	beq.n	80062ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f06f 0220 	mvn.w	r2, #32
 80062c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fedd 	bl	8007088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e066      	b.n	80063c4 <HAL_TIM_OC_ConfigChannel+0xec>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b14      	cmp	r3, #20
 8006302:	d857      	bhi.n	80063b4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006361 	.word	0x08006361
 8006310:	080063b5 	.word	0x080063b5
 8006314:	080063b5 	.word	0x080063b5
 8006318:	080063b5 	.word	0x080063b5
 800631c:	0800636f 	.word	0x0800636f
 8006320:	080063b5 	.word	0x080063b5
 8006324:	080063b5 	.word	0x080063b5
 8006328:	080063b5 	.word	0x080063b5
 800632c:	0800637d 	.word	0x0800637d
 8006330:	080063b5 	.word	0x080063b5
 8006334:	080063b5 	.word	0x080063b5
 8006338:	080063b5 	.word	0x080063b5
 800633c:	0800638b 	.word	0x0800638b
 8006340:	080063b5 	.word	0x080063b5
 8006344:	080063b5 	.word	0x080063b5
 8006348:	080063b5 	.word	0x080063b5
 800634c:	08006399 	.word	0x08006399
 8006350:	080063b5 	.word	0x080063b5
 8006354:	080063b5 	.word	0x080063b5
 8006358:	080063b5 	.word	0x080063b5
 800635c:	080063a7 	.word	0x080063a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fae2 	bl	8006930 <TIM_OC1_SetConfig>
      break;
 800636c:	e025      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fb4d 	bl	8006a14 <TIM_OC2_SetConfig>
      break;
 800637a:	e01e      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fbbe 	bl	8006b04 <TIM_OC3_SetConfig>
      break;
 8006388:	e017      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fc2d 	bl	8006bf0 <TIM_OC4_SetConfig>
      break;
 8006396:	e010      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fc7e 	bl	8006ca0 <TIM_OC5_SetConfig>
      break;
 80063a4:	e009      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fcc9 	bl	8006d44 <TIM_OC6_SetConfig>
      break;
 80063b2:	e002      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
      break;
 80063b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0ff      	b.n	80065ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b14      	cmp	r3, #20
 80063f6:	f200 80f0 	bhi.w	80065da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006455 	.word	0x08006455
 8006404:	080065db 	.word	0x080065db
 8006408:	080065db 	.word	0x080065db
 800640c:	080065db 	.word	0x080065db
 8006410:	08006495 	.word	0x08006495
 8006414:	080065db 	.word	0x080065db
 8006418:	080065db 	.word	0x080065db
 800641c:	080065db 	.word	0x080065db
 8006420:	080064d7 	.word	0x080064d7
 8006424:	080065db 	.word	0x080065db
 8006428:	080065db 	.word	0x080065db
 800642c:	080065db 	.word	0x080065db
 8006430:	08006517 	.word	0x08006517
 8006434:	080065db 	.word	0x080065db
 8006438:	080065db 	.word	0x080065db
 800643c:	080065db 	.word	0x080065db
 8006440:	08006559 	.word	0x08006559
 8006444:	080065db 	.word	0x080065db
 8006448:	080065db 	.word	0x080065db
 800644c:	080065db 	.word	0x080065db
 8006450:	08006599 	.word	0x08006599
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fa68 	bl	8006930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0208 	orr.w	r2, r2, #8
 800646e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0204 	bic.w	r2, r2, #4
 800647e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6999      	ldr	r1, [r3, #24]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	619a      	str	r2, [r3, #24]
      break;
 8006492:	e0a5      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 faba 	bl	8006a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6999      	ldr	r1, [r3, #24]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	021a      	lsls	r2, r3, #8
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	619a      	str	r2, [r3, #24]
      break;
 80064d4:	e084      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fb11 	bl	8006b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0208 	orr.w	r2, r2, #8
 80064f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0204 	bic.w	r2, r2, #4
 8006500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69d9      	ldr	r1, [r3, #28]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	61da      	str	r2, [r3, #28]
      break;
 8006514:	e064      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fb67 	bl	8006bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69d9      	ldr	r1, [r3, #28]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	021a      	lsls	r2, r3, #8
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	61da      	str	r2, [r3, #28]
      break;
 8006556:	e043      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fb9e 	bl	8006ca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0208 	orr.w	r2, r2, #8
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0204 	bic.w	r2, r2, #4
 8006582:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006596:	e023      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fbd0 	bl	8006d44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	021a      	lsls	r2, r3, #8
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80065d8:	e002      	b.n	80065e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	75fb      	strb	r3, [r7, #23]
      break;
 80065de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop

080065f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_TIM_ConfigClockSource+0x1c>
 800660c:	2302      	movs	r3, #2
 800660e:	e0b4      	b.n	800677a <HAL_TIM_ConfigClockSource+0x186>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	4b56      	ldr	r3, [pc, #344]	@ (8006784 <HAL_TIM_ConfigClockSource+0x190>)
 800662c:	4013      	ands	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006648:	d03e      	beq.n	80066c8 <HAL_TIM_ConfigClockSource+0xd4>
 800664a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800664e:	f200 8087 	bhi.w	8006760 <HAL_TIM_ConfigClockSource+0x16c>
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006656:	f000 8086 	beq.w	8006766 <HAL_TIM_ConfigClockSource+0x172>
 800665a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800665e:	d87f      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b70      	cmp	r3, #112	@ 0x70
 8006662:	d01a      	beq.n	800669a <HAL_TIM_ConfigClockSource+0xa6>
 8006664:	2b70      	cmp	r3, #112	@ 0x70
 8006666:	d87b      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b60      	cmp	r3, #96	@ 0x60
 800666a:	d050      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x11a>
 800666c:	2b60      	cmp	r3, #96	@ 0x60
 800666e:	d877      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b50      	cmp	r3, #80	@ 0x50
 8006672:	d03c      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0xfa>
 8006674:	2b50      	cmp	r3, #80	@ 0x50
 8006676:	d873      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b40      	cmp	r3, #64	@ 0x40
 800667a:	d058      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x13a>
 800667c:	2b40      	cmp	r3, #64	@ 0x40
 800667e:	d86f      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b30      	cmp	r3, #48	@ 0x30
 8006682:	d064      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x15a>
 8006684:	2b30      	cmp	r3, #48	@ 0x30
 8006686:	d86b      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x16c>
 8006688:	2b20      	cmp	r3, #32
 800668a:	d060      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x15a>
 800668c:	2b20      	cmp	r3, #32
 800668e:	d867      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x16c>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d05c      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x15a>
 8006694:	2b10      	cmp	r3, #16
 8006696:	d05a      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x15a>
 8006698:	e062      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066aa:	f000 fc19 	bl	8006ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	609a      	str	r2, [r3, #8]
      break;
 80066c6:	e04f      	b.n	8006768 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066d8:	f000 fc02 	bl	8006ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ea:	609a      	str	r2, [r3, #8]
      break;
 80066ec:	e03c      	b.n	8006768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 fb76 	bl	8006dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2150      	movs	r1, #80	@ 0x50
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fbcf 	bl	8006eaa <TIM_ITRx_SetConfig>
      break;
 800670c:	e02c      	b.n	8006768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800671a:	461a      	mov	r2, r3
 800671c:	f000 fb95 	bl	8006e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2160      	movs	r1, #96	@ 0x60
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fbbf 	bl	8006eaa <TIM_ITRx_SetConfig>
      break;
 800672c:	e01c      	b.n	8006768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800673a:	461a      	mov	r2, r3
 800673c:	f000 fb56 	bl	8006dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2140      	movs	r1, #64	@ 0x40
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fbaf 	bl	8006eaa <TIM_ITRx_SetConfig>
      break;
 800674c:	e00c      	b.n	8006768 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f000 fba6 	bl	8006eaa <TIM_ITRx_SetConfig>
      break;
 800675e:	e003      	b.n	8006768 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]
      break;
 8006764:	e000      	b.n	8006768 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	fffeff88 	.word	0xfffeff88

08006788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a46      	ldr	r2, [pc, #280]	@ (8006904 <TIM_Base_SetConfig+0x12c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f6:	d00f      	beq.n	8006818 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a43      	ldr	r2, [pc, #268]	@ (8006908 <TIM_Base_SetConfig+0x130>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00b      	beq.n	8006818 <TIM_Base_SetConfig+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a42      	ldr	r2, [pc, #264]	@ (800690c <TIM_Base_SetConfig+0x134>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d007      	beq.n	8006818 <TIM_Base_SetConfig+0x40>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a41      	ldr	r2, [pc, #260]	@ (8006910 <TIM_Base_SetConfig+0x138>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_Base_SetConfig+0x40>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a40      	ldr	r2, [pc, #256]	@ (8006914 <TIM_Base_SetConfig+0x13c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d108      	bne.n	800682a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a35      	ldr	r2, [pc, #212]	@ (8006904 <TIM_Base_SetConfig+0x12c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d02b      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006838:	d027      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a32      	ldr	r2, [pc, #200]	@ (8006908 <TIM_Base_SetConfig+0x130>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d023      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a31      	ldr	r2, [pc, #196]	@ (800690c <TIM_Base_SetConfig+0x134>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d01f      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a30      	ldr	r2, [pc, #192]	@ (8006910 <TIM_Base_SetConfig+0x138>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01b      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2f      	ldr	r2, [pc, #188]	@ (8006914 <TIM_Base_SetConfig+0x13c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d017      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a2e      	ldr	r2, [pc, #184]	@ (8006918 <TIM_Base_SetConfig+0x140>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a2d      	ldr	r2, [pc, #180]	@ (800691c <TIM_Base_SetConfig+0x144>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00f      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a2c      	ldr	r2, [pc, #176]	@ (8006920 <TIM_Base_SetConfig+0x148>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00b      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a2b      	ldr	r2, [pc, #172]	@ (8006924 <TIM_Base_SetConfig+0x14c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d007      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a2a      	ldr	r2, [pc, #168]	@ (8006928 <TIM_Base_SetConfig+0x150>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d003      	beq.n	800688a <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a29      	ldr	r2, [pc, #164]	@ (800692c <TIM_Base_SetConfig+0x154>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d108      	bne.n	800689c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a10      	ldr	r2, [pc, #64]	@ (8006904 <TIM_Base_SetConfig+0x12c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_Base_SetConfig+0xf8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a12      	ldr	r2, [pc, #72]	@ (8006914 <TIM_Base_SetConfig+0x13c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d103      	bne.n	80068d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d105      	bne.n	80068f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f023 0201 	bic.w	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	611a      	str	r2, [r3, #16]
  }
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40010400 	.word	0x40010400
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400
 8006920:	40014800 	.word	0x40014800
 8006924:	40001800 	.word	0x40001800
 8006928:	40001c00 	.word	0x40001c00
 800692c:	40002000 	.word	0x40002000

08006930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f023 0201 	bic.w	r2, r3, #1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4b2b      	ldr	r3, [pc, #172]	@ (8006a08 <TIM_OC1_SetConfig+0xd8>)
 800695c:	4013      	ands	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f023 0302 	bic.w	r3, r3, #2
 8006978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a21      	ldr	r2, [pc, #132]	@ (8006a0c <TIM_OC1_SetConfig+0xdc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC1_SetConfig+0x64>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a20      	ldr	r2, [pc, #128]	@ (8006a10 <TIM_OC1_SetConfig+0xe0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10c      	bne.n	80069ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0308 	bic.w	r3, r3, #8
 800699a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 0304 	bic.w	r3, r3, #4
 80069ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <TIM_OC1_SetConfig+0xdc>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d003      	beq.n	80069be <TIM_OC1_SetConfig+0x8e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a15      	ldr	r2, [pc, #84]	@ (8006a10 <TIM_OC1_SetConfig+0xe0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d111      	bne.n	80069e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	621a      	str	r2, [r3, #32]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	fffeff8f 	.word	0xfffeff8f
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40010400 	.word	0x40010400

08006a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f023 0210 	bic.w	r2, r3, #16
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8006af8 <TIM_OC2_SetConfig+0xe4>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0320 	bic.w	r3, r3, #32
 8006a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a23      	ldr	r2, [pc, #140]	@ (8006afc <TIM_OC2_SetConfig+0xe8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <TIM_OC2_SetConfig+0x68>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a22      	ldr	r2, [pc, #136]	@ (8006b00 <TIM_OC2_SetConfig+0xec>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d10d      	bne.n	8006a98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a18      	ldr	r2, [pc, #96]	@ (8006afc <TIM_OC2_SetConfig+0xe8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_OC2_SetConfig+0x94>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a17      	ldr	r2, [pc, #92]	@ (8006b00 <TIM_OC2_SetConfig+0xec>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d113      	bne.n	8006ad0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	621a      	str	r2, [r3, #32]
}
 8006aea:	bf00      	nop
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	feff8fff 	.word	0xfeff8fff
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40010400 	.word	0x40010400

08006b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006be4 <TIM_OC3_SetConfig+0xe0>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a22      	ldr	r2, [pc, #136]	@ (8006be8 <TIM_OC3_SetConfig+0xe4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_OC3_SetConfig+0x66>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a21      	ldr	r2, [pc, #132]	@ (8006bec <TIM_OC3_SetConfig+0xe8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d10d      	bne.n	8006b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a17      	ldr	r2, [pc, #92]	@ (8006be8 <TIM_OC3_SetConfig+0xe4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_OC3_SetConfig+0x92>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a16      	ldr	r2, [pc, #88]	@ (8006bec <TIM_OC3_SetConfig+0xe8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d113      	bne.n	8006bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	fffeff8f 	.word	0xfffeff8f
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40010400 	.word	0x40010400

08006bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8006c94 <TIM_OC4_SetConfig+0xa4>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	031b      	lsls	r3, r3, #12
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a13      	ldr	r2, [pc, #76]	@ (8006c98 <TIM_OC4_SetConfig+0xa8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC4_SetConfig+0x68>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a12      	ldr	r2, [pc, #72]	@ (8006c9c <TIM_OC4_SetConfig+0xac>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d109      	bne.n	8006c6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	019b      	lsls	r3, r3, #6
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	feff8fff 	.word	0xfeff8fff
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40010400 	.word	0x40010400

08006ca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <TIM_OC5_SetConfig+0x98>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	041b      	lsls	r3, r3, #16
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a12      	ldr	r2, [pc, #72]	@ (8006d3c <TIM_OC5_SetConfig+0x9c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_OC5_SetConfig+0x5e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a11      	ldr	r2, [pc, #68]	@ (8006d40 <TIM_OC5_SetConfig+0xa0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d109      	bne.n	8006d12 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	621a      	str	r2, [r3, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	fffeff8f 	.word	0xfffeff8f
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400

08006d44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006de0 <TIM_OC6_SetConfig+0x9c>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	051b      	lsls	r3, r3, #20
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a13      	ldr	r2, [pc, #76]	@ (8006de4 <TIM_OC6_SetConfig+0xa0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC6_SetConfig+0x60>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a12      	ldr	r2, [pc, #72]	@ (8006de8 <TIM_OC6_SetConfig+0xa4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d109      	bne.n	8006db8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	029b      	lsls	r3, r3, #10
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	621a      	str	r2, [r3, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	feff8fff 	.word	0xfeff8fff
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40010400 	.word	0x40010400

08006dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 030a 	bic.w	r3, r3, #10
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b087      	sub	sp, #28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	f023 0210 	bic.w	r2, r3, #16
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	031b      	lsls	r3, r3, #12
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f043 0307 	orr.w	r3, r3, #7
 8006ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	609a      	str	r2, [r3, #8]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	021a      	lsls	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	609a      	str	r2, [r3, #8]
}
 8006f14:	bf00      	nop
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f003 031f 	and.w	r3, r3, #31
 8006f32:	2201      	movs	r2, #1
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1a      	ldr	r2, [r3, #32]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	43db      	mvns	r3, r3
 8006f42:	401a      	ands	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
	...

08006f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e06d      	b.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a30      	ldr	r2, [pc, #192]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d108      	bne.n	8006fca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a20      	ldr	r2, [pc, #128]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d022      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff6:	d01d      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d018      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1c      	ldr	r2, [pc, #112]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d013      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1a      	ldr	r2, [pc, #104]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d00e      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a15      	ldr	r2, [pc, #84]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d009      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a16      	ldr	r2, [pc, #88]	@ (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d004      	beq.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a15      	ldr	r2, [pc, #84]	@ (8007084 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d10c      	bne.n	800704e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800703a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	4313      	orrs	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	40010000 	.word	0x40010000
 8007070:	40010400 	.word	0x40010400
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40014000 	.word	0x40014000
 8007084:	40001800 	.word	0x40001800

08007088 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e040      	b.n	8007158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fb f99c 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2224      	movs	r2, #36	@ 0x24
 80070f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fe4c 	bl	8007da8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fbe5 	bl	80078e0 <UART_SetConfig>
 8007116:	4603      	mov	r3, r0
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e01b      	b.n	8007158 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800712e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800713e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fecb 	bl	8007eec <UART_CheckIdleState>
 8007156:	4603      	mov	r3, r0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	@ 0x28
 8007164:	af02      	add	r7, sp, #8
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	4613      	mov	r3, r2
 800716e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007174:	2b20      	cmp	r3, #32
 8007176:	d177      	bne.n	8007268 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <HAL_UART_Transmit+0x24>
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e070      	b.n	800726a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2221      	movs	r2, #33	@ 0x21
 8007194:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007196:	f7fb facf 	bl	8002738 <HAL_GetTick>
 800719a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b4:	d108      	bne.n	80071c8 <HAL_UART_Transmit+0x68>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e003      	b.n	80071d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071d0:	e02f      	b.n	8007232 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2200      	movs	r2, #0
 80071da:	2180      	movs	r1, #128	@ 0x80
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fedc 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e03b      	b.n	800726a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007206:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	3302      	adds	r3, #2
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	e007      	b.n	8007220 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	3301      	adds	r3, #1
 800721e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1c9      	bne.n	80071d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	2140      	movs	r1, #64	@ 0x40
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fea6 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2220      	movs	r2, #32
 8007258:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e005      	b.n	800726a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2220      	movs	r2, #32
 8007262:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	e000      	b.n	800726a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007268:	2302      	movs	r3, #2
  }
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b08a      	sub	sp, #40	@ 0x28
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	4613      	mov	r3, r2
 800727e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007286:	2b20      	cmp	r3, #32
 8007288:	d132      	bne.n	80072f0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <HAL_UART_Receive_IT+0x24>
 8007290:	88fb      	ldrh	r3, [r7, #6]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e02b      	b.n	80072f2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d018      	beq.n	80072e0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	613b      	str	r3, [r7, #16]
   return(result);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	69f9      	ldr	r1, [r7, #28]
 80072d2:	6a3a      	ldr	r2, [r7, #32]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	461a      	mov	r2, r3
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fec4 	bl	8008074 <UART_Start_Receive_IT>
 80072ec:	4603      	mov	r3, r0
 80072ee:	e000      	b.n	80072f2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80072f0:	2302      	movs	r3, #2
  }
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3728      	adds	r7, #40	@ 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b0ba      	sub	sp, #232	@ 0xe8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007322:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007326:	f640 030f 	movw	r3, #2063	@ 0x80f
 800732a:	4013      	ands	r3, r2
 800732c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d115      	bne.n	8007364 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00f      	beq.n	8007364 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d009      	beq.n	8007364 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8297 	beq.w	8007888 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
      }
      return;
 8007362:	e291      	b.n	8007888 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8117 	beq.w	800759c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800736e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800737a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800737e:	4b85      	ldr	r3, [pc, #532]	@ (8007594 <HAL_UART_IRQHandler+0x298>)
 8007380:	4013      	ands	r3, r2
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 810a 	beq.w	800759c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d011      	beq.n	80073b8 <HAL_UART_IRQHandler+0xbc>
 8007394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2201      	movs	r2, #1
 80073a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ae:	f043 0201 	orr.w	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d011      	beq.n	80073e8 <HAL_UART_IRQHandler+0xec>
 80073c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2202      	movs	r2, #2
 80073d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073de:	f043 0204 	orr.w	r2, r3, #4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d011      	beq.n	8007418 <HAL_UART_IRQHandler+0x11c>
 80073f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2204      	movs	r2, #4
 8007406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800740e:	f043 0202 	orr.w	r2, r3, #2
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d017      	beq.n	8007454 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d105      	bne.n	800743c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007434:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2208      	movs	r2, #8
 8007442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800744a:	f043 0208 	orr.w	r2, r3, #8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800745c:	2b00      	cmp	r3, #0
 800745e:	d012      	beq.n	8007486 <HAL_UART_IRQHandler+0x18a>
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007464:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00c      	beq.n	8007486 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800747c:	f043 0220 	orr.w	r2, r3, #32
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 81fd 	beq.w	800788c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00d      	beq.n	80074ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800749e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ce:	2b40      	cmp	r3, #64	@ 0x40
 80074d0:	d005      	beq.n	80074de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d04f      	beq.n	800757e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fe8e 	bl	8008200 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ee:	2b40      	cmp	r3, #64	@ 0x40
 80074f0:	d141      	bne.n	8007576 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800750c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3308      	adds	r3, #8
 800751a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800751e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800752a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1d9      	bne.n	80074f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007542:	2b00      	cmp	r3, #0
 8007544:	d013      	beq.n	800756e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754a:	4a13      	ldr	r2, [pc, #76]	@ (8007598 <HAL_UART_IRQHandler+0x29c>)
 800754c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007552:	4618      	mov	r0, r3
 8007554:	f7fc f882 	bl	800365c <HAL_DMA_Abort_IT>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d017      	beq.n	800758e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756c:	e00f      	b.n	800758e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f9a0 	bl	80078b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007574:	e00b      	b.n	800758e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f99c 	bl	80078b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	e007      	b.n	800758e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f998 	bl	80078b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800758c:	e17e      	b.n	800788c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800758e:	bf00      	nop
    return;
 8007590:	e17c      	b.n	800788c <HAL_UART_IRQHandler+0x590>
 8007592:	bf00      	nop
 8007594:	04000120 	.word	0x04000120
 8007598:	080082c9 	.word	0x080082c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	f040 814c 	bne.w	800783e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075aa:	f003 0310 	and.w	r3, r3, #16
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 8145 	beq.w	800783e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b8:	f003 0310 	and.w	r3, r3, #16
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 813e 	beq.w	800783e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2210      	movs	r2, #16
 80075c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b40      	cmp	r3, #64	@ 0x40
 80075d6:	f040 80b6 	bne.w	8007746 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8150 	beq.w	8007890 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075fa:	429a      	cmp	r2, r3
 80075fc:	f080 8148 	bcs.w	8007890 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007606:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007614:	f000 8086 	beq.w	8007724 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800762c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007646:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800764e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800765a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1da      	bne.n	8007618 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3308      	adds	r3, #8
 8007668:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007686:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800768a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800768e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e1      	bne.n	8007662 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3308      	adds	r3, #8
 80076a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3308      	adds	r3, #8
 80076be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e3      	bne.n	800769e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f4:	f023 0310 	bic.w	r3, r3, #16
 80076f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007706:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007708:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800770c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e4      	bne.n	80076e4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800771e:	4618      	mov	r0, r3
 8007720:	f7fb ff2c 	bl	800357c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007736:	b29b      	uxth	r3, r3
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	b29b      	uxth	r3, r3
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f8c2 	bl	80078c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007744:	e0a4      	b.n	8007890 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007752:	b29b      	uxth	r3, r3
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 8096 	beq.w	8007894 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 8091 	beq.w	8007894 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007794:	647b      	str	r3, [r7, #68]	@ 0x44
 8007796:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800779a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e4      	bne.n	8007772 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	623b      	str	r3, [r7, #32]
   return(result);
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	f023 0301 	bic.w	r3, r3, #1
 80077be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80077ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e3      	bne.n	80077a8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	60fb      	str	r3, [r7, #12]
   return(result);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f023 0310 	bic.w	r3, r3, #16
 8007808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	69b9      	ldr	r1, [r7, #24]
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	617b      	str	r3, [r7, #20]
   return(result);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e4      	bne.n	80077f4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f846 	bl	80078c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800783c:	e02a      	b.n	8007894 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00e      	beq.n	8007868 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800784a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800784e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007852:	2b00      	cmp	r3, #0
 8007854:	d008      	beq.n	8007868 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d01c      	beq.n	8007898 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
    }
    return;
 8007866:	e017      	b.n	8007898 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800786c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d012      	beq.n	800789a <HAL_UART_IRQHandler+0x59e>
 8007874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00c      	beq.n	800789a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fd37 	bl	80082f4 <UART_EndTransmit_IT>
    return;
 8007886:	e008      	b.n	800789a <HAL_UART_IRQHandler+0x59e>
      return;
 8007888:	bf00      	nop
 800788a:	e006      	b.n	800789a <HAL_UART_IRQHandler+0x59e>
    return;
 800788c:	bf00      	nop
 800788e:	e004      	b.n	800789a <HAL_UART_IRQHandler+0x59e>
      return;
 8007890:	bf00      	nop
 8007892:	e002      	b.n	800789a <HAL_UART_IRQHandler+0x59e>
      return;
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <HAL_UART_IRQHandler+0x59e>
    return;
 8007898:	bf00      	nop
  }

}
 800789a:	37e8      	adds	r7, #232	@ 0xe8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4ba6      	ldr	r3, [pc, #664]	@ (8007ba4 <UART_SetConfig+0x2c4>)
 800790c:	4013      	ands	r3, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6812      	ldr	r2, [r2, #0]
 8007912:	6979      	ldr	r1, [r7, #20]
 8007914:	430b      	orrs	r3, r1
 8007916:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	430a      	orrs	r2, r1
 8007950:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a94      	ldr	r2, [pc, #592]	@ (8007ba8 <UART_SetConfig+0x2c8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d120      	bne.n	800799e <UART_SetConfig+0xbe>
 800795c:	4b93      	ldr	r3, [pc, #588]	@ (8007bac <UART_SetConfig+0x2cc>)
 800795e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	2b03      	cmp	r3, #3
 8007968:	d816      	bhi.n	8007998 <UART_SetConfig+0xb8>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <UART_SetConfig+0x90>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007981 	.word	0x08007981
 8007974:	0800798d 	.word	0x0800798d
 8007978:	08007987 	.word	0x08007987
 800797c:	08007993 	.word	0x08007993
 8007980:	2301      	movs	r3, #1
 8007982:	77fb      	strb	r3, [r7, #31]
 8007984:	e150      	b.n	8007c28 <UART_SetConfig+0x348>
 8007986:	2302      	movs	r3, #2
 8007988:	77fb      	strb	r3, [r7, #31]
 800798a:	e14d      	b.n	8007c28 <UART_SetConfig+0x348>
 800798c:	2304      	movs	r3, #4
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e14a      	b.n	8007c28 <UART_SetConfig+0x348>
 8007992:	2308      	movs	r3, #8
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e147      	b.n	8007c28 <UART_SetConfig+0x348>
 8007998:	2310      	movs	r3, #16
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e144      	b.n	8007c28 <UART_SetConfig+0x348>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a83      	ldr	r2, [pc, #524]	@ (8007bb0 <UART_SetConfig+0x2d0>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d132      	bne.n	8007a0e <UART_SetConfig+0x12e>
 80079a8:	4b80      	ldr	r3, [pc, #512]	@ (8007bac <UART_SetConfig+0x2cc>)
 80079aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ae:	f003 030c 	and.w	r3, r3, #12
 80079b2:	2b0c      	cmp	r3, #12
 80079b4:	d828      	bhi.n	8007a08 <UART_SetConfig+0x128>
 80079b6:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <UART_SetConfig+0xdc>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079f1 	.word	0x080079f1
 80079c0:	08007a09 	.word	0x08007a09
 80079c4:	08007a09 	.word	0x08007a09
 80079c8:	08007a09 	.word	0x08007a09
 80079cc:	080079fd 	.word	0x080079fd
 80079d0:	08007a09 	.word	0x08007a09
 80079d4:	08007a09 	.word	0x08007a09
 80079d8:	08007a09 	.word	0x08007a09
 80079dc:	080079f7 	.word	0x080079f7
 80079e0:	08007a09 	.word	0x08007a09
 80079e4:	08007a09 	.word	0x08007a09
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	08007a03 	.word	0x08007a03
 80079f0:	2300      	movs	r3, #0
 80079f2:	77fb      	strb	r3, [r7, #31]
 80079f4:	e118      	b.n	8007c28 <UART_SetConfig+0x348>
 80079f6:	2302      	movs	r3, #2
 80079f8:	77fb      	strb	r3, [r7, #31]
 80079fa:	e115      	b.n	8007c28 <UART_SetConfig+0x348>
 80079fc:	2304      	movs	r3, #4
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	e112      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a02:	2308      	movs	r3, #8
 8007a04:	77fb      	strb	r3, [r7, #31]
 8007a06:	e10f      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a08:	2310      	movs	r3, #16
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e10c      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a68      	ldr	r2, [pc, #416]	@ (8007bb4 <UART_SetConfig+0x2d4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d120      	bne.n	8007a5a <UART_SetConfig+0x17a>
 8007a18:	4b64      	ldr	r3, [pc, #400]	@ (8007bac <UART_SetConfig+0x2cc>)
 8007a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a22:	2b30      	cmp	r3, #48	@ 0x30
 8007a24:	d013      	beq.n	8007a4e <UART_SetConfig+0x16e>
 8007a26:	2b30      	cmp	r3, #48	@ 0x30
 8007a28:	d814      	bhi.n	8007a54 <UART_SetConfig+0x174>
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	d009      	beq.n	8007a42 <UART_SetConfig+0x162>
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d810      	bhi.n	8007a54 <UART_SetConfig+0x174>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <UART_SetConfig+0x15c>
 8007a36:	2b10      	cmp	r3, #16
 8007a38:	d006      	beq.n	8007a48 <UART_SetConfig+0x168>
 8007a3a:	e00b      	b.n	8007a54 <UART_SetConfig+0x174>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	77fb      	strb	r3, [r7, #31]
 8007a40:	e0f2      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a42:	2302      	movs	r3, #2
 8007a44:	77fb      	strb	r3, [r7, #31]
 8007a46:	e0ef      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	e0ec      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a4e:	2308      	movs	r3, #8
 8007a50:	77fb      	strb	r3, [r7, #31]
 8007a52:	e0e9      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a54:	2310      	movs	r3, #16
 8007a56:	77fb      	strb	r3, [r7, #31]
 8007a58:	e0e6      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a56      	ldr	r2, [pc, #344]	@ (8007bb8 <UART_SetConfig+0x2d8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d120      	bne.n	8007aa6 <UART_SetConfig+0x1c6>
 8007a64:	4b51      	ldr	r3, [pc, #324]	@ (8007bac <UART_SetConfig+0x2cc>)
 8007a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a70:	d013      	beq.n	8007a9a <UART_SetConfig+0x1ba>
 8007a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a74:	d814      	bhi.n	8007aa0 <UART_SetConfig+0x1c0>
 8007a76:	2b80      	cmp	r3, #128	@ 0x80
 8007a78:	d009      	beq.n	8007a8e <UART_SetConfig+0x1ae>
 8007a7a:	2b80      	cmp	r3, #128	@ 0x80
 8007a7c:	d810      	bhi.n	8007aa0 <UART_SetConfig+0x1c0>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <UART_SetConfig+0x1a8>
 8007a82:	2b40      	cmp	r3, #64	@ 0x40
 8007a84:	d006      	beq.n	8007a94 <UART_SetConfig+0x1b4>
 8007a86:	e00b      	b.n	8007aa0 <UART_SetConfig+0x1c0>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	77fb      	strb	r3, [r7, #31]
 8007a8c:	e0cc      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	77fb      	strb	r3, [r7, #31]
 8007a92:	e0c9      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a94:	2304      	movs	r3, #4
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e0c6      	b.n	8007c28 <UART_SetConfig+0x348>
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e0c3      	b.n	8007c28 <UART_SetConfig+0x348>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e0c0      	b.n	8007c28 <UART_SetConfig+0x348>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a44      	ldr	r2, [pc, #272]	@ (8007bbc <UART_SetConfig+0x2dc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d125      	bne.n	8007afc <UART_SetConfig+0x21c>
 8007ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8007bac <UART_SetConfig+0x2cc>)
 8007ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007abe:	d017      	beq.n	8007af0 <UART_SetConfig+0x210>
 8007ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ac4:	d817      	bhi.n	8007af6 <UART_SetConfig+0x216>
 8007ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aca:	d00b      	beq.n	8007ae4 <UART_SetConfig+0x204>
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad0:	d811      	bhi.n	8007af6 <UART_SetConfig+0x216>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <UART_SetConfig+0x1fe>
 8007ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ada:	d006      	beq.n	8007aea <UART_SetConfig+0x20a>
 8007adc:	e00b      	b.n	8007af6 <UART_SetConfig+0x216>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	77fb      	strb	r3, [r7, #31]
 8007ae2:	e0a1      	b.n	8007c28 <UART_SetConfig+0x348>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	77fb      	strb	r3, [r7, #31]
 8007ae8:	e09e      	b.n	8007c28 <UART_SetConfig+0x348>
 8007aea:	2304      	movs	r3, #4
 8007aec:	77fb      	strb	r3, [r7, #31]
 8007aee:	e09b      	b.n	8007c28 <UART_SetConfig+0x348>
 8007af0:	2308      	movs	r3, #8
 8007af2:	77fb      	strb	r3, [r7, #31]
 8007af4:	e098      	b.n	8007c28 <UART_SetConfig+0x348>
 8007af6:	2310      	movs	r3, #16
 8007af8:	77fb      	strb	r3, [r7, #31]
 8007afa:	e095      	b.n	8007c28 <UART_SetConfig+0x348>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a2f      	ldr	r2, [pc, #188]	@ (8007bc0 <UART_SetConfig+0x2e0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d125      	bne.n	8007b52 <UART_SetConfig+0x272>
 8007b06:	4b29      	ldr	r3, [pc, #164]	@ (8007bac <UART_SetConfig+0x2cc>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b14:	d017      	beq.n	8007b46 <UART_SetConfig+0x266>
 8007b16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b1a:	d817      	bhi.n	8007b4c <UART_SetConfig+0x26c>
 8007b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b20:	d00b      	beq.n	8007b3a <UART_SetConfig+0x25a>
 8007b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b26:	d811      	bhi.n	8007b4c <UART_SetConfig+0x26c>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <UART_SetConfig+0x254>
 8007b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b30:	d006      	beq.n	8007b40 <UART_SetConfig+0x260>
 8007b32:	e00b      	b.n	8007b4c <UART_SetConfig+0x26c>
 8007b34:	2301      	movs	r3, #1
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	e076      	b.n	8007c28 <UART_SetConfig+0x348>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	77fb      	strb	r3, [r7, #31]
 8007b3e:	e073      	b.n	8007c28 <UART_SetConfig+0x348>
 8007b40:	2304      	movs	r3, #4
 8007b42:	77fb      	strb	r3, [r7, #31]
 8007b44:	e070      	b.n	8007c28 <UART_SetConfig+0x348>
 8007b46:	2308      	movs	r3, #8
 8007b48:	77fb      	strb	r3, [r7, #31]
 8007b4a:	e06d      	b.n	8007c28 <UART_SetConfig+0x348>
 8007b4c:	2310      	movs	r3, #16
 8007b4e:	77fb      	strb	r3, [r7, #31]
 8007b50:	e06a      	b.n	8007c28 <UART_SetConfig+0x348>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc4 <UART_SetConfig+0x2e4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d138      	bne.n	8007bce <UART_SetConfig+0x2ee>
 8007b5c:	4b13      	ldr	r3, [pc, #76]	@ (8007bac <UART_SetConfig+0x2cc>)
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b62:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007b66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b6a:	d017      	beq.n	8007b9c <UART_SetConfig+0x2bc>
 8007b6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b70:	d82a      	bhi.n	8007bc8 <UART_SetConfig+0x2e8>
 8007b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b76:	d00b      	beq.n	8007b90 <UART_SetConfig+0x2b0>
 8007b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b7c:	d824      	bhi.n	8007bc8 <UART_SetConfig+0x2e8>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <UART_SetConfig+0x2aa>
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b86:	d006      	beq.n	8007b96 <UART_SetConfig+0x2b6>
 8007b88:	e01e      	b.n	8007bc8 <UART_SetConfig+0x2e8>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	77fb      	strb	r3, [r7, #31]
 8007b8e:	e04b      	b.n	8007c28 <UART_SetConfig+0x348>
 8007b90:	2302      	movs	r3, #2
 8007b92:	77fb      	strb	r3, [r7, #31]
 8007b94:	e048      	b.n	8007c28 <UART_SetConfig+0x348>
 8007b96:	2304      	movs	r3, #4
 8007b98:	77fb      	strb	r3, [r7, #31]
 8007b9a:	e045      	b.n	8007c28 <UART_SetConfig+0x348>
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e042      	b.n	8007c28 <UART_SetConfig+0x348>
 8007ba2:	bf00      	nop
 8007ba4:	efff69f3 	.word	0xefff69f3
 8007ba8:	40011000 	.word	0x40011000
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	40004400 	.word	0x40004400
 8007bb4:	40004800 	.word	0x40004800
 8007bb8:	40004c00 	.word	0x40004c00
 8007bbc:	40005000 	.word	0x40005000
 8007bc0:	40011400 	.word	0x40011400
 8007bc4:	40007800 	.word	0x40007800
 8007bc8:	2310      	movs	r3, #16
 8007bca:	77fb      	strb	r3, [r7, #31]
 8007bcc:	e02c      	b.n	8007c28 <UART_SetConfig+0x348>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a72      	ldr	r2, [pc, #456]	@ (8007d9c <UART_SetConfig+0x4bc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d125      	bne.n	8007c24 <UART_SetConfig+0x344>
 8007bd8:	4b71      	ldr	r3, [pc, #452]	@ (8007da0 <UART_SetConfig+0x4c0>)
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bde:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007be2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007be6:	d017      	beq.n	8007c18 <UART_SetConfig+0x338>
 8007be8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007bec:	d817      	bhi.n	8007c1e <UART_SetConfig+0x33e>
 8007bee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf2:	d00b      	beq.n	8007c0c <UART_SetConfig+0x32c>
 8007bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf8:	d811      	bhi.n	8007c1e <UART_SetConfig+0x33e>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <UART_SetConfig+0x326>
 8007bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c02:	d006      	beq.n	8007c12 <UART_SetConfig+0x332>
 8007c04:	e00b      	b.n	8007c1e <UART_SetConfig+0x33e>
 8007c06:	2300      	movs	r3, #0
 8007c08:	77fb      	strb	r3, [r7, #31]
 8007c0a:	e00d      	b.n	8007c28 <UART_SetConfig+0x348>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	e00a      	b.n	8007c28 <UART_SetConfig+0x348>
 8007c12:	2304      	movs	r3, #4
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e007      	b.n	8007c28 <UART_SetConfig+0x348>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e004      	b.n	8007c28 <UART_SetConfig+0x348>
 8007c1e:	2310      	movs	r3, #16
 8007c20:	77fb      	strb	r3, [r7, #31]
 8007c22:	e001      	b.n	8007c28 <UART_SetConfig+0x348>
 8007c24:	2310      	movs	r3, #16
 8007c26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c30:	d15b      	bne.n	8007cea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007c32:	7ffb      	ldrb	r3, [r7, #31]
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d828      	bhi.n	8007c8a <UART_SetConfig+0x3aa>
 8007c38:	a201      	add	r2, pc, #4	@ (adr r2, 8007c40 <UART_SetConfig+0x360>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007c65 	.word	0x08007c65
 8007c44:	08007c6d 	.word	0x08007c6d
 8007c48:	08007c75 	.word	0x08007c75
 8007c4c:	08007c8b 	.word	0x08007c8b
 8007c50:	08007c7b 	.word	0x08007c7b
 8007c54:	08007c8b 	.word	0x08007c8b
 8007c58:	08007c8b 	.word	0x08007c8b
 8007c5c:	08007c8b 	.word	0x08007c8b
 8007c60:	08007c83 	.word	0x08007c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c64:	f7fd fb8c 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8007c68:	61b8      	str	r0, [r7, #24]
        break;
 8007c6a:	e013      	b.n	8007c94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c6c:	f7fd fb9c 	bl	80053a8 <HAL_RCC_GetPCLK2Freq>
 8007c70:	61b8      	str	r0, [r7, #24]
        break;
 8007c72:	e00f      	b.n	8007c94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c74:	4b4b      	ldr	r3, [pc, #300]	@ (8007da4 <UART_SetConfig+0x4c4>)
 8007c76:	61bb      	str	r3, [r7, #24]
        break;
 8007c78:	e00c      	b.n	8007c94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c7a:	f7fd fa6f 	bl	800515c <HAL_RCC_GetSysClockFreq>
 8007c7e:	61b8      	str	r0, [r7, #24]
        break;
 8007c80:	e008      	b.n	8007c94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c86:	61bb      	str	r3, [r7, #24]
        break;
 8007c88:	e004      	b.n	8007c94 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	77bb      	strb	r3, [r7, #30]
        break;
 8007c92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d074      	beq.n	8007d84 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	005a      	lsls	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	441a      	add	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b0f      	cmp	r3, #15
 8007cb4:	d916      	bls.n	8007ce4 <UART_SetConfig+0x404>
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cbc:	d212      	bcs.n	8007ce4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f023 030f 	bic.w	r3, r3, #15
 8007cc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	085b      	lsrs	r3, r3, #1
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	89fb      	ldrh	r3, [r7, #14]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	89fa      	ldrh	r2, [r7, #14]
 8007ce0:	60da      	str	r2, [r3, #12]
 8007ce2:	e04f      	b.n	8007d84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	77bb      	strb	r3, [r7, #30]
 8007ce8:	e04c      	b.n	8007d84 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cea:	7ffb      	ldrb	r3, [r7, #31]
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d828      	bhi.n	8007d42 <UART_SetConfig+0x462>
 8007cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf8 <UART_SetConfig+0x418>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d1d 	.word	0x08007d1d
 8007cfc:	08007d25 	.word	0x08007d25
 8007d00:	08007d2d 	.word	0x08007d2d
 8007d04:	08007d43 	.word	0x08007d43
 8007d08:	08007d33 	.word	0x08007d33
 8007d0c:	08007d43 	.word	0x08007d43
 8007d10:	08007d43 	.word	0x08007d43
 8007d14:	08007d43 	.word	0x08007d43
 8007d18:	08007d3b 	.word	0x08007d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d1c:	f7fd fb30 	bl	8005380 <HAL_RCC_GetPCLK1Freq>
 8007d20:	61b8      	str	r0, [r7, #24]
        break;
 8007d22:	e013      	b.n	8007d4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d24:	f7fd fb40 	bl	80053a8 <HAL_RCC_GetPCLK2Freq>
 8007d28:	61b8      	str	r0, [r7, #24]
        break;
 8007d2a:	e00f      	b.n	8007d4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007da4 <UART_SetConfig+0x4c4>)
 8007d2e:	61bb      	str	r3, [r7, #24]
        break;
 8007d30:	e00c      	b.n	8007d4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d32:	f7fd fa13 	bl	800515c <HAL_RCC_GetSysClockFreq>
 8007d36:	61b8      	str	r0, [r7, #24]
        break;
 8007d38:	e008      	b.n	8007d4c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d3e:	61bb      	str	r3, [r7, #24]
        break;
 8007d40:	e004      	b.n	8007d4c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	77bb      	strb	r3, [r7, #30]
        break;
 8007d4a:	bf00      	nop
    }

    if (pclk != 0U)
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d018      	beq.n	8007d84 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	085a      	lsrs	r2, r3, #1
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	441a      	add	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b0f      	cmp	r3, #15
 8007d6a:	d909      	bls.n	8007d80 <UART_SetConfig+0x4a0>
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d72:	d205      	bcs.n	8007d80 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60da      	str	r2, [r3, #12]
 8007d7e:	e001      	b.n	8007d84 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d90:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3720      	adds	r7, #32
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40007c00 	.word	0x40007c00
 8007da0:	40023800 	.word	0x40023800
 8007da4:	00f42400 	.word	0x00f42400

08007da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01a      	beq.n	8007ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ea6:	d10a      	bne.n	8007ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	605a      	str	r2, [r3, #4]
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	@ 0x30
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007efc:	f7fa fc1c 	bl	8002738 <HAL_GetTick>
 8007f00:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d12e      	bne.n	8007f6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f83b 	bl	8007f9a <UART_WaitOnFlagUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d021      	beq.n	8007f6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f3e:	623b      	str	r3, [r7, #32]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	61fb      	str	r3, [r7, #28]
 8007f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	69b9      	ldr	r1, [r7, #24]
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	617b      	str	r3, [r7, #20]
   return(result);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e6      	bne.n	8007f2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e011      	b.n	8007f92 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3728      	adds	r7, #40	@ 0x28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007faa:	e04f      	b.n	800804c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d04b      	beq.n	800804c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb4:	f7fa fbc0 	bl	8002738 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d302      	bcc.n	8007fca <UART_WaitOnFlagUntilTimeout+0x30>
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e04e      	b.n	800806c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d037      	beq.n	800804c <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b80      	cmp	r3, #128	@ 0x80
 8007fe0:	d034      	beq.n	800804c <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b40      	cmp	r3, #64	@ 0x40
 8007fe6:	d031      	beq.n	800804c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d110      	bne.n	8008018 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 f8fe 	bl	8008200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2208      	movs	r2, #8
 8008008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e029      	b.n	800806c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008022:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008026:	d111      	bne.n	800804c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008030:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f8e4 	bl	8008200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e00f      	b.n	800806c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69da      	ldr	r2, [r3, #28]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4013      	ands	r3, r2
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	429a      	cmp	r2, r3
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	429a      	cmp	r2, r3
 8008068:	d0a0      	beq.n	8007fac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008074:	b480      	push	{r7}
 8008076:	b097      	sub	sp, #92	@ 0x5c
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	88fa      	ldrh	r2, [r7, #6]
 800808c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	88fa      	ldrh	r2, [r7, #6]
 8008094:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a6:	d10e      	bne.n	80080c6 <UART_Start_Receive_IT+0x52>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d105      	bne.n	80080bc <UART_Start_Receive_IT+0x48>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80080b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80080ba:	e02d      	b.n	8008118 <UART_Start_Receive_IT+0xa4>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	22ff      	movs	r2, #255	@ 0xff
 80080c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80080c4:	e028      	b.n	8008118 <UART_Start_Receive_IT+0xa4>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10d      	bne.n	80080ea <UART_Start_Receive_IT+0x76>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d104      	bne.n	80080e0 <UART_Start_Receive_IT+0x6c>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	22ff      	movs	r2, #255	@ 0xff
 80080da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80080de:	e01b      	b.n	8008118 <UART_Start_Receive_IT+0xa4>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	227f      	movs	r2, #127	@ 0x7f
 80080e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80080e8:	e016      	b.n	8008118 <UART_Start_Receive_IT+0xa4>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080f2:	d10d      	bne.n	8008110 <UART_Start_Receive_IT+0x9c>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <UART_Start_Receive_IT+0x92>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	227f      	movs	r2, #127	@ 0x7f
 8008100:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008104:	e008      	b.n	8008118 <UART_Start_Receive_IT+0xa4>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	223f      	movs	r2, #63	@ 0x3f
 800810a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800810e:	e003      	b.n	8008118 <UART_Start_Receive_IT+0xa4>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2222      	movs	r2, #34	@ 0x22
 8008124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3308      	adds	r3, #8
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	f043 0301 	orr.w	r3, r3, #1
 800813e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3308      	adds	r3, #8
 8008146:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008148:	64ba      	str	r2, [r7, #72]	@ 0x48
 800814a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800814e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e5      	bne.n	8008128 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008164:	d107      	bne.n	8008176 <UART_Start_Receive_IT+0x102>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d103      	bne.n	8008176 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4a21      	ldr	r2, [pc, #132]	@ (80081f8 <UART_Start_Receive_IT+0x184>)
 8008172:	669a      	str	r2, [r3, #104]	@ 0x68
 8008174:	e002      	b.n	800817c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a20      	ldr	r2, [pc, #128]	@ (80081fc <UART_Start_Receive_IT+0x188>)
 800817a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d019      	beq.n	80081b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80081a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80081b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e6      	bne.n	8008184 <UART_Start_Receive_IT+0x110>
 80081b6:	e018      	b.n	80081ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	613b      	str	r3, [r7, #16]
   return(result);
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f043 0320 	orr.w	r3, r3, #32
 80081cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081d6:	623b      	str	r3, [r7, #32]
 80081d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	69f9      	ldr	r1, [r7, #28]
 80081dc:	6a3a      	ldr	r2, [r7, #32]
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e6      	bne.n	80081b8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	375c      	adds	r7, #92	@ 0x5c
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	080084f1 	.word	0x080084f1
 80081fc:	08008349 	.word	0x08008349

08008200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008200:	b480      	push	{r7}
 8008202:	b095      	sub	sp, #84	@ 0x54
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800821c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008226:	643b      	str	r3, [r7, #64]	@ 0x40
 8008228:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800822c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	61fb      	str	r3, [r7, #28]
   return(result);
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800825a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800825c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008272:	2b01      	cmp	r3, #1
 8008274:	d118      	bne.n	80082a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	60bb      	str	r3, [r7, #8]
   return(result);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f023 0310 	bic.w	r3, r3, #16
 800828a:	647b      	str	r3, [r7, #68]	@ 0x44
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008294:	61bb      	str	r3, [r7, #24]
 8008296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6979      	ldr	r1, [r7, #20]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	613b      	str	r3, [r7, #16]
   return(result);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e6      	bne.n	8008276 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80082bc:	bf00      	nop
 80082be:	3754      	adds	r7, #84	@ 0x54
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fae4 	bl	80078b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	60bb      	str	r3, [r7, #8]
   return(result);
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	61bb      	str	r3, [r7, #24]
 800831c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6979      	ldr	r1, [r7, #20]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	613b      	str	r3, [r7, #16]
   return(result);
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e6      	bne.n	80082fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff fab0 	bl	80078a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008340:	bf00      	nop
 8008342:	3720      	adds	r7, #32
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b09c      	sub	sp, #112	@ 0x70
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008356:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008360:	2b22      	cmp	r3, #34	@ 0x22
 8008362:	f040 80b9 	bne.w	80084d8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008370:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008374:	b2d9      	uxtb	r1, r3
 8008376:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800837a:	b2da      	uxtb	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008380:	400a      	ands	r2, r1
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f040 809c 	bne.w	80084e8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e6      	bne.n	80083b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f4:	f023 0301 	bic.w	r3, r3, #1
 80083f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008402:	647a      	str	r2, [r7, #68]	@ 0x44
 8008404:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e5      	bne.n	80083e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d018      	beq.n	800846a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	623b      	str	r3, [r7, #32]
   return(result);
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800844c:	663b      	str	r3, [r7, #96]	@ 0x60
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008456:	633b      	str	r3, [r7, #48]	@ 0x30
 8008458:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800845c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e6      	bne.n	8008438 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800846e:	2b01      	cmp	r3, #1
 8008470:	d12e      	bne.n	80084d0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	60fb      	str	r3, [r7, #12]
   return(result);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f023 0310 	bic.w	r3, r3, #16
 800848c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008496:	61fb      	str	r3, [r7, #28]
 8008498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	69b9      	ldr	r1, [r7, #24]
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	617b      	str	r3, [r7, #20]
   return(result);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e6      	bne.n	8008478 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d103      	bne.n	80084c0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2210      	movs	r2, #16
 80084be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff f9fd 	bl	80078c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084ce:	e00b      	b.n	80084e8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7f9 f8d9 	bl	8001688 <HAL_UART_RxCpltCallback>
}
 80084d6:	e007      	b.n	80084e8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0208 	orr.w	r2, r2, #8
 80084e6:	619a      	str	r2, [r3, #24]
}
 80084e8:	bf00      	nop
 80084ea:	3770      	adds	r7, #112	@ 0x70
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b09c      	sub	sp, #112	@ 0x70
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008508:	2b22      	cmp	r3, #34	@ 0x22
 800850a:	f040 80b9 	bne.w	8008680 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800851e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008522:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008526:	4013      	ands	r3, r2
 8008528:	b29a      	uxth	r2, r3
 800852a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800852c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008532:	1c9a      	adds	r2, r3, #2
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800853e:	b29b      	uxth	r3, r3
 8008540:	3b01      	subs	r3, #1
 8008542:	b29a      	uxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	f040 809c 	bne.w	8008690 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800856c:	667b      	str	r3, [r7, #100]	@ 0x64
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008576:	657b      	str	r3, [r7, #84]	@ 0x54
 8008578:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800857c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e6      	bne.n	8008558 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	f023 0301 	bic.w	r3, r3, #1
 80085a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e5      	bne.n	800858a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d018      	beq.n	8008612 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008600:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e6      	bne.n	80085e0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008616:	2b01      	cmp	r3, #1
 8008618:	d12e      	bne.n	8008678 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	60bb      	str	r3, [r7, #8]
   return(result);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f023 0310 	bic.w	r3, r3, #16
 8008634:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800863e:	61bb      	str	r3, [r7, #24]
 8008640:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6979      	ldr	r1, [r7, #20]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	613b      	str	r3, [r7, #16]
   return(result);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e6      	bne.n	8008620 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	f003 0310 	and.w	r3, r3, #16
 800865c:	2b10      	cmp	r3, #16
 800865e:	d103      	bne.n	8008668 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2210      	movs	r2, #16
 8008666:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff f929 	bl	80078c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008676:	e00b      	b.n	8008690 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7f9 f805 	bl	8001688 <HAL_UART_RxCpltCallback>
}
 800867e:	e007      	b.n	8008690 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0208 	orr.w	r2, r2, #8
 800868e:	619a      	str	r2, [r3, #24]
}
 8008690:	bf00      	nop
 8008692:	3770      	adds	r7, #112	@ 0x70
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008698:	b084      	sub	sp, #16
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	f107 001c 	add.w	r0, r7, #28
 80086a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d121      	bne.n	80086f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	4b21      	ldr	r3, [pc, #132]	@ (8008748 <USB_CoreInit+0xb0>)
 80086c4:	4013      	ands	r3, r2
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d105      	bne.n	80086ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa92 	bl	8008c14 <USB_CoreReset>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]
 80086f4:	e010      	b.n	8008718 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa86 	bl	8008c14 <USB_CoreReset>
 8008708:	4603      	mov	r3, r0
 800870a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008710:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008718:	7fbb      	ldrb	r3, [r7, #30]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d10b      	bne.n	8008736 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f043 0206 	orr.w	r2, r3, #6
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f043 0220 	orr.w	r2, r3, #32
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008742:	b004      	add	sp, #16
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	ffbdffbf 	.word	0xffbdffbf

0800874c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f023 0201 	bic.w	r2, r3, #1
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d115      	bne.n	80087bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800879c:	200a      	movs	r0, #10
 800879e:	f7f9 ffd7 	bl	8002750 <HAL_Delay>
      ms += 10U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	330a      	adds	r3, #10
 80087a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fa25 	bl	8008bf8 <USB_GetMode>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d01e      	beq.n	80087f2 <USB_SetCurrentMode+0x84>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80087b8:	d9f0      	bls.n	800879c <USB_SetCurrentMode+0x2e>
 80087ba:	e01a      	b.n	80087f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d115      	bne.n	80087ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80087ce:	200a      	movs	r0, #10
 80087d0:	f7f9 ffbe 	bl	8002750 <HAL_Delay>
      ms += 10U;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	330a      	adds	r3, #10
 80087d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa0c 	bl	8008bf8 <USB_GetMode>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <USB_SetCurrentMode+0x84>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80087ea:	d9f0      	bls.n	80087ce <USB_SetCurrentMode+0x60>
 80087ec:	e001      	b.n	80087f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e005      	b.n	80087fe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80087f6:	d101      	bne.n	80087fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008808:	b084      	sub	sp, #16
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008822:	2300      	movs	r3, #0
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	e009      	b.n	800883c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3340      	adds	r3, #64	@ 0x40
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	2200      	movs	r2, #0
 8008834:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	3301      	adds	r3, #1
 800883a:	613b      	str	r3, [r7, #16]
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2b0e      	cmp	r3, #14
 8008840:	d9f2      	bls.n	8008828 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008842:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008846:	2b00      	cmp	r3, #0
 8008848:	d11c      	bne.n	8008884 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008858:	f043 0302 	orr.w	r3, r3, #2
 800885c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008862:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	e005      	b.n	8008890 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008888:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008896:	461a      	mov	r2, r3
 8008898:	2300      	movs	r3, #0
 800889a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800889c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10d      	bne.n	80088c0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80088a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d104      	bne.n	80088b6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80088ac:	2100      	movs	r1, #0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f968 	bl	8008b84 <USB_SetDevSpeed>
 80088b4:	e008      	b.n	80088c8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80088b6:	2101      	movs	r1, #1
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f963 	bl	8008b84 <USB_SetDevSpeed>
 80088be:	e003      	b.n	80088c8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80088c0:	2103      	movs	r1, #3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f95e 	bl	8008b84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088c8:	2110      	movs	r1, #16
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8fa 	bl	8008ac4 <USB_FlushTxFifo>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f924 	bl	8008b28 <USB_FlushRxFifo>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f0:	461a      	mov	r2, r3
 80088f2:	2300      	movs	r3, #0
 80088f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088fc:	461a      	mov	r2, r3
 80088fe:	2300      	movs	r3, #0
 8008900:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008908:	461a      	mov	r2, r3
 800890a:	2300      	movs	r3, #0
 800890c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	e043      	b.n	800899c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008926:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800892a:	d118      	bne.n	800895e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893e:	461a      	mov	r2, r3
 8008940:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	e013      	b.n	8008970 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008954:	461a      	mov	r2, r3
 8008956:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	e008      	b.n	8008970 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896a:	461a      	mov	r2, r3
 800896c:	2300      	movs	r3, #0
 800896e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897c:	461a      	mov	r2, r3
 800897e:	2300      	movs	r3, #0
 8008980:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800898e:	461a      	mov	r2, r3
 8008990:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008994:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	3301      	adds	r3, #1
 800899a:	613b      	str	r3, [r7, #16]
 800899c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80089a0:	461a      	mov	r2, r3
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d3b5      	bcc.n	8008914 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	e043      	b.n	8008a36 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089c4:	d118      	bne.n	80089f8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d8:	461a      	mov	r2, r3
 80089da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	e013      	b.n	8008a0a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ee:	461a      	mov	r2, r3
 80089f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	e008      	b.n	8008a0a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a04:	461a      	mov	r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a16:	461a      	mov	r2, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	3301      	adds	r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d3b5      	bcc.n	80089ae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008a62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d105      	bne.n	8008a78 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	f043 0210 	orr.w	r2, r3, #16
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699a      	ldr	r2, [r3, #24]
 8008a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8008abc <USB_DevInit+0x2b4>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f043 0208 	orr.w	r2, r3, #8
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d105      	bne.n	8008aac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699a      	ldr	r2, [r3, #24]
 8008aa4:	4b06      	ldr	r3, [pc, #24]	@ (8008ac0 <USB_DevInit+0x2b8>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ab8:	b004      	add	sp, #16
 8008aba:	4770      	bx	lr
 8008abc:	803c3800 	.word	0x803c3800
 8008ac0:	40000004 	.word	0x40000004

08008ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ade:	d901      	bls.n	8008ae4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e01b      	b.n	8008b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	daf2      	bge.n	8008ad2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	019b      	lsls	r3, r3, #6
 8008af4:	f043 0220 	orr.w	r2, r3, #32
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b08:	d901      	bls.n	8008b0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e006      	b.n	8008b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d0f0      	beq.n	8008afc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b40:	d901      	bls.n	8008b46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e018      	b.n	8008b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	daf2      	bge.n	8008b34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2210      	movs	r2, #16
 8008b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b64:	d901      	bls.n	8008b6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e006      	b.n	8008b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	2b10      	cmp	r3, #16
 8008b74:	d0f0      	beq.n	8008b58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bd0:	f023 0303 	bic.w	r3, r3, #3
 8008bd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008be4:	f043 0302 	orr.w	r3, r3, #2
 8008be8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	f003 0301 	and.w	r3, r3, #1
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3301      	adds	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c2c:	d901      	bls.n	8008c32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e01b      	b.n	8008c6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	daf2      	bge.n	8008c20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	f043 0201 	orr.w	r2, r3, #1
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c56:	d901      	bls.n	8008c5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e006      	b.n	8008c6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d0f0      	beq.n	8008c4a <USB_CoreReset+0x36>

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <_strtol_l.constprop.0>:
 8008c78:	2b24      	cmp	r3, #36	@ 0x24
 8008c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7e:	4686      	mov	lr, r0
 8008c80:	4690      	mov	r8, r2
 8008c82:	d801      	bhi.n	8008c88 <_strtol_l.constprop.0+0x10>
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d106      	bne.n	8008c96 <_strtol_l.constprop.0+0x1e>
 8008c88:	f001 f872 	bl	8009d70 <__errno>
 8008c8c:	2316      	movs	r3, #22
 8008c8e:	6003      	str	r3, [r0, #0]
 8008c90:	2000      	movs	r0, #0
 8008c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c96:	4834      	ldr	r0, [pc, #208]	@ (8008d68 <_strtol_l.constprop.0+0xf0>)
 8008c98:	460d      	mov	r5, r1
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ca0:	5d06      	ldrb	r6, [r0, r4]
 8008ca2:	f016 0608 	ands.w	r6, r6, #8
 8008ca6:	d1f8      	bne.n	8008c9a <_strtol_l.constprop.0+0x22>
 8008ca8:	2c2d      	cmp	r4, #45	@ 0x2d
 8008caa:	d12d      	bne.n	8008d08 <_strtol_l.constprop.0+0x90>
 8008cac:	782c      	ldrb	r4, [r5, #0]
 8008cae:	2601      	movs	r6, #1
 8008cb0:	1c95      	adds	r5, r2, #2
 8008cb2:	f033 0210 	bics.w	r2, r3, #16
 8008cb6:	d109      	bne.n	8008ccc <_strtol_l.constprop.0+0x54>
 8008cb8:	2c30      	cmp	r4, #48	@ 0x30
 8008cba:	d12a      	bne.n	8008d12 <_strtol_l.constprop.0+0x9a>
 8008cbc:	782a      	ldrb	r2, [r5, #0]
 8008cbe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cc2:	2a58      	cmp	r2, #88	@ 0x58
 8008cc4:	d125      	bne.n	8008d12 <_strtol_l.constprop.0+0x9a>
 8008cc6:	786c      	ldrb	r4, [r5, #1]
 8008cc8:	2310      	movs	r3, #16
 8008cca:	3502      	adds	r5, #2
 8008ccc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008cd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	fbbc f9f3 	udiv	r9, ip, r3
 8008cda:	4610      	mov	r0, r2
 8008cdc:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ce0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ce4:	2f09      	cmp	r7, #9
 8008ce6:	d81b      	bhi.n	8008d20 <_strtol_l.constprop.0+0xa8>
 8008ce8:	463c      	mov	r4, r7
 8008cea:	42a3      	cmp	r3, r4
 8008cec:	dd27      	ble.n	8008d3e <_strtol_l.constprop.0+0xc6>
 8008cee:	1c57      	adds	r7, r2, #1
 8008cf0:	d007      	beq.n	8008d02 <_strtol_l.constprop.0+0x8a>
 8008cf2:	4581      	cmp	r9, r0
 8008cf4:	d320      	bcc.n	8008d38 <_strtol_l.constprop.0+0xc0>
 8008cf6:	d101      	bne.n	8008cfc <_strtol_l.constprop.0+0x84>
 8008cf8:	45a2      	cmp	sl, r4
 8008cfa:	db1d      	blt.n	8008d38 <_strtol_l.constprop.0+0xc0>
 8008cfc:	fb00 4003 	mla	r0, r0, r3, r4
 8008d00:	2201      	movs	r2, #1
 8008d02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d06:	e7eb      	b.n	8008ce0 <_strtol_l.constprop.0+0x68>
 8008d08:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d0a:	bf04      	itt	eq
 8008d0c:	782c      	ldrbeq	r4, [r5, #0]
 8008d0e:	1c95      	addeq	r5, r2, #2
 8008d10:	e7cf      	b.n	8008cb2 <_strtol_l.constprop.0+0x3a>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1da      	bne.n	8008ccc <_strtol_l.constprop.0+0x54>
 8008d16:	2c30      	cmp	r4, #48	@ 0x30
 8008d18:	bf0c      	ite	eq
 8008d1a:	2308      	moveq	r3, #8
 8008d1c:	230a      	movne	r3, #10
 8008d1e:	e7d5      	b.n	8008ccc <_strtol_l.constprop.0+0x54>
 8008d20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d24:	2f19      	cmp	r7, #25
 8008d26:	d801      	bhi.n	8008d2c <_strtol_l.constprop.0+0xb4>
 8008d28:	3c37      	subs	r4, #55	@ 0x37
 8008d2a:	e7de      	b.n	8008cea <_strtol_l.constprop.0+0x72>
 8008d2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d30:	2f19      	cmp	r7, #25
 8008d32:	d804      	bhi.n	8008d3e <_strtol_l.constprop.0+0xc6>
 8008d34:	3c57      	subs	r4, #87	@ 0x57
 8008d36:	e7d8      	b.n	8008cea <_strtol_l.constprop.0+0x72>
 8008d38:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3c:	e7e1      	b.n	8008d02 <_strtol_l.constprop.0+0x8a>
 8008d3e:	1c53      	adds	r3, r2, #1
 8008d40:	d108      	bne.n	8008d54 <_strtol_l.constprop.0+0xdc>
 8008d42:	2322      	movs	r3, #34	@ 0x22
 8008d44:	f8ce 3000 	str.w	r3, [lr]
 8008d48:	4660      	mov	r0, ip
 8008d4a:	f1b8 0f00 	cmp.w	r8, #0
 8008d4e:	d0a0      	beq.n	8008c92 <_strtol_l.constprop.0+0x1a>
 8008d50:	1e69      	subs	r1, r5, #1
 8008d52:	e006      	b.n	8008d62 <_strtol_l.constprop.0+0xea>
 8008d54:	b106      	cbz	r6, 8008d58 <_strtol_l.constprop.0+0xe0>
 8008d56:	4240      	negs	r0, r0
 8008d58:	f1b8 0f00 	cmp.w	r8, #0
 8008d5c:	d099      	beq.n	8008c92 <_strtol_l.constprop.0+0x1a>
 8008d5e:	2a00      	cmp	r2, #0
 8008d60:	d1f6      	bne.n	8008d50 <_strtol_l.constprop.0+0xd8>
 8008d62:	f8c8 1000 	str.w	r1, [r8]
 8008d66:	e794      	b.n	8008c92 <_strtol_l.constprop.0+0x1a>
 8008d68:	0800d3f1 	.word	0x0800d3f1

08008d6c <_strtol_r>:
 8008d6c:	f7ff bf84 	b.w	8008c78 <_strtol_l.constprop.0>

08008d70 <strtol>:
 8008d70:	4613      	mov	r3, r2
 8008d72:	460a      	mov	r2, r1
 8008d74:	4601      	mov	r1, r0
 8008d76:	4802      	ldr	r0, [pc, #8]	@ (8008d80 <strtol+0x10>)
 8008d78:	6800      	ldr	r0, [r0, #0]
 8008d7a:	f7ff bf7d 	b.w	8008c78 <_strtol_l.constprop.0>
 8008d7e:	bf00      	nop
 8008d80:	20000028 	.word	0x20000028

08008d84 <__cvt>:
 8008d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d88:	ec57 6b10 	vmov	r6, r7, d0
 8008d8c:	2f00      	cmp	r7, #0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	4619      	mov	r1, r3
 8008d92:	463b      	mov	r3, r7
 8008d94:	bfbb      	ittet	lt
 8008d96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008d9a:	461f      	movlt	r7, r3
 8008d9c:	2300      	movge	r3, #0
 8008d9e:	232d      	movlt	r3, #45	@ 0x2d
 8008da0:	700b      	strb	r3, [r1, #0]
 8008da2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008da4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008da8:	4691      	mov	r9, r2
 8008daa:	f023 0820 	bic.w	r8, r3, #32
 8008dae:	bfbc      	itt	lt
 8008db0:	4632      	movlt	r2, r6
 8008db2:	4616      	movlt	r6, r2
 8008db4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008db8:	d005      	beq.n	8008dc6 <__cvt+0x42>
 8008dba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008dbe:	d100      	bne.n	8008dc2 <__cvt+0x3e>
 8008dc0:	3401      	adds	r4, #1
 8008dc2:	2102      	movs	r1, #2
 8008dc4:	e000      	b.n	8008dc8 <__cvt+0x44>
 8008dc6:	2103      	movs	r1, #3
 8008dc8:	ab03      	add	r3, sp, #12
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	ab02      	add	r3, sp, #8
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	ec47 6b10 	vmov	d0, r6, r7
 8008dd4:	4653      	mov	r3, sl
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	f001 f886 	bl	8009ee8 <_dtoa_r>
 8008ddc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008de0:	4605      	mov	r5, r0
 8008de2:	d119      	bne.n	8008e18 <__cvt+0x94>
 8008de4:	f019 0f01 	tst.w	r9, #1
 8008de8:	d00e      	beq.n	8008e08 <__cvt+0x84>
 8008dea:	eb00 0904 	add.w	r9, r0, r4
 8008dee:	2200      	movs	r2, #0
 8008df0:	2300      	movs	r3, #0
 8008df2:	4630      	mov	r0, r6
 8008df4:	4639      	mov	r1, r7
 8008df6:	f7f7 fe87 	bl	8000b08 <__aeabi_dcmpeq>
 8008dfa:	b108      	cbz	r0, 8008e00 <__cvt+0x7c>
 8008dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e00:	2230      	movs	r2, #48	@ 0x30
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	454b      	cmp	r3, r9
 8008e06:	d31e      	bcc.n	8008e46 <__cvt+0xc2>
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e0c:	1b5b      	subs	r3, r3, r5
 8008e0e:	4628      	mov	r0, r5
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	b004      	add	sp, #16
 8008e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e1c:	eb00 0904 	add.w	r9, r0, r4
 8008e20:	d1e5      	bne.n	8008dee <__cvt+0x6a>
 8008e22:	7803      	ldrb	r3, [r0, #0]
 8008e24:	2b30      	cmp	r3, #48	@ 0x30
 8008e26:	d10a      	bne.n	8008e3e <__cvt+0xba>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	f7f7 fe6a 	bl	8000b08 <__aeabi_dcmpeq>
 8008e34:	b918      	cbnz	r0, 8008e3e <__cvt+0xba>
 8008e36:	f1c4 0401 	rsb	r4, r4, #1
 8008e3a:	f8ca 4000 	str.w	r4, [sl]
 8008e3e:	f8da 3000 	ldr.w	r3, [sl]
 8008e42:	4499      	add	r9, r3
 8008e44:	e7d3      	b.n	8008dee <__cvt+0x6a>
 8008e46:	1c59      	adds	r1, r3, #1
 8008e48:	9103      	str	r1, [sp, #12]
 8008e4a:	701a      	strb	r2, [r3, #0]
 8008e4c:	e7d9      	b.n	8008e02 <__cvt+0x7e>

08008e4e <__exponent>:
 8008e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e50:	2900      	cmp	r1, #0
 8008e52:	bfba      	itte	lt
 8008e54:	4249      	neglt	r1, r1
 8008e56:	232d      	movlt	r3, #45	@ 0x2d
 8008e58:	232b      	movge	r3, #43	@ 0x2b
 8008e5a:	2909      	cmp	r1, #9
 8008e5c:	7002      	strb	r2, [r0, #0]
 8008e5e:	7043      	strb	r3, [r0, #1]
 8008e60:	dd29      	ble.n	8008eb6 <__exponent+0x68>
 8008e62:	f10d 0307 	add.w	r3, sp, #7
 8008e66:	461d      	mov	r5, r3
 8008e68:	270a      	movs	r7, #10
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008e70:	fb07 1416 	mls	r4, r7, r6, r1
 8008e74:	3430      	adds	r4, #48	@ 0x30
 8008e76:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	2c63      	cmp	r4, #99	@ 0x63
 8008e7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e82:	4631      	mov	r1, r6
 8008e84:	dcf1      	bgt.n	8008e6a <__exponent+0x1c>
 8008e86:	3130      	adds	r1, #48	@ 0x30
 8008e88:	1e94      	subs	r4, r2, #2
 8008e8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e8e:	1c41      	adds	r1, r0, #1
 8008e90:	4623      	mov	r3, r4
 8008e92:	42ab      	cmp	r3, r5
 8008e94:	d30a      	bcc.n	8008eac <__exponent+0x5e>
 8008e96:	f10d 0309 	add.w	r3, sp, #9
 8008e9a:	1a9b      	subs	r3, r3, r2
 8008e9c:	42ac      	cmp	r4, r5
 8008e9e:	bf88      	it	hi
 8008ea0:	2300      	movhi	r3, #0
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	4403      	add	r3, r0
 8008ea6:	1a18      	subs	r0, r3, r0
 8008ea8:	b003      	add	sp, #12
 8008eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eac:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008eb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008eb4:	e7ed      	b.n	8008e92 <__exponent+0x44>
 8008eb6:	2330      	movs	r3, #48	@ 0x30
 8008eb8:	3130      	adds	r1, #48	@ 0x30
 8008eba:	7083      	strb	r3, [r0, #2]
 8008ebc:	70c1      	strb	r1, [r0, #3]
 8008ebe:	1d03      	adds	r3, r0, #4
 8008ec0:	e7f1      	b.n	8008ea6 <__exponent+0x58>
	...

08008ec4 <_printf_float>:
 8008ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	b08d      	sub	sp, #52	@ 0x34
 8008eca:	460c      	mov	r4, r1
 8008ecc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ed0:	4616      	mov	r6, r2
 8008ed2:	461f      	mov	r7, r3
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	f000 ff01 	bl	8009cdc <_localeconv_r>
 8008eda:	6803      	ldr	r3, [r0, #0]
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f7 f9e6 	bl	80002b0 <strlen>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8008eec:	9005      	str	r0, [sp, #20]
 8008eee:	3307      	adds	r3, #7
 8008ef0:	f023 0307 	bic.w	r3, r3, #7
 8008ef4:	f103 0208 	add.w	r2, r3, #8
 8008ef8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008efc:	f8d4 b000 	ldr.w	fp, [r4]
 8008f00:	f8c8 2000 	str.w	r2, [r8]
 8008f04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f0c:	9307      	str	r3, [sp, #28]
 8008f0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f1a:	4b9c      	ldr	r3, [pc, #624]	@ (800918c <_printf_float+0x2c8>)
 8008f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f20:	f7f7 fe24 	bl	8000b6c <__aeabi_dcmpun>
 8008f24:	bb70      	cbnz	r0, 8008f84 <_printf_float+0xc0>
 8008f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f2a:	4b98      	ldr	r3, [pc, #608]	@ (800918c <_printf_float+0x2c8>)
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	f7f7 fdfe 	bl	8000b30 <__aeabi_dcmple>
 8008f34:	bb30      	cbnz	r0, 8008f84 <_printf_float+0xc0>
 8008f36:	2200      	movs	r2, #0
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	f7f7 fded 	bl	8000b1c <__aeabi_dcmplt>
 8008f42:	b110      	cbz	r0, 8008f4a <_printf_float+0x86>
 8008f44:	232d      	movs	r3, #45	@ 0x2d
 8008f46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f4a:	4a91      	ldr	r2, [pc, #580]	@ (8009190 <_printf_float+0x2cc>)
 8008f4c:	4b91      	ldr	r3, [pc, #580]	@ (8009194 <_printf_float+0x2d0>)
 8008f4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f52:	bf94      	ite	ls
 8008f54:	4690      	movls	r8, r2
 8008f56:	4698      	movhi	r8, r3
 8008f58:	2303      	movs	r3, #3
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	f02b 0304 	bic.w	r3, fp, #4
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	f04f 0900 	mov.w	r9, #0
 8008f66:	9700      	str	r7, [sp, #0]
 8008f68:	4633      	mov	r3, r6
 8008f6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f000 f9d2 	bl	8009318 <_printf_common>
 8008f74:	3001      	adds	r0, #1
 8008f76:	f040 808d 	bne.w	8009094 <_printf_float+0x1d0>
 8008f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7e:	b00d      	add	sp, #52	@ 0x34
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	4642      	mov	r2, r8
 8008f86:	464b      	mov	r3, r9
 8008f88:	4640      	mov	r0, r8
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	f7f7 fdee 	bl	8000b6c <__aeabi_dcmpun>
 8008f90:	b140      	cbz	r0, 8008fa4 <_printf_float+0xe0>
 8008f92:	464b      	mov	r3, r9
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfbc      	itt	lt
 8008f98:	232d      	movlt	r3, #45	@ 0x2d
 8008f9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8009198 <_printf_float+0x2d4>)
 8008fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800919c <_printf_float+0x2d8>)
 8008fa2:	e7d4      	b.n	8008f4e <_printf_float+0x8a>
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008faa:	9206      	str	r2, [sp, #24]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	d13b      	bne.n	8009028 <_printf_float+0x164>
 8008fb0:	2306      	movs	r3, #6
 8008fb2:	6063      	str	r3, [r4, #4]
 8008fb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008fb8:	2300      	movs	r3, #0
 8008fba:	6022      	str	r2, [r4, #0]
 8008fbc:	9303      	str	r3, [sp, #12]
 8008fbe:	ab0a      	add	r3, sp, #40	@ 0x28
 8008fc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008fc4:	ab09      	add	r3, sp, #36	@ 0x24
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	6861      	ldr	r1, [r4, #4]
 8008fca:	ec49 8b10 	vmov	d0, r8, r9
 8008fce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f7ff fed6 	bl	8008d84 <__cvt>
 8008fd8:	9b06      	ldr	r3, [sp, #24]
 8008fda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fdc:	2b47      	cmp	r3, #71	@ 0x47
 8008fde:	4680      	mov	r8, r0
 8008fe0:	d129      	bne.n	8009036 <_printf_float+0x172>
 8008fe2:	1cc8      	adds	r0, r1, #3
 8008fe4:	db02      	blt.n	8008fec <_printf_float+0x128>
 8008fe6:	6863      	ldr	r3, [r4, #4]
 8008fe8:	4299      	cmp	r1, r3
 8008fea:	dd41      	ble.n	8009070 <_printf_float+0x1ac>
 8008fec:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ff0:	fa5f fa8a 	uxtb.w	sl, sl
 8008ff4:	3901      	subs	r1, #1
 8008ff6:	4652      	mov	r2, sl
 8008ff8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ffc:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ffe:	f7ff ff26 	bl	8008e4e <__exponent>
 8009002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009004:	1813      	adds	r3, r2, r0
 8009006:	2a01      	cmp	r2, #1
 8009008:	4681      	mov	r9, r0
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	dc02      	bgt.n	8009014 <_printf_float+0x150>
 800900e:	6822      	ldr	r2, [r4, #0]
 8009010:	07d2      	lsls	r2, r2, #31
 8009012:	d501      	bpl.n	8009018 <_printf_float+0x154>
 8009014:	3301      	adds	r3, #1
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0a2      	beq.n	8008f66 <_printf_float+0xa2>
 8009020:	232d      	movs	r3, #45	@ 0x2d
 8009022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009026:	e79e      	b.n	8008f66 <_printf_float+0xa2>
 8009028:	9a06      	ldr	r2, [sp, #24]
 800902a:	2a47      	cmp	r2, #71	@ 0x47
 800902c:	d1c2      	bne.n	8008fb4 <_printf_float+0xf0>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1c0      	bne.n	8008fb4 <_printf_float+0xf0>
 8009032:	2301      	movs	r3, #1
 8009034:	e7bd      	b.n	8008fb2 <_printf_float+0xee>
 8009036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800903a:	d9db      	bls.n	8008ff4 <_printf_float+0x130>
 800903c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009040:	d118      	bne.n	8009074 <_printf_float+0x1b0>
 8009042:	2900      	cmp	r1, #0
 8009044:	6863      	ldr	r3, [r4, #4]
 8009046:	dd0b      	ble.n	8009060 <_printf_float+0x19c>
 8009048:	6121      	str	r1, [r4, #16]
 800904a:	b913      	cbnz	r3, 8009052 <_printf_float+0x18e>
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	07d0      	lsls	r0, r2, #31
 8009050:	d502      	bpl.n	8009058 <_printf_float+0x194>
 8009052:	3301      	adds	r3, #1
 8009054:	440b      	add	r3, r1
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	65a1      	str	r1, [r4, #88]	@ 0x58
 800905a:	f04f 0900 	mov.w	r9, #0
 800905e:	e7db      	b.n	8009018 <_printf_float+0x154>
 8009060:	b913      	cbnz	r3, 8009068 <_printf_float+0x1a4>
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	07d2      	lsls	r2, r2, #31
 8009066:	d501      	bpl.n	800906c <_printf_float+0x1a8>
 8009068:	3302      	adds	r3, #2
 800906a:	e7f4      	b.n	8009056 <_printf_float+0x192>
 800906c:	2301      	movs	r3, #1
 800906e:	e7f2      	b.n	8009056 <_printf_float+0x192>
 8009070:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009076:	4299      	cmp	r1, r3
 8009078:	db05      	blt.n	8009086 <_printf_float+0x1c2>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	6121      	str	r1, [r4, #16]
 800907e:	07d8      	lsls	r0, r3, #31
 8009080:	d5ea      	bpl.n	8009058 <_printf_float+0x194>
 8009082:	1c4b      	adds	r3, r1, #1
 8009084:	e7e7      	b.n	8009056 <_printf_float+0x192>
 8009086:	2900      	cmp	r1, #0
 8009088:	bfd4      	ite	le
 800908a:	f1c1 0202 	rsble	r2, r1, #2
 800908e:	2201      	movgt	r2, #1
 8009090:	4413      	add	r3, r2
 8009092:	e7e0      	b.n	8009056 <_printf_float+0x192>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	055a      	lsls	r2, r3, #21
 8009098:	d407      	bmi.n	80090aa <_printf_float+0x1e6>
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	4642      	mov	r2, r8
 800909e:	4631      	mov	r1, r6
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b8      	blx	r7
 80090a4:	3001      	adds	r0, #1
 80090a6:	d12b      	bne.n	8009100 <_printf_float+0x23c>
 80090a8:	e767      	b.n	8008f7a <_printf_float+0xb6>
 80090aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80090ae:	f240 80dd 	bls.w	800926c <_printf_float+0x3a8>
 80090b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090b6:	2200      	movs	r2, #0
 80090b8:	2300      	movs	r3, #0
 80090ba:	f7f7 fd25 	bl	8000b08 <__aeabi_dcmpeq>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d033      	beq.n	800912a <_printf_float+0x266>
 80090c2:	4a37      	ldr	r2, [pc, #220]	@ (80091a0 <_printf_float+0x2dc>)
 80090c4:	2301      	movs	r3, #1
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	47b8      	blx	r7
 80090cc:	3001      	adds	r0, #1
 80090ce:	f43f af54 	beq.w	8008f7a <_printf_float+0xb6>
 80090d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80090d6:	4543      	cmp	r3, r8
 80090d8:	db02      	blt.n	80090e0 <_printf_float+0x21c>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	07d8      	lsls	r0, r3, #31
 80090de:	d50f      	bpl.n	8009100 <_printf_float+0x23c>
 80090e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	f43f af45 	beq.w	8008f7a <_printf_float+0xb6>
 80090f0:	f04f 0900 	mov.w	r9, #0
 80090f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80090f8:	f104 0a1a 	add.w	sl, r4, #26
 80090fc:	45c8      	cmp	r8, r9
 80090fe:	dc09      	bgt.n	8009114 <_printf_float+0x250>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	079b      	lsls	r3, r3, #30
 8009104:	f100 8103 	bmi.w	800930e <_printf_float+0x44a>
 8009108:	68e0      	ldr	r0, [r4, #12]
 800910a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800910c:	4298      	cmp	r0, r3
 800910e:	bfb8      	it	lt
 8009110:	4618      	movlt	r0, r3
 8009112:	e734      	b.n	8008f7e <_printf_float+0xba>
 8009114:	2301      	movs	r3, #1
 8009116:	4652      	mov	r2, sl
 8009118:	4631      	mov	r1, r6
 800911a:	4628      	mov	r0, r5
 800911c:	47b8      	blx	r7
 800911e:	3001      	adds	r0, #1
 8009120:	f43f af2b 	beq.w	8008f7a <_printf_float+0xb6>
 8009124:	f109 0901 	add.w	r9, r9, #1
 8009128:	e7e8      	b.n	80090fc <_printf_float+0x238>
 800912a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	dc39      	bgt.n	80091a4 <_printf_float+0x2e0>
 8009130:	4a1b      	ldr	r2, [pc, #108]	@ (80091a0 <_printf_float+0x2dc>)
 8009132:	2301      	movs	r3, #1
 8009134:	4631      	mov	r1, r6
 8009136:	4628      	mov	r0, r5
 8009138:	47b8      	blx	r7
 800913a:	3001      	adds	r0, #1
 800913c:	f43f af1d 	beq.w	8008f7a <_printf_float+0xb6>
 8009140:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009144:	ea59 0303 	orrs.w	r3, r9, r3
 8009148:	d102      	bne.n	8009150 <_printf_float+0x28c>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	07d9      	lsls	r1, r3, #31
 800914e:	d5d7      	bpl.n	8009100 <_printf_float+0x23c>
 8009150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009154:	4631      	mov	r1, r6
 8009156:	4628      	mov	r0, r5
 8009158:	47b8      	blx	r7
 800915a:	3001      	adds	r0, #1
 800915c:	f43f af0d 	beq.w	8008f7a <_printf_float+0xb6>
 8009160:	f04f 0a00 	mov.w	sl, #0
 8009164:	f104 0b1a 	add.w	fp, r4, #26
 8009168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916a:	425b      	negs	r3, r3
 800916c:	4553      	cmp	r3, sl
 800916e:	dc01      	bgt.n	8009174 <_printf_float+0x2b0>
 8009170:	464b      	mov	r3, r9
 8009172:	e793      	b.n	800909c <_printf_float+0x1d8>
 8009174:	2301      	movs	r3, #1
 8009176:	465a      	mov	r2, fp
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f aefb 	beq.w	8008f7a <_printf_float+0xb6>
 8009184:	f10a 0a01 	add.w	sl, sl, #1
 8009188:	e7ee      	b.n	8009168 <_printf_float+0x2a4>
 800918a:	bf00      	nop
 800918c:	7fefffff 	.word	0x7fefffff
 8009190:	0800d4f1 	.word	0x0800d4f1
 8009194:	0800d4f5 	.word	0x0800d4f5
 8009198:	0800d4f9 	.word	0x0800d4f9
 800919c:	0800d4fd 	.word	0x0800d4fd
 80091a0:	0800d501 	.word	0x0800d501
 80091a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091aa:	4553      	cmp	r3, sl
 80091ac:	bfa8      	it	ge
 80091ae:	4653      	movge	r3, sl
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	4699      	mov	r9, r3
 80091b4:	dc36      	bgt.n	8009224 <_printf_float+0x360>
 80091b6:	f04f 0b00 	mov.w	fp, #0
 80091ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091be:	f104 021a 	add.w	r2, r4, #26
 80091c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091c4:	9306      	str	r3, [sp, #24]
 80091c6:	eba3 0309 	sub.w	r3, r3, r9
 80091ca:	455b      	cmp	r3, fp
 80091cc:	dc31      	bgt.n	8009232 <_printf_float+0x36e>
 80091ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d0:	459a      	cmp	sl, r3
 80091d2:	dc3a      	bgt.n	800924a <_printf_float+0x386>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	07da      	lsls	r2, r3, #31
 80091d8:	d437      	bmi.n	800924a <_printf_float+0x386>
 80091da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091dc:	ebaa 0903 	sub.w	r9, sl, r3
 80091e0:	9b06      	ldr	r3, [sp, #24]
 80091e2:	ebaa 0303 	sub.w	r3, sl, r3
 80091e6:	4599      	cmp	r9, r3
 80091e8:	bfa8      	it	ge
 80091ea:	4699      	movge	r9, r3
 80091ec:	f1b9 0f00 	cmp.w	r9, #0
 80091f0:	dc33      	bgt.n	800925a <_printf_float+0x396>
 80091f2:	f04f 0800 	mov.w	r8, #0
 80091f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091fa:	f104 0b1a 	add.w	fp, r4, #26
 80091fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009200:	ebaa 0303 	sub.w	r3, sl, r3
 8009204:	eba3 0309 	sub.w	r3, r3, r9
 8009208:	4543      	cmp	r3, r8
 800920a:	f77f af79 	ble.w	8009100 <_printf_float+0x23c>
 800920e:	2301      	movs	r3, #1
 8009210:	465a      	mov	r2, fp
 8009212:	4631      	mov	r1, r6
 8009214:	4628      	mov	r0, r5
 8009216:	47b8      	blx	r7
 8009218:	3001      	adds	r0, #1
 800921a:	f43f aeae 	beq.w	8008f7a <_printf_float+0xb6>
 800921e:	f108 0801 	add.w	r8, r8, #1
 8009222:	e7ec      	b.n	80091fe <_printf_float+0x33a>
 8009224:	4642      	mov	r2, r8
 8009226:	4631      	mov	r1, r6
 8009228:	4628      	mov	r0, r5
 800922a:	47b8      	blx	r7
 800922c:	3001      	adds	r0, #1
 800922e:	d1c2      	bne.n	80091b6 <_printf_float+0x2f2>
 8009230:	e6a3      	b.n	8008f7a <_printf_float+0xb6>
 8009232:	2301      	movs	r3, #1
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	9206      	str	r2, [sp, #24]
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	f43f ae9c 	beq.w	8008f7a <_printf_float+0xb6>
 8009242:	9a06      	ldr	r2, [sp, #24]
 8009244:	f10b 0b01 	add.w	fp, fp, #1
 8009248:	e7bb      	b.n	80091c2 <_printf_float+0x2fe>
 800924a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	d1c0      	bne.n	80091da <_printf_float+0x316>
 8009258:	e68f      	b.n	8008f7a <_printf_float+0xb6>
 800925a:	9a06      	ldr	r2, [sp, #24]
 800925c:	464b      	mov	r3, r9
 800925e:	4442      	add	r2, r8
 8009260:	4631      	mov	r1, r6
 8009262:	4628      	mov	r0, r5
 8009264:	47b8      	blx	r7
 8009266:	3001      	adds	r0, #1
 8009268:	d1c3      	bne.n	80091f2 <_printf_float+0x32e>
 800926a:	e686      	b.n	8008f7a <_printf_float+0xb6>
 800926c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009270:	f1ba 0f01 	cmp.w	sl, #1
 8009274:	dc01      	bgt.n	800927a <_printf_float+0x3b6>
 8009276:	07db      	lsls	r3, r3, #31
 8009278:	d536      	bpl.n	80092e8 <_printf_float+0x424>
 800927a:	2301      	movs	r3, #1
 800927c:	4642      	mov	r2, r8
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	f43f ae78 	beq.w	8008f7a <_printf_float+0xb6>
 800928a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800928e:	4631      	mov	r1, r6
 8009290:	4628      	mov	r0, r5
 8009292:	47b8      	blx	r7
 8009294:	3001      	adds	r0, #1
 8009296:	f43f ae70 	beq.w	8008f7a <_printf_float+0xb6>
 800929a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092a6:	f7f7 fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 80092aa:	b9c0      	cbnz	r0, 80092de <_printf_float+0x41a>
 80092ac:	4653      	mov	r3, sl
 80092ae:	f108 0201 	add.w	r2, r8, #1
 80092b2:	4631      	mov	r1, r6
 80092b4:	4628      	mov	r0, r5
 80092b6:	47b8      	blx	r7
 80092b8:	3001      	adds	r0, #1
 80092ba:	d10c      	bne.n	80092d6 <_printf_float+0x412>
 80092bc:	e65d      	b.n	8008f7a <_printf_float+0xb6>
 80092be:	2301      	movs	r3, #1
 80092c0:	465a      	mov	r2, fp
 80092c2:	4631      	mov	r1, r6
 80092c4:	4628      	mov	r0, r5
 80092c6:	47b8      	blx	r7
 80092c8:	3001      	adds	r0, #1
 80092ca:	f43f ae56 	beq.w	8008f7a <_printf_float+0xb6>
 80092ce:	f108 0801 	add.w	r8, r8, #1
 80092d2:	45d0      	cmp	r8, sl
 80092d4:	dbf3      	blt.n	80092be <_printf_float+0x3fa>
 80092d6:	464b      	mov	r3, r9
 80092d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80092dc:	e6df      	b.n	800909e <_printf_float+0x1da>
 80092de:	f04f 0800 	mov.w	r8, #0
 80092e2:	f104 0b1a 	add.w	fp, r4, #26
 80092e6:	e7f4      	b.n	80092d2 <_printf_float+0x40e>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4642      	mov	r2, r8
 80092ec:	e7e1      	b.n	80092b2 <_printf_float+0x3ee>
 80092ee:	2301      	movs	r3, #1
 80092f0:	464a      	mov	r2, r9
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	f43f ae3e 	beq.w	8008f7a <_printf_float+0xb6>
 80092fe:	f108 0801 	add.w	r8, r8, #1
 8009302:	68e3      	ldr	r3, [r4, #12]
 8009304:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009306:	1a5b      	subs	r3, r3, r1
 8009308:	4543      	cmp	r3, r8
 800930a:	dcf0      	bgt.n	80092ee <_printf_float+0x42a>
 800930c:	e6fc      	b.n	8009108 <_printf_float+0x244>
 800930e:	f04f 0800 	mov.w	r8, #0
 8009312:	f104 0919 	add.w	r9, r4, #25
 8009316:	e7f4      	b.n	8009302 <_printf_float+0x43e>

08009318 <_printf_common>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	4616      	mov	r6, r2
 800931e:	4698      	mov	r8, r3
 8009320:	688a      	ldr	r2, [r1, #8]
 8009322:	690b      	ldr	r3, [r1, #16]
 8009324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009328:	4293      	cmp	r3, r2
 800932a:	bfb8      	it	lt
 800932c:	4613      	movlt	r3, r2
 800932e:	6033      	str	r3, [r6, #0]
 8009330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009334:	4607      	mov	r7, r0
 8009336:	460c      	mov	r4, r1
 8009338:	b10a      	cbz	r2, 800933e <_printf_common+0x26>
 800933a:	3301      	adds	r3, #1
 800933c:	6033      	str	r3, [r6, #0]
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	0699      	lsls	r1, r3, #26
 8009342:	bf42      	ittt	mi
 8009344:	6833      	ldrmi	r3, [r6, #0]
 8009346:	3302      	addmi	r3, #2
 8009348:	6033      	strmi	r3, [r6, #0]
 800934a:	6825      	ldr	r5, [r4, #0]
 800934c:	f015 0506 	ands.w	r5, r5, #6
 8009350:	d106      	bne.n	8009360 <_printf_common+0x48>
 8009352:	f104 0a19 	add.w	sl, r4, #25
 8009356:	68e3      	ldr	r3, [r4, #12]
 8009358:	6832      	ldr	r2, [r6, #0]
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	42ab      	cmp	r3, r5
 800935e:	dc26      	bgt.n	80093ae <_printf_common+0x96>
 8009360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009364:	6822      	ldr	r2, [r4, #0]
 8009366:	3b00      	subs	r3, #0
 8009368:	bf18      	it	ne
 800936a:	2301      	movne	r3, #1
 800936c:	0692      	lsls	r2, r2, #26
 800936e:	d42b      	bmi.n	80093c8 <_printf_common+0xb0>
 8009370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009374:	4641      	mov	r1, r8
 8009376:	4638      	mov	r0, r7
 8009378:	47c8      	blx	r9
 800937a:	3001      	adds	r0, #1
 800937c:	d01e      	beq.n	80093bc <_printf_common+0xa4>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	6922      	ldr	r2, [r4, #16]
 8009382:	f003 0306 	and.w	r3, r3, #6
 8009386:	2b04      	cmp	r3, #4
 8009388:	bf02      	ittt	eq
 800938a:	68e5      	ldreq	r5, [r4, #12]
 800938c:	6833      	ldreq	r3, [r6, #0]
 800938e:	1aed      	subeq	r5, r5, r3
 8009390:	68a3      	ldr	r3, [r4, #8]
 8009392:	bf0c      	ite	eq
 8009394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009398:	2500      	movne	r5, #0
 800939a:	4293      	cmp	r3, r2
 800939c:	bfc4      	itt	gt
 800939e:	1a9b      	subgt	r3, r3, r2
 80093a0:	18ed      	addgt	r5, r5, r3
 80093a2:	2600      	movs	r6, #0
 80093a4:	341a      	adds	r4, #26
 80093a6:	42b5      	cmp	r5, r6
 80093a8:	d11a      	bne.n	80093e0 <_printf_common+0xc8>
 80093aa:	2000      	movs	r0, #0
 80093ac:	e008      	b.n	80093c0 <_printf_common+0xa8>
 80093ae:	2301      	movs	r3, #1
 80093b0:	4652      	mov	r2, sl
 80093b2:	4641      	mov	r1, r8
 80093b4:	4638      	mov	r0, r7
 80093b6:	47c8      	blx	r9
 80093b8:	3001      	adds	r0, #1
 80093ba:	d103      	bne.n	80093c4 <_printf_common+0xac>
 80093bc:	f04f 30ff 	mov.w	r0, #4294967295
 80093c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c4:	3501      	adds	r5, #1
 80093c6:	e7c6      	b.n	8009356 <_printf_common+0x3e>
 80093c8:	18e1      	adds	r1, r4, r3
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	2030      	movs	r0, #48	@ 0x30
 80093ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093d2:	4422      	add	r2, r4
 80093d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093dc:	3302      	adds	r3, #2
 80093de:	e7c7      	b.n	8009370 <_printf_common+0x58>
 80093e0:	2301      	movs	r3, #1
 80093e2:	4622      	mov	r2, r4
 80093e4:	4641      	mov	r1, r8
 80093e6:	4638      	mov	r0, r7
 80093e8:	47c8      	blx	r9
 80093ea:	3001      	adds	r0, #1
 80093ec:	d0e6      	beq.n	80093bc <_printf_common+0xa4>
 80093ee:	3601      	adds	r6, #1
 80093f0:	e7d9      	b.n	80093a6 <_printf_common+0x8e>
	...

080093f4 <_printf_i>:
 80093f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f8:	7e0f      	ldrb	r7, [r1, #24]
 80093fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093fc:	2f78      	cmp	r7, #120	@ 0x78
 80093fe:	4691      	mov	r9, r2
 8009400:	4680      	mov	r8, r0
 8009402:	460c      	mov	r4, r1
 8009404:	469a      	mov	sl, r3
 8009406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800940a:	d807      	bhi.n	800941c <_printf_i+0x28>
 800940c:	2f62      	cmp	r7, #98	@ 0x62
 800940e:	d80a      	bhi.n	8009426 <_printf_i+0x32>
 8009410:	2f00      	cmp	r7, #0
 8009412:	f000 80d2 	beq.w	80095ba <_printf_i+0x1c6>
 8009416:	2f58      	cmp	r7, #88	@ 0x58
 8009418:	f000 80b9 	beq.w	800958e <_printf_i+0x19a>
 800941c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009424:	e03a      	b.n	800949c <_printf_i+0xa8>
 8009426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800942a:	2b15      	cmp	r3, #21
 800942c:	d8f6      	bhi.n	800941c <_printf_i+0x28>
 800942e:	a101      	add	r1, pc, #4	@ (adr r1, 8009434 <_printf_i+0x40>)
 8009430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009434:	0800948d 	.word	0x0800948d
 8009438:	080094a1 	.word	0x080094a1
 800943c:	0800941d 	.word	0x0800941d
 8009440:	0800941d 	.word	0x0800941d
 8009444:	0800941d 	.word	0x0800941d
 8009448:	0800941d 	.word	0x0800941d
 800944c:	080094a1 	.word	0x080094a1
 8009450:	0800941d 	.word	0x0800941d
 8009454:	0800941d 	.word	0x0800941d
 8009458:	0800941d 	.word	0x0800941d
 800945c:	0800941d 	.word	0x0800941d
 8009460:	080095a1 	.word	0x080095a1
 8009464:	080094cb 	.word	0x080094cb
 8009468:	0800955b 	.word	0x0800955b
 800946c:	0800941d 	.word	0x0800941d
 8009470:	0800941d 	.word	0x0800941d
 8009474:	080095c3 	.word	0x080095c3
 8009478:	0800941d 	.word	0x0800941d
 800947c:	080094cb 	.word	0x080094cb
 8009480:	0800941d 	.word	0x0800941d
 8009484:	0800941d 	.word	0x0800941d
 8009488:	08009563 	.word	0x08009563
 800948c:	6833      	ldr	r3, [r6, #0]
 800948e:	1d1a      	adds	r2, r3, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6032      	str	r2, [r6, #0]
 8009494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800949c:	2301      	movs	r3, #1
 800949e:	e09d      	b.n	80095dc <_printf_i+0x1e8>
 80094a0:	6833      	ldr	r3, [r6, #0]
 80094a2:	6820      	ldr	r0, [r4, #0]
 80094a4:	1d19      	adds	r1, r3, #4
 80094a6:	6031      	str	r1, [r6, #0]
 80094a8:	0606      	lsls	r6, r0, #24
 80094aa:	d501      	bpl.n	80094b0 <_printf_i+0xbc>
 80094ac:	681d      	ldr	r5, [r3, #0]
 80094ae:	e003      	b.n	80094b8 <_printf_i+0xc4>
 80094b0:	0645      	lsls	r5, r0, #25
 80094b2:	d5fb      	bpl.n	80094ac <_printf_i+0xb8>
 80094b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	da03      	bge.n	80094c4 <_printf_i+0xd0>
 80094bc:	232d      	movs	r3, #45	@ 0x2d
 80094be:	426d      	negs	r5, r5
 80094c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094c4:	4859      	ldr	r0, [pc, #356]	@ (800962c <_printf_i+0x238>)
 80094c6:	230a      	movs	r3, #10
 80094c8:	e011      	b.n	80094ee <_printf_i+0xfa>
 80094ca:	6821      	ldr	r1, [r4, #0]
 80094cc:	6833      	ldr	r3, [r6, #0]
 80094ce:	0608      	lsls	r0, r1, #24
 80094d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80094d4:	d402      	bmi.n	80094dc <_printf_i+0xe8>
 80094d6:	0649      	lsls	r1, r1, #25
 80094d8:	bf48      	it	mi
 80094da:	b2ad      	uxthmi	r5, r5
 80094dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80094de:	4853      	ldr	r0, [pc, #332]	@ (800962c <_printf_i+0x238>)
 80094e0:	6033      	str	r3, [r6, #0]
 80094e2:	bf14      	ite	ne
 80094e4:	230a      	movne	r3, #10
 80094e6:	2308      	moveq	r3, #8
 80094e8:	2100      	movs	r1, #0
 80094ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094ee:	6866      	ldr	r6, [r4, #4]
 80094f0:	60a6      	str	r6, [r4, #8]
 80094f2:	2e00      	cmp	r6, #0
 80094f4:	bfa2      	ittt	ge
 80094f6:	6821      	ldrge	r1, [r4, #0]
 80094f8:	f021 0104 	bicge.w	r1, r1, #4
 80094fc:	6021      	strge	r1, [r4, #0]
 80094fe:	b90d      	cbnz	r5, 8009504 <_printf_i+0x110>
 8009500:	2e00      	cmp	r6, #0
 8009502:	d04b      	beq.n	800959c <_printf_i+0x1a8>
 8009504:	4616      	mov	r6, r2
 8009506:	fbb5 f1f3 	udiv	r1, r5, r3
 800950a:	fb03 5711 	mls	r7, r3, r1, r5
 800950e:	5dc7      	ldrb	r7, [r0, r7]
 8009510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009514:	462f      	mov	r7, r5
 8009516:	42bb      	cmp	r3, r7
 8009518:	460d      	mov	r5, r1
 800951a:	d9f4      	bls.n	8009506 <_printf_i+0x112>
 800951c:	2b08      	cmp	r3, #8
 800951e:	d10b      	bne.n	8009538 <_printf_i+0x144>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	07df      	lsls	r7, r3, #31
 8009524:	d508      	bpl.n	8009538 <_printf_i+0x144>
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	6861      	ldr	r1, [r4, #4]
 800952a:	4299      	cmp	r1, r3
 800952c:	bfde      	ittt	le
 800952e:	2330      	movle	r3, #48	@ 0x30
 8009530:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009534:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009538:	1b92      	subs	r2, r2, r6
 800953a:	6122      	str	r2, [r4, #16]
 800953c:	f8cd a000 	str.w	sl, [sp]
 8009540:	464b      	mov	r3, r9
 8009542:	aa03      	add	r2, sp, #12
 8009544:	4621      	mov	r1, r4
 8009546:	4640      	mov	r0, r8
 8009548:	f7ff fee6 	bl	8009318 <_printf_common>
 800954c:	3001      	adds	r0, #1
 800954e:	d14a      	bne.n	80095e6 <_printf_i+0x1f2>
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	b004      	add	sp, #16
 8009556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	f043 0320 	orr.w	r3, r3, #32
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	4833      	ldr	r0, [pc, #204]	@ (8009630 <_printf_i+0x23c>)
 8009564:	2778      	movs	r7, #120	@ 0x78
 8009566:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	6831      	ldr	r1, [r6, #0]
 800956e:	061f      	lsls	r7, r3, #24
 8009570:	f851 5b04 	ldr.w	r5, [r1], #4
 8009574:	d402      	bmi.n	800957c <_printf_i+0x188>
 8009576:	065f      	lsls	r7, r3, #25
 8009578:	bf48      	it	mi
 800957a:	b2ad      	uxthmi	r5, r5
 800957c:	6031      	str	r1, [r6, #0]
 800957e:	07d9      	lsls	r1, r3, #31
 8009580:	bf44      	itt	mi
 8009582:	f043 0320 	orrmi.w	r3, r3, #32
 8009586:	6023      	strmi	r3, [r4, #0]
 8009588:	b11d      	cbz	r5, 8009592 <_printf_i+0x19e>
 800958a:	2310      	movs	r3, #16
 800958c:	e7ac      	b.n	80094e8 <_printf_i+0xf4>
 800958e:	4827      	ldr	r0, [pc, #156]	@ (800962c <_printf_i+0x238>)
 8009590:	e7e9      	b.n	8009566 <_printf_i+0x172>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f023 0320 	bic.w	r3, r3, #32
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	e7f6      	b.n	800958a <_printf_i+0x196>
 800959c:	4616      	mov	r6, r2
 800959e:	e7bd      	b.n	800951c <_printf_i+0x128>
 80095a0:	6833      	ldr	r3, [r6, #0]
 80095a2:	6825      	ldr	r5, [r4, #0]
 80095a4:	6961      	ldr	r1, [r4, #20]
 80095a6:	1d18      	adds	r0, r3, #4
 80095a8:	6030      	str	r0, [r6, #0]
 80095aa:	062e      	lsls	r6, r5, #24
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	d501      	bpl.n	80095b4 <_printf_i+0x1c0>
 80095b0:	6019      	str	r1, [r3, #0]
 80095b2:	e002      	b.n	80095ba <_printf_i+0x1c6>
 80095b4:	0668      	lsls	r0, r5, #25
 80095b6:	d5fb      	bpl.n	80095b0 <_printf_i+0x1bc>
 80095b8:	8019      	strh	r1, [r3, #0]
 80095ba:	2300      	movs	r3, #0
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	4616      	mov	r6, r2
 80095c0:	e7bc      	b.n	800953c <_printf_i+0x148>
 80095c2:	6833      	ldr	r3, [r6, #0]
 80095c4:	1d1a      	adds	r2, r3, #4
 80095c6:	6032      	str	r2, [r6, #0]
 80095c8:	681e      	ldr	r6, [r3, #0]
 80095ca:	6862      	ldr	r2, [r4, #4]
 80095cc:	2100      	movs	r1, #0
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7f6 fe1e 	bl	8000210 <memchr>
 80095d4:	b108      	cbz	r0, 80095da <_printf_i+0x1e6>
 80095d6:	1b80      	subs	r0, r0, r6
 80095d8:	6060      	str	r0, [r4, #4]
 80095da:	6863      	ldr	r3, [r4, #4]
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	2300      	movs	r3, #0
 80095e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095e4:	e7aa      	b.n	800953c <_printf_i+0x148>
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	4632      	mov	r2, r6
 80095ea:	4649      	mov	r1, r9
 80095ec:	4640      	mov	r0, r8
 80095ee:	47d0      	blx	sl
 80095f0:	3001      	adds	r0, #1
 80095f2:	d0ad      	beq.n	8009550 <_printf_i+0x15c>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	079b      	lsls	r3, r3, #30
 80095f8:	d413      	bmi.n	8009622 <_printf_i+0x22e>
 80095fa:	68e0      	ldr	r0, [r4, #12]
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	4298      	cmp	r0, r3
 8009600:	bfb8      	it	lt
 8009602:	4618      	movlt	r0, r3
 8009604:	e7a6      	b.n	8009554 <_printf_i+0x160>
 8009606:	2301      	movs	r3, #1
 8009608:	4632      	mov	r2, r6
 800960a:	4649      	mov	r1, r9
 800960c:	4640      	mov	r0, r8
 800960e:	47d0      	blx	sl
 8009610:	3001      	adds	r0, #1
 8009612:	d09d      	beq.n	8009550 <_printf_i+0x15c>
 8009614:	3501      	adds	r5, #1
 8009616:	68e3      	ldr	r3, [r4, #12]
 8009618:	9903      	ldr	r1, [sp, #12]
 800961a:	1a5b      	subs	r3, r3, r1
 800961c:	42ab      	cmp	r3, r5
 800961e:	dcf2      	bgt.n	8009606 <_printf_i+0x212>
 8009620:	e7eb      	b.n	80095fa <_printf_i+0x206>
 8009622:	2500      	movs	r5, #0
 8009624:	f104 0619 	add.w	r6, r4, #25
 8009628:	e7f5      	b.n	8009616 <_printf_i+0x222>
 800962a:	bf00      	nop
 800962c:	0800d503 	.word	0x0800d503
 8009630:	0800d514 	.word	0x0800d514

08009634 <_scanf_float>:
 8009634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	b087      	sub	sp, #28
 800963a:	4617      	mov	r7, r2
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	688b      	ldr	r3, [r1, #8]
 8009640:	1e5a      	subs	r2, r3, #1
 8009642:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009646:	bf81      	itttt	hi
 8009648:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800964c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009650:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009654:	608b      	strhi	r3, [r1, #8]
 8009656:	680b      	ldr	r3, [r1, #0]
 8009658:	460a      	mov	r2, r1
 800965a:	f04f 0500 	mov.w	r5, #0
 800965e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009662:	f842 3b1c 	str.w	r3, [r2], #28
 8009666:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800966a:	4680      	mov	r8, r0
 800966c:	460c      	mov	r4, r1
 800966e:	bf98      	it	ls
 8009670:	f04f 0b00 	movls.w	fp, #0
 8009674:	9201      	str	r2, [sp, #4]
 8009676:	4616      	mov	r6, r2
 8009678:	46aa      	mov	sl, r5
 800967a:	46a9      	mov	r9, r5
 800967c:	9502      	str	r5, [sp, #8]
 800967e:	68a2      	ldr	r2, [r4, #8]
 8009680:	b152      	cbz	r2, 8009698 <_scanf_float+0x64>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	2b4e      	cmp	r3, #78	@ 0x4e
 8009688:	d864      	bhi.n	8009754 <_scanf_float+0x120>
 800968a:	2b40      	cmp	r3, #64	@ 0x40
 800968c:	d83c      	bhi.n	8009708 <_scanf_float+0xd4>
 800968e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009692:	b2c8      	uxtb	r0, r1
 8009694:	280e      	cmp	r0, #14
 8009696:	d93a      	bls.n	800970e <_scanf_float+0xda>
 8009698:	f1b9 0f00 	cmp.w	r9, #0
 800969c:	d003      	beq.n	80096a6 <_scanf_float+0x72>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096aa:	f1ba 0f01 	cmp.w	sl, #1
 80096ae:	f200 8117 	bhi.w	80098e0 <_scanf_float+0x2ac>
 80096b2:	9b01      	ldr	r3, [sp, #4]
 80096b4:	429e      	cmp	r6, r3
 80096b6:	f200 8108 	bhi.w	80098ca <_scanf_float+0x296>
 80096ba:	2001      	movs	r0, #1
 80096bc:	b007      	add	sp, #28
 80096be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80096c6:	2a0d      	cmp	r2, #13
 80096c8:	d8e6      	bhi.n	8009698 <_scanf_float+0x64>
 80096ca:	a101      	add	r1, pc, #4	@ (adr r1, 80096d0 <_scanf_float+0x9c>)
 80096cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096d0:	08009817 	.word	0x08009817
 80096d4:	08009699 	.word	0x08009699
 80096d8:	08009699 	.word	0x08009699
 80096dc:	08009699 	.word	0x08009699
 80096e0:	08009877 	.word	0x08009877
 80096e4:	0800984f 	.word	0x0800984f
 80096e8:	08009699 	.word	0x08009699
 80096ec:	08009699 	.word	0x08009699
 80096f0:	08009825 	.word	0x08009825
 80096f4:	08009699 	.word	0x08009699
 80096f8:	08009699 	.word	0x08009699
 80096fc:	08009699 	.word	0x08009699
 8009700:	08009699 	.word	0x08009699
 8009704:	080097dd 	.word	0x080097dd
 8009708:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800970c:	e7db      	b.n	80096c6 <_scanf_float+0x92>
 800970e:	290e      	cmp	r1, #14
 8009710:	d8c2      	bhi.n	8009698 <_scanf_float+0x64>
 8009712:	a001      	add	r0, pc, #4	@ (adr r0, 8009718 <_scanf_float+0xe4>)
 8009714:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009718:	080097cd 	.word	0x080097cd
 800971c:	08009699 	.word	0x08009699
 8009720:	080097cd 	.word	0x080097cd
 8009724:	08009863 	.word	0x08009863
 8009728:	08009699 	.word	0x08009699
 800972c:	08009775 	.word	0x08009775
 8009730:	080097b3 	.word	0x080097b3
 8009734:	080097b3 	.word	0x080097b3
 8009738:	080097b3 	.word	0x080097b3
 800973c:	080097b3 	.word	0x080097b3
 8009740:	080097b3 	.word	0x080097b3
 8009744:	080097b3 	.word	0x080097b3
 8009748:	080097b3 	.word	0x080097b3
 800974c:	080097b3 	.word	0x080097b3
 8009750:	080097b3 	.word	0x080097b3
 8009754:	2b6e      	cmp	r3, #110	@ 0x6e
 8009756:	d809      	bhi.n	800976c <_scanf_float+0x138>
 8009758:	2b60      	cmp	r3, #96	@ 0x60
 800975a:	d8b2      	bhi.n	80096c2 <_scanf_float+0x8e>
 800975c:	2b54      	cmp	r3, #84	@ 0x54
 800975e:	d07b      	beq.n	8009858 <_scanf_float+0x224>
 8009760:	2b59      	cmp	r3, #89	@ 0x59
 8009762:	d199      	bne.n	8009698 <_scanf_float+0x64>
 8009764:	2d07      	cmp	r5, #7
 8009766:	d197      	bne.n	8009698 <_scanf_float+0x64>
 8009768:	2508      	movs	r5, #8
 800976a:	e02c      	b.n	80097c6 <_scanf_float+0x192>
 800976c:	2b74      	cmp	r3, #116	@ 0x74
 800976e:	d073      	beq.n	8009858 <_scanf_float+0x224>
 8009770:	2b79      	cmp	r3, #121	@ 0x79
 8009772:	e7f6      	b.n	8009762 <_scanf_float+0x12e>
 8009774:	6821      	ldr	r1, [r4, #0]
 8009776:	05c8      	lsls	r0, r1, #23
 8009778:	d51b      	bpl.n	80097b2 <_scanf_float+0x17e>
 800977a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800977e:	6021      	str	r1, [r4, #0]
 8009780:	f109 0901 	add.w	r9, r9, #1
 8009784:	f1bb 0f00 	cmp.w	fp, #0
 8009788:	d003      	beq.n	8009792 <_scanf_float+0x15e>
 800978a:	3201      	adds	r2, #1
 800978c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009790:	60a2      	str	r2, [r4, #8]
 8009792:	68a3      	ldr	r3, [r4, #8]
 8009794:	3b01      	subs	r3, #1
 8009796:	60a3      	str	r3, [r4, #8]
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	3301      	adds	r3, #1
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	607b      	str	r3, [r7, #4]
 80097a6:	f340 8087 	ble.w	80098b8 <_scanf_float+0x284>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	3301      	adds	r3, #1
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	e765      	b.n	800967e <_scanf_float+0x4a>
 80097b2:	eb1a 0105 	adds.w	r1, sl, r5
 80097b6:	f47f af6f 	bne.w	8009698 <_scanf_float+0x64>
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80097c0:	6022      	str	r2, [r4, #0]
 80097c2:	460d      	mov	r5, r1
 80097c4:	468a      	mov	sl, r1
 80097c6:	f806 3b01 	strb.w	r3, [r6], #1
 80097ca:	e7e2      	b.n	8009792 <_scanf_float+0x15e>
 80097cc:	6822      	ldr	r2, [r4, #0]
 80097ce:	0610      	lsls	r0, r2, #24
 80097d0:	f57f af62 	bpl.w	8009698 <_scanf_float+0x64>
 80097d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097d8:	6022      	str	r2, [r4, #0]
 80097da:	e7f4      	b.n	80097c6 <_scanf_float+0x192>
 80097dc:	f1ba 0f00 	cmp.w	sl, #0
 80097e0:	d10e      	bne.n	8009800 <_scanf_float+0x1cc>
 80097e2:	f1b9 0f00 	cmp.w	r9, #0
 80097e6:	d10e      	bne.n	8009806 <_scanf_float+0x1d2>
 80097e8:	6822      	ldr	r2, [r4, #0]
 80097ea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80097ee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80097f2:	d108      	bne.n	8009806 <_scanf_float+0x1d2>
 80097f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80097f8:	6022      	str	r2, [r4, #0]
 80097fa:	f04f 0a01 	mov.w	sl, #1
 80097fe:	e7e2      	b.n	80097c6 <_scanf_float+0x192>
 8009800:	f1ba 0f02 	cmp.w	sl, #2
 8009804:	d055      	beq.n	80098b2 <_scanf_float+0x27e>
 8009806:	2d01      	cmp	r5, #1
 8009808:	d002      	beq.n	8009810 <_scanf_float+0x1dc>
 800980a:	2d04      	cmp	r5, #4
 800980c:	f47f af44 	bne.w	8009698 <_scanf_float+0x64>
 8009810:	3501      	adds	r5, #1
 8009812:	b2ed      	uxtb	r5, r5
 8009814:	e7d7      	b.n	80097c6 <_scanf_float+0x192>
 8009816:	f1ba 0f01 	cmp.w	sl, #1
 800981a:	f47f af3d 	bne.w	8009698 <_scanf_float+0x64>
 800981e:	f04f 0a02 	mov.w	sl, #2
 8009822:	e7d0      	b.n	80097c6 <_scanf_float+0x192>
 8009824:	b97d      	cbnz	r5, 8009846 <_scanf_float+0x212>
 8009826:	f1b9 0f00 	cmp.w	r9, #0
 800982a:	f47f af38 	bne.w	800969e <_scanf_float+0x6a>
 800982e:	6822      	ldr	r2, [r4, #0]
 8009830:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009834:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009838:	f040 8108 	bne.w	8009a4c <_scanf_float+0x418>
 800983c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009840:	6022      	str	r2, [r4, #0]
 8009842:	2501      	movs	r5, #1
 8009844:	e7bf      	b.n	80097c6 <_scanf_float+0x192>
 8009846:	2d03      	cmp	r5, #3
 8009848:	d0e2      	beq.n	8009810 <_scanf_float+0x1dc>
 800984a:	2d05      	cmp	r5, #5
 800984c:	e7de      	b.n	800980c <_scanf_float+0x1d8>
 800984e:	2d02      	cmp	r5, #2
 8009850:	f47f af22 	bne.w	8009698 <_scanf_float+0x64>
 8009854:	2503      	movs	r5, #3
 8009856:	e7b6      	b.n	80097c6 <_scanf_float+0x192>
 8009858:	2d06      	cmp	r5, #6
 800985a:	f47f af1d 	bne.w	8009698 <_scanf_float+0x64>
 800985e:	2507      	movs	r5, #7
 8009860:	e7b1      	b.n	80097c6 <_scanf_float+0x192>
 8009862:	6822      	ldr	r2, [r4, #0]
 8009864:	0591      	lsls	r1, r2, #22
 8009866:	f57f af17 	bpl.w	8009698 <_scanf_float+0x64>
 800986a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800986e:	6022      	str	r2, [r4, #0]
 8009870:	f8cd 9008 	str.w	r9, [sp, #8]
 8009874:	e7a7      	b.n	80097c6 <_scanf_float+0x192>
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800987c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009880:	d006      	beq.n	8009890 <_scanf_float+0x25c>
 8009882:	0550      	lsls	r0, r2, #21
 8009884:	f57f af08 	bpl.w	8009698 <_scanf_float+0x64>
 8009888:	f1b9 0f00 	cmp.w	r9, #0
 800988c:	f000 80de 	beq.w	8009a4c <_scanf_float+0x418>
 8009890:	0591      	lsls	r1, r2, #22
 8009892:	bf58      	it	pl
 8009894:	9902      	ldrpl	r1, [sp, #8]
 8009896:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800989a:	bf58      	it	pl
 800989c:	eba9 0101 	subpl.w	r1, r9, r1
 80098a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80098a4:	bf58      	it	pl
 80098a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098aa:	6022      	str	r2, [r4, #0]
 80098ac:	f04f 0900 	mov.w	r9, #0
 80098b0:	e789      	b.n	80097c6 <_scanf_float+0x192>
 80098b2:	f04f 0a03 	mov.w	sl, #3
 80098b6:	e786      	b.n	80097c6 <_scanf_float+0x192>
 80098b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098bc:	4639      	mov	r1, r7
 80098be:	4640      	mov	r0, r8
 80098c0:	4798      	blx	r3
 80098c2:	2800      	cmp	r0, #0
 80098c4:	f43f aedb 	beq.w	800967e <_scanf_float+0x4a>
 80098c8:	e6e6      	b.n	8009698 <_scanf_float+0x64>
 80098ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098d2:	463a      	mov	r2, r7
 80098d4:	4640      	mov	r0, r8
 80098d6:	4798      	blx	r3
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	3b01      	subs	r3, #1
 80098dc:	6123      	str	r3, [r4, #16]
 80098de:	e6e8      	b.n	80096b2 <_scanf_float+0x7e>
 80098e0:	1e6b      	subs	r3, r5, #1
 80098e2:	2b06      	cmp	r3, #6
 80098e4:	d824      	bhi.n	8009930 <_scanf_float+0x2fc>
 80098e6:	2d02      	cmp	r5, #2
 80098e8:	d836      	bhi.n	8009958 <_scanf_float+0x324>
 80098ea:	9b01      	ldr	r3, [sp, #4]
 80098ec:	429e      	cmp	r6, r3
 80098ee:	f67f aee4 	bls.w	80096ba <_scanf_float+0x86>
 80098f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098fa:	463a      	mov	r2, r7
 80098fc:	4640      	mov	r0, r8
 80098fe:	4798      	blx	r3
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	3b01      	subs	r3, #1
 8009904:	6123      	str	r3, [r4, #16]
 8009906:	e7f0      	b.n	80098ea <_scanf_float+0x2b6>
 8009908:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800990c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009910:	463a      	mov	r2, r7
 8009912:	4640      	mov	r0, r8
 8009914:	4798      	blx	r3
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	3b01      	subs	r3, #1
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009920:	fa5f fa8a 	uxtb.w	sl, sl
 8009924:	f1ba 0f02 	cmp.w	sl, #2
 8009928:	d1ee      	bne.n	8009908 <_scanf_float+0x2d4>
 800992a:	3d03      	subs	r5, #3
 800992c:	b2ed      	uxtb	r5, r5
 800992e:	1b76      	subs	r6, r6, r5
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	05da      	lsls	r2, r3, #23
 8009934:	d530      	bpl.n	8009998 <_scanf_float+0x364>
 8009936:	055b      	lsls	r3, r3, #21
 8009938:	d511      	bpl.n	800995e <_scanf_float+0x32a>
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	429e      	cmp	r6, r3
 800993e:	f67f aebc 	bls.w	80096ba <_scanf_float+0x86>
 8009942:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800994a:	463a      	mov	r2, r7
 800994c:	4640      	mov	r0, r8
 800994e:	4798      	blx	r3
 8009950:	6923      	ldr	r3, [r4, #16]
 8009952:	3b01      	subs	r3, #1
 8009954:	6123      	str	r3, [r4, #16]
 8009956:	e7f0      	b.n	800993a <_scanf_float+0x306>
 8009958:	46aa      	mov	sl, r5
 800995a:	46b3      	mov	fp, r6
 800995c:	e7de      	b.n	800991c <_scanf_float+0x2e8>
 800995e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	2965      	cmp	r1, #101	@ 0x65
 8009966:	f103 33ff 	add.w	r3, r3, #4294967295
 800996a:	f106 35ff 	add.w	r5, r6, #4294967295
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	d00c      	beq.n	800998c <_scanf_float+0x358>
 8009972:	2945      	cmp	r1, #69	@ 0x45
 8009974:	d00a      	beq.n	800998c <_scanf_float+0x358>
 8009976:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800997a:	463a      	mov	r2, r7
 800997c:	4640      	mov	r0, r8
 800997e:	4798      	blx	r3
 8009980:	6923      	ldr	r3, [r4, #16]
 8009982:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009986:	3b01      	subs	r3, #1
 8009988:	1eb5      	subs	r5, r6, #2
 800998a:	6123      	str	r3, [r4, #16]
 800998c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009990:	463a      	mov	r2, r7
 8009992:	4640      	mov	r0, r8
 8009994:	4798      	blx	r3
 8009996:	462e      	mov	r6, r5
 8009998:	6822      	ldr	r2, [r4, #0]
 800999a:	f012 0210 	ands.w	r2, r2, #16
 800999e:	d001      	beq.n	80099a4 <_scanf_float+0x370>
 80099a0:	2000      	movs	r0, #0
 80099a2:	e68b      	b.n	80096bc <_scanf_float+0x88>
 80099a4:	7032      	strb	r2, [r6, #0]
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80099ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099b0:	d11c      	bne.n	80099ec <_scanf_float+0x3b8>
 80099b2:	9b02      	ldr	r3, [sp, #8]
 80099b4:	454b      	cmp	r3, r9
 80099b6:	eba3 0209 	sub.w	r2, r3, r9
 80099ba:	d123      	bne.n	8009a04 <_scanf_float+0x3d0>
 80099bc:	9901      	ldr	r1, [sp, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	4640      	mov	r0, r8
 80099c2:	f002 fc09 	bl	800c1d8 <_strtod_r>
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	6821      	ldr	r1, [r4, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f011 0f02 	tst.w	r1, #2
 80099d0:	ec57 6b10 	vmov	r6, r7, d0
 80099d4:	f103 0204 	add.w	r2, r3, #4
 80099d8:	d01f      	beq.n	8009a1a <_scanf_float+0x3e6>
 80099da:	9903      	ldr	r1, [sp, #12]
 80099dc:	600a      	str	r2, [r1, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	e9c3 6700 	strd	r6, r7, [r3]
 80099e4:	68e3      	ldr	r3, [r4, #12]
 80099e6:	3301      	adds	r3, #1
 80099e8:	60e3      	str	r3, [r4, #12]
 80099ea:	e7d9      	b.n	80099a0 <_scanf_float+0x36c>
 80099ec:	9b04      	ldr	r3, [sp, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0e4      	beq.n	80099bc <_scanf_float+0x388>
 80099f2:	9905      	ldr	r1, [sp, #20]
 80099f4:	230a      	movs	r3, #10
 80099f6:	3101      	adds	r1, #1
 80099f8:	4640      	mov	r0, r8
 80099fa:	f7ff f9b7 	bl	8008d6c <_strtol_r>
 80099fe:	9b04      	ldr	r3, [sp, #16]
 8009a00:	9e05      	ldr	r6, [sp, #20]
 8009a02:	1ac2      	subs	r2, r0, r3
 8009a04:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009a08:	429e      	cmp	r6, r3
 8009a0a:	bf28      	it	cs
 8009a0c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009a10:	4910      	ldr	r1, [pc, #64]	@ (8009a54 <_scanf_float+0x420>)
 8009a12:	4630      	mov	r0, r6
 8009a14:	f000 f8e4 	bl	8009be0 <siprintf>
 8009a18:	e7d0      	b.n	80099bc <_scanf_float+0x388>
 8009a1a:	f011 0f04 	tst.w	r1, #4
 8009a1e:	9903      	ldr	r1, [sp, #12]
 8009a20:	600a      	str	r2, [r1, #0]
 8009a22:	d1dc      	bne.n	80099de <_scanf_float+0x3aa>
 8009a24:	681d      	ldr	r5, [r3, #0]
 8009a26:	4632      	mov	r2, r6
 8009a28:	463b      	mov	r3, r7
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	4639      	mov	r1, r7
 8009a2e:	f7f7 f89d 	bl	8000b6c <__aeabi_dcmpun>
 8009a32:	b128      	cbz	r0, 8009a40 <_scanf_float+0x40c>
 8009a34:	4808      	ldr	r0, [pc, #32]	@ (8009a58 <_scanf_float+0x424>)
 8009a36:	f000 f9c9 	bl	8009dcc <nanf>
 8009a3a:	ed85 0a00 	vstr	s0, [r5]
 8009a3e:	e7d1      	b.n	80099e4 <_scanf_float+0x3b0>
 8009a40:	4630      	mov	r0, r6
 8009a42:	4639      	mov	r1, r7
 8009a44:	f7f7 f8f0 	bl	8000c28 <__aeabi_d2f>
 8009a48:	6028      	str	r0, [r5, #0]
 8009a4a:	e7cb      	b.n	80099e4 <_scanf_float+0x3b0>
 8009a4c:	f04f 0900 	mov.w	r9, #0
 8009a50:	e629      	b.n	80096a6 <_scanf_float+0x72>
 8009a52:	bf00      	nop
 8009a54:	0800d525 	.word	0x0800d525
 8009a58:	0800d7bc 	.word	0x0800d7bc

08009a5c <std>:
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	4604      	mov	r4, r0
 8009a62:	e9c0 3300 	strd	r3, r3, [r0]
 8009a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a6a:	6083      	str	r3, [r0, #8]
 8009a6c:	8181      	strh	r1, [r0, #12]
 8009a6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a70:	81c2      	strh	r2, [r0, #14]
 8009a72:	6183      	str	r3, [r0, #24]
 8009a74:	4619      	mov	r1, r3
 8009a76:	2208      	movs	r2, #8
 8009a78:	305c      	adds	r0, #92	@ 0x5c
 8009a7a:	f000 f914 	bl	8009ca6 <memset>
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <std+0x58>)
 8009a80:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a82:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab8 <std+0x5c>)
 8009a84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a86:	4b0d      	ldr	r3, [pc, #52]	@ (8009abc <std+0x60>)
 8009a88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <std+0x64>)
 8009a8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac4 <std+0x68>)
 8009a90:	6224      	str	r4, [r4, #32]
 8009a92:	429c      	cmp	r4, r3
 8009a94:	d006      	beq.n	8009aa4 <std+0x48>
 8009a96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a9a:	4294      	cmp	r4, r2
 8009a9c:	d002      	beq.n	8009aa4 <std+0x48>
 8009a9e:	33d0      	adds	r3, #208	@ 0xd0
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	d105      	bne.n	8009ab0 <std+0x54>
 8009aa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aac:	f000 b98a 	b.w	8009dc4 <__retarget_lock_init_recursive>
 8009ab0:	bd10      	pop	{r4, pc}
 8009ab2:	bf00      	nop
 8009ab4:	08009c21 	.word	0x08009c21
 8009ab8:	08009c43 	.word	0x08009c43
 8009abc:	08009c7b 	.word	0x08009c7b
 8009ac0:	08009c9f 	.word	0x08009c9f
 8009ac4:	20000c78 	.word	0x20000c78

08009ac8 <stdio_exit_handler>:
 8009ac8:	4a02      	ldr	r2, [pc, #8]	@ (8009ad4 <stdio_exit_handler+0xc>)
 8009aca:	4903      	ldr	r1, [pc, #12]	@ (8009ad8 <stdio_exit_handler+0x10>)
 8009acc:	4803      	ldr	r0, [pc, #12]	@ (8009adc <stdio_exit_handler+0x14>)
 8009ace:	f000 b869 	b.w	8009ba4 <_fwalk_sglue>
 8009ad2:	bf00      	nop
 8009ad4:	2000001c 	.word	0x2000001c
 8009ad8:	0800c59d 	.word	0x0800c59d
 8009adc:	2000002c 	.word	0x2000002c

08009ae0 <cleanup_stdio>:
 8009ae0:	6841      	ldr	r1, [r0, #4]
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b14 <cleanup_stdio+0x34>)
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	b510      	push	{r4, lr}
 8009ae8:	4604      	mov	r4, r0
 8009aea:	d001      	beq.n	8009af0 <cleanup_stdio+0x10>
 8009aec:	f002 fd56 	bl	800c59c <_fflush_r>
 8009af0:	68a1      	ldr	r1, [r4, #8]
 8009af2:	4b09      	ldr	r3, [pc, #36]	@ (8009b18 <cleanup_stdio+0x38>)
 8009af4:	4299      	cmp	r1, r3
 8009af6:	d002      	beq.n	8009afe <cleanup_stdio+0x1e>
 8009af8:	4620      	mov	r0, r4
 8009afa:	f002 fd4f 	bl	800c59c <_fflush_r>
 8009afe:	68e1      	ldr	r1, [r4, #12]
 8009b00:	4b06      	ldr	r3, [pc, #24]	@ (8009b1c <cleanup_stdio+0x3c>)
 8009b02:	4299      	cmp	r1, r3
 8009b04:	d004      	beq.n	8009b10 <cleanup_stdio+0x30>
 8009b06:	4620      	mov	r0, r4
 8009b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b0c:	f002 bd46 	b.w	800c59c <_fflush_r>
 8009b10:	bd10      	pop	{r4, pc}
 8009b12:	bf00      	nop
 8009b14:	20000c78 	.word	0x20000c78
 8009b18:	20000ce0 	.word	0x20000ce0
 8009b1c:	20000d48 	.word	0x20000d48

08009b20 <global_stdio_init.part.0>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	4b0b      	ldr	r3, [pc, #44]	@ (8009b50 <global_stdio_init.part.0+0x30>)
 8009b24:	4c0b      	ldr	r4, [pc, #44]	@ (8009b54 <global_stdio_init.part.0+0x34>)
 8009b26:	4a0c      	ldr	r2, [pc, #48]	@ (8009b58 <global_stdio_init.part.0+0x38>)
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2104      	movs	r1, #4
 8009b30:	f7ff ff94 	bl	8009a5c <std>
 8009b34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b38:	2201      	movs	r2, #1
 8009b3a:	2109      	movs	r1, #9
 8009b3c:	f7ff ff8e 	bl	8009a5c <std>
 8009b40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b44:	2202      	movs	r2, #2
 8009b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b4a:	2112      	movs	r1, #18
 8009b4c:	f7ff bf86 	b.w	8009a5c <std>
 8009b50:	20000db0 	.word	0x20000db0
 8009b54:	20000c78 	.word	0x20000c78
 8009b58:	08009ac9 	.word	0x08009ac9

08009b5c <__sfp_lock_acquire>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	@ (8009b64 <__sfp_lock_acquire+0x8>)
 8009b5e:	f000 b932 	b.w	8009dc6 <__retarget_lock_acquire_recursive>
 8009b62:	bf00      	nop
 8009b64:	20000db9 	.word	0x20000db9

08009b68 <__sfp_lock_release>:
 8009b68:	4801      	ldr	r0, [pc, #4]	@ (8009b70 <__sfp_lock_release+0x8>)
 8009b6a:	f000 b92d 	b.w	8009dc8 <__retarget_lock_release_recursive>
 8009b6e:	bf00      	nop
 8009b70:	20000db9 	.word	0x20000db9

08009b74 <__sinit>:
 8009b74:	b510      	push	{r4, lr}
 8009b76:	4604      	mov	r4, r0
 8009b78:	f7ff fff0 	bl	8009b5c <__sfp_lock_acquire>
 8009b7c:	6a23      	ldr	r3, [r4, #32]
 8009b7e:	b11b      	cbz	r3, 8009b88 <__sinit+0x14>
 8009b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b84:	f7ff bff0 	b.w	8009b68 <__sfp_lock_release>
 8009b88:	4b04      	ldr	r3, [pc, #16]	@ (8009b9c <__sinit+0x28>)
 8009b8a:	6223      	str	r3, [r4, #32]
 8009b8c:	4b04      	ldr	r3, [pc, #16]	@ (8009ba0 <__sinit+0x2c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1f5      	bne.n	8009b80 <__sinit+0xc>
 8009b94:	f7ff ffc4 	bl	8009b20 <global_stdio_init.part.0>
 8009b98:	e7f2      	b.n	8009b80 <__sinit+0xc>
 8009b9a:	bf00      	nop
 8009b9c:	08009ae1 	.word	0x08009ae1
 8009ba0:	20000db0 	.word	0x20000db0

08009ba4 <_fwalk_sglue>:
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	4607      	mov	r7, r0
 8009baa:	4688      	mov	r8, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	2600      	movs	r6, #0
 8009bb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bb4:	f1b9 0901 	subs.w	r9, r9, #1
 8009bb8:	d505      	bpl.n	8009bc6 <_fwalk_sglue+0x22>
 8009bba:	6824      	ldr	r4, [r4, #0]
 8009bbc:	2c00      	cmp	r4, #0
 8009bbe:	d1f7      	bne.n	8009bb0 <_fwalk_sglue+0xc>
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc6:	89ab      	ldrh	r3, [r5, #12]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d907      	bls.n	8009bdc <_fwalk_sglue+0x38>
 8009bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	d003      	beq.n	8009bdc <_fwalk_sglue+0x38>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	47c0      	blx	r8
 8009bda:	4306      	orrs	r6, r0
 8009bdc:	3568      	adds	r5, #104	@ 0x68
 8009bde:	e7e9      	b.n	8009bb4 <_fwalk_sglue+0x10>

08009be0 <siprintf>:
 8009be0:	b40e      	push	{r1, r2, r3}
 8009be2:	b500      	push	{lr}
 8009be4:	b09c      	sub	sp, #112	@ 0x70
 8009be6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009be8:	9002      	str	r0, [sp, #8]
 8009bea:	9006      	str	r0, [sp, #24]
 8009bec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009bf0:	4809      	ldr	r0, [pc, #36]	@ (8009c18 <siprintf+0x38>)
 8009bf2:	9107      	str	r1, [sp, #28]
 8009bf4:	9104      	str	r1, [sp, #16]
 8009bf6:	4909      	ldr	r1, [pc, #36]	@ (8009c1c <siprintf+0x3c>)
 8009bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bfc:	9105      	str	r1, [sp, #20]
 8009bfe:	6800      	ldr	r0, [r0, #0]
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	a902      	add	r1, sp, #8
 8009c04:	f002 fb4a 	bl	800c29c <_svfiprintf_r>
 8009c08:	9b02      	ldr	r3, [sp, #8]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	701a      	strb	r2, [r3, #0]
 8009c0e:	b01c      	add	sp, #112	@ 0x70
 8009c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c14:	b003      	add	sp, #12
 8009c16:	4770      	bx	lr
 8009c18:	20000028 	.word	0x20000028
 8009c1c:	ffff0208 	.word	0xffff0208

08009c20 <__sread>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	460c      	mov	r4, r1
 8009c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c28:	f000 f87e 	bl	8009d28 <_read_r>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	bfab      	itete	ge
 8009c30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c32:	89a3      	ldrhlt	r3, [r4, #12]
 8009c34:	181b      	addge	r3, r3, r0
 8009c36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c3a:	bfac      	ite	ge
 8009c3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c3e:	81a3      	strhlt	r3, [r4, #12]
 8009c40:	bd10      	pop	{r4, pc}

08009c42 <__swrite>:
 8009c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c46:	461f      	mov	r7, r3
 8009c48:	898b      	ldrh	r3, [r1, #12]
 8009c4a:	05db      	lsls	r3, r3, #23
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	4616      	mov	r6, r2
 8009c52:	d505      	bpl.n	8009c60 <__swrite+0x1e>
 8009c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c58:	2302      	movs	r3, #2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f000 f852 	bl	8009d04 <_lseek_r>
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	463b      	mov	r3, r7
 8009c70:	4628      	mov	r0, r5
 8009c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c76:	f000 b869 	b.w	8009d4c <_write_r>

08009c7a <__sseek>:
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c82:	f000 f83f 	bl	8009d04 <_lseek_r>
 8009c86:	1c43      	adds	r3, r0, #1
 8009c88:	89a3      	ldrh	r3, [r4, #12]
 8009c8a:	bf15      	itete	ne
 8009c8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c96:	81a3      	strheq	r3, [r4, #12]
 8009c98:	bf18      	it	ne
 8009c9a:	81a3      	strhne	r3, [r4, #12]
 8009c9c:	bd10      	pop	{r4, pc}

08009c9e <__sclose>:
 8009c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca2:	f000 b81f 	b.w	8009ce4 <_close_r>

08009ca6 <memset>:
 8009ca6:	4402      	add	r2, r0
 8009ca8:	4603      	mov	r3, r0
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d100      	bne.n	8009cb0 <memset+0xa>
 8009cae:	4770      	bx	lr
 8009cb0:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb4:	e7f9      	b.n	8009caa <memset+0x4>

08009cb6 <strncmp>:
 8009cb6:	b510      	push	{r4, lr}
 8009cb8:	b16a      	cbz	r2, 8009cd6 <strncmp+0x20>
 8009cba:	3901      	subs	r1, #1
 8009cbc:	1884      	adds	r4, r0, r2
 8009cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cc2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d103      	bne.n	8009cd2 <strncmp+0x1c>
 8009cca:	42a0      	cmp	r0, r4
 8009ccc:	d001      	beq.n	8009cd2 <strncmp+0x1c>
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	d1f5      	bne.n	8009cbe <strncmp+0x8>
 8009cd2:	1ad0      	subs	r0, r2, r3
 8009cd4:	bd10      	pop	{r4, pc}
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	e7fc      	b.n	8009cd4 <strncmp+0x1e>
	...

08009cdc <_localeconv_r>:
 8009cdc:	4800      	ldr	r0, [pc, #0]	@ (8009ce0 <_localeconv_r+0x4>)
 8009cde:	4770      	bx	lr
 8009ce0:	20000168 	.word	0x20000168

08009ce4 <_close_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d06      	ldr	r5, [pc, #24]	@ (8009d00 <_close_r+0x1c>)
 8009ce8:	2300      	movs	r3, #0
 8009cea:	4604      	mov	r4, r0
 8009cec:	4608      	mov	r0, r1
 8009cee:	602b      	str	r3, [r5, #0]
 8009cf0:	f7f8 f8d0 	bl	8001e94 <_close>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_close_r+0x1a>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_close_r+0x1a>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	20000db4 	.word	0x20000db4

08009d04 <_lseek_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4d07      	ldr	r5, [pc, #28]	@ (8009d24 <_lseek_r+0x20>)
 8009d08:	4604      	mov	r4, r0
 8009d0a:	4608      	mov	r0, r1
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	2200      	movs	r2, #0
 8009d10:	602a      	str	r2, [r5, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	f7f8 f8e5 	bl	8001ee2 <_lseek>
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d102      	bne.n	8009d22 <_lseek_r+0x1e>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	b103      	cbz	r3, 8009d22 <_lseek_r+0x1e>
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	20000db4 	.word	0x20000db4

08009d28 <_read_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d07      	ldr	r5, [pc, #28]	@ (8009d48 <_read_r+0x20>)
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	4608      	mov	r0, r1
 8009d30:	4611      	mov	r1, r2
 8009d32:	2200      	movs	r2, #0
 8009d34:	602a      	str	r2, [r5, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f7f8 f873 	bl	8001e22 <_read>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_read_r+0x1e>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_read_r+0x1e>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20000db4 	.word	0x20000db4

08009d4c <_write_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	@ (8009d6c <_write_r+0x20>)
 8009d50:	4604      	mov	r4, r0
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f7f8 f87e 	bl	8001e5c <_write>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_write_r+0x1e>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_write_r+0x1e>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20000db4 	.word	0x20000db4

08009d70 <__errno>:
 8009d70:	4b01      	ldr	r3, [pc, #4]	@ (8009d78 <__errno+0x8>)
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20000028 	.word	0x20000028

08009d7c <__libc_init_array>:
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8009db4 <__libc_init_array+0x38>)
 8009d80:	4c0d      	ldr	r4, [pc, #52]	@ (8009db8 <__libc_init_array+0x3c>)
 8009d82:	1b64      	subs	r4, r4, r5
 8009d84:	10a4      	asrs	r4, r4, #2
 8009d86:	2600      	movs	r6, #0
 8009d88:	42a6      	cmp	r6, r4
 8009d8a:	d109      	bne.n	8009da0 <__libc_init_array+0x24>
 8009d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8009dbc <__libc_init_array+0x40>)
 8009d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8009dc0 <__libc_init_array+0x44>)
 8009d90:	f003 fae4 	bl	800d35c <_init>
 8009d94:	1b64      	subs	r4, r4, r5
 8009d96:	10a4      	asrs	r4, r4, #2
 8009d98:	2600      	movs	r6, #0
 8009d9a:	42a6      	cmp	r6, r4
 8009d9c:	d105      	bne.n	8009daa <__libc_init_array+0x2e>
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da4:	4798      	blx	r3
 8009da6:	3601      	adds	r6, #1
 8009da8:	e7ee      	b.n	8009d88 <__libc_init_array+0xc>
 8009daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dae:	4798      	blx	r3
 8009db0:	3601      	adds	r6, #1
 8009db2:	e7f2      	b.n	8009d9a <__libc_init_array+0x1e>
 8009db4:	0800d828 	.word	0x0800d828
 8009db8:	0800d828 	.word	0x0800d828
 8009dbc:	0800d828 	.word	0x0800d828
 8009dc0:	0800d82c 	.word	0x0800d82c

08009dc4 <__retarget_lock_init_recursive>:
 8009dc4:	4770      	bx	lr

08009dc6 <__retarget_lock_acquire_recursive>:
 8009dc6:	4770      	bx	lr

08009dc8 <__retarget_lock_release_recursive>:
 8009dc8:	4770      	bx	lr
	...

08009dcc <nanf>:
 8009dcc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009dd4 <nanf+0x8>
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	7fc00000 	.word	0x7fc00000

08009dd8 <quorem>:
 8009dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	6903      	ldr	r3, [r0, #16]
 8009dde:	690c      	ldr	r4, [r1, #16]
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	4607      	mov	r7, r0
 8009de4:	db7e      	blt.n	8009ee4 <quorem+0x10c>
 8009de6:	3c01      	subs	r4, #1
 8009de8:	f101 0814 	add.w	r8, r1, #20
 8009dec:	00a3      	lsls	r3, r4, #2
 8009dee:	f100 0514 	add.w	r5, r0, #20
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e02:	3301      	adds	r3, #1
 8009e04:	429a      	cmp	r2, r3
 8009e06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e0e:	d32e      	bcc.n	8009e6e <quorem+0x96>
 8009e10:	f04f 0a00 	mov.w	sl, #0
 8009e14:	46c4      	mov	ip, r8
 8009e16:	46ae      	mov	lr, r5
 8009e18:	46d3      	mov	fp, sl
 8009e1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e1e:	b298      	uxth	r0, r3
 8009e20:	fb06 a000 	mla	r0, r6, r0, sl
 8009e24:	0c02      	lsrs	r2, r0, #16
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	fb06 2303 	mla	r3, r6, r3, r2
 8009e2c:	f8de 2000 	ldr.w	r2, [lr]
 8009e30:	b280      	uxth	r0, r0
 8009e32:	b292      	uxth	r2, r2
 8009e34:	1a12      	subs	r2, r2, r0
 8009e36:	445a      	add	r2, fp
 8009e38:	f8de 0000 	ldr.w	r0, [lr]
 8009e3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009e46:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009e4a:	b292      	uxth	r2, r2
 8009e4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e50:	45e1      	cmp	r9, ip
 8009e52:	f84e 2b04 	str.w	r2, [lr], #4
 8009e56:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e5a:	d2de      	bcs.n	8009e1a <quorem+0x42>
 8009e5c:	9b00      	ldr	r3, [sp, #0]
 8009e5e:	58eb      	ldr	r3, [r5, r3]
 8009e60:	b92b      	cbnz	r3, 8009e6e <quorem+0x96>
 8009e62:	9b01      	ldr	r3, [sp, #4]
 8009e64:	3b04      	subs	r3, #4
 8009e66:	429d      	cmp	r5, r3
 8009e68:	461a      	mov	r2, r3
 8009e6a:	d32f      	bcc.n	8009ecc <quorem+0xf4>
 8009e6c:	613c      	str	r4, [r7, #16]
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f001 f9c2 	bl	800b1f8 <__mcmp>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	db25      	blt.n	8009ec4 <quorem+0xec>
 8009e78:	4629      	mov	r1, r5
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e80:	f8d1 c000 	ldr.w	ip, [r1]
 8009e84:	fa1f fe82 	uxth.w	lr, r2
 8009e88:	fa1f f38c 	uxth.w	r3, ip
 8009e8c:	eba3 030e 	sub.w	r3, r3, lr
 8009e90:	4403      	add	r3, r0
 8009e92:	0c12      	lsrs	r2, r2, #16
 8009e94:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e98:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ea2:	45c1      	cmp	r9, r8
 8009ea4:	f841 3b04 	str.w	r3, [r1], #4
 8009ea8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009eac:	d2e6      	bcs.n	8009e7c <quorem+0xa4>
 8009eae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eb6:	b922      	cbnz	r2, 8009ec2 <quorem+0xea>
 8009eb8:	3b04      	subs	r3, #4
 8009eba:	429d      	cmp	r5, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	d30b      	bcc.n	8009ed8 <quorem+0x100>
 8009ec0:	613c      	str	r4, [r7, #16]
 8009ec2:	3601      	adds	r6, #1
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	b003      	add	sp, #12
 8009ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ecc:	6812      	ldr	r2, [r2, #0]
 8009ece:	3b04      	subs	r3, #4
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	d1cb      	bne.n	8009e6c <quorem+0x94>
 8009ed4:	3c01      	subs	r4, #1
 8009ed6:	e7c6      	b.n	8009e66 <quorem+0x8e>
 8009ed8:	6812      	ldr	r2, [r2, #0]
 8009eda:	3b04      	subs	r3, #4
 8009edc:	2a00      	cmp	r2, #0
 8009ede:	d1ef      	bne.n	8009ec0 <quorem+0xe8>
 8009ee0:	3c01      	subs	r4, #1
 8009ee2:	e7ea      	b.n	8009eba <quorem+0xe2>
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	e7ee      	b.n	8009ec6 <quorem+0xee>

08009ee8 <_dtoa_r>:
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	69c7      	ldr	r7, [r0, #28]
 8009eee:	b099      	sub	sp, #100	@ 0x64
 8009ef0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ef4:	ec55 4b10 	vmov	r4, r5, d0
 8009ef8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009efa:	9109      	str	r1, [sp, #36]	@ 0x24
 8009efc:	4683      	mov	fp, r0
 8009efe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f02:	b97f      	cbnz	r7, 8009f24 <_dtoa_r+0x3c>
 8009f04:	2010      	movs	r0, #16
 8009f06:	f000 fdfd 	bl	800ab04 <malloc>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009f10:	b920      	cbnz	r0, 8009f1c <_dtoa_r+0x34>
 8009f12:	4ba7      	ldr	r3, [pc, #668]	@ (800a1b0 <_dtoa_r+0x2c8>)
 8009f14:	21ef      	movs	r1, #239	@ 0xef
 8009f16:	48a7      	ldr	r0, [pc, #668]	@ (800a1b4 <_dtoa_r+0x2cc>)
 8009f18:	f002 fbaa 	bl	800c670 <__assert_func>
 8009f1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009f20:	6007      	str	r7, [r0, #0]
 8009f22:	60c7      	str	r7, [r0, #12]
 8009f24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f28:	6819      	ldr	r1, [r3, #0]
 8009f2a:	b159      	cbz	r1, 8009f44 <_dtoa_r+0x5c>
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	604a      	str	r2, [r1, #4]
 8009f30:	2301      	movs	r3, #1
 8009f32:	4093      	lsls	r3, r2
 8009f34:	608b      	str	r3, [r1, #8]
 8009f36:	4658      	mov	r0, fp
 8009f38:	f000 feda 	bl	800acf0 <_Bfree>
 8009f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	1e2b      	subs	r3, r5, #0
 8009f46:	bfb9      	ittee	lt
 8009f48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009f4c:	9303      	strlt	r3, [sp, #12]
 8009f4e:	2300      	movge	r3, #0
 8009f50:	6033      	strge	r3, [r6, #0]
 8009f52:	9f03      	ldr	r7, [sp, #12]
 8009f54:	4b98      	ldr	r3, [pc, #608]	@ (800a1b8 <_dtoa_r+0x2d0>)
 8009f56:	bfbc      	itt	lt
 8009f58:	2201      	movlt	r2, #1
 8009f5a:	6032      	strlt	r2, [r6, #0]
 8009f5c:	43bb      	bics	r3, r7
 8009f5e:	d112      	bne.n	8009f86 <_dtoa_r+0x9e>
 8009f60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f6c:	4323      	orrs	r3, r4
 8009f6e:	f000 854d 	beq.w	800aa0c <_dtoa_r+0xb24>
 8009f72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a1cc <_dtoa_r+0x2e4>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 854f 	beq.w	800aa1c <_dtoa_r+0xb34>
 8009f7e:	f10a 0303 	add.w	r3, sl, #3
 8009f82:	f000 bd49 	b.w	800aa18 <_dtoa_r+0xb30>
 8009f86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	ec51 0b17 	vmov	r0, r1, d7
 8009f90:	2300      	movs	r3, #0
 8009f92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f96:	f7f6 fdb7 	bl	8000b08 <__aeabi_dcmpeq>
 8009f9a:	4680      	mov	r8, r0
 8009f9c:	b158      	cbz	r0, 8009fb6 <_dtoa_r+0xce>
 8009f9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fa6:	b113      	cbz	r3, 8009fae <_dtoa_r+0xc6>
 8009fa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009faa:	4b84      	ldr	r3, [pc, #528]	@ (800a1bc <_dtoa_r+0x2d4>)
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a1d0 <_dtoa_r+0x2e8>
 8009fb2:	f000 bd33 	b.w	800aa1c <_dtoa_r+0xb34>
 8009fb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009fba:	aa16      	add	r2, sp, #88	@ 0x58
 8009fbc:	a917      	add	r1, sp, #92	@ 0x5c
 8009fbe:	4658      	mov	r0, fp
 8009fc0:	f001 fa3a 	bl	800b438 <__d2b>
 8009fc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009fc8:	4681      	mov	r9, r0
 8009fca:	2e00      	cmp	r6, #0
 8009fcc:	d077      	beq.n	800a0be <_dtoa_r+0x1d6>
 8009fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009fe0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009fe4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009fe8:	4619      	mov	r1, r3
 8009fea:	2200      	movs	r2, #0
 8009fec:	4b74      	ldr	r3, [pc, #464]	@ (800a1c0 <_dtoa_r+0x2d8>)
 8009fee:	f7f6 f96b 	bl	80002c8 <__aeabi_dsub>
 8009ff2:	a369      	add	r3, pc, #420	@ (adr r3, 800a198 <_dtoa_r+0x2b0>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f7f6 fb1e 	bl	8000638 <__aeabi_dmul>
 8009ffc:	a368      	add	r3, pc, #416	@ (adr r3, 800a1a0 <_dtoa_r+0x2b8>)
 8009ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a002:	f7f6 f963 	bl	80002cc <__adddf3>
 800a006:	4604      	mov	r4, r0
 800a008:	4630      	mov	r0, r6
 800a00a:	460d      	mov	r5, r1
 800a00c:	f7f6 faaa 	bl	8000564 <__aeabi_i2d>
 800a010:	a365      	add	r3, pc, #404	@ (adr r3, 800a1a8 <_dtoa_r+0x2c0>)
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	f7f6 fb0f 	bl	8000638 <__aeabi_dmul>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4620      	mov	r0, r4
 800a020:	4629      	mov	r1, r5
 800a022:	f7f6 f953 	bl	80002cc <__adddf3>
 800a026:	4604      	mov	r4, r0
 800a028:	460d      	mov	r5, r1
 800a02a:	f7f6 fdb5 	bl	8000b98 <__aeabi_d2iz>
 800a02e:	2200      	movs	r2, #0
 800a030:	4607      	mov	r7, r0
 800a032:	2300      	movs	r3, #0
 800a034:	4620      	mov	r0, r4
 800a036:	4629      	mov	r1, r5
 800a038:	f7f6 fd70 	bl	8000b1c <__aeabi_dcmplt>
 800a03c:	b140      	cbz	r0, 800a050 <_dtoa_r+0x168>
 800a03e:	4638      	mov	r0, r7
 800a040:	f7f6 fa90 	bl	8000564 <__aeabi_i2d>
 800a044:	4622      	mov	r2, r4
 800a046:	462b      	mov	r3, r5
 800a048:	f7f6 fd5e 	bl	8000b08 <__aeabi_dcmpeq>
 800a04c:	b900      	cbnz	r0, 800a050 <_dtoa_r+0x168>
 800a04e:	3f01      	subs	r7, #1
 800a050:	2f16      	cmp	r7, #22
 800a052:	d851      	bhi.n	800a0f8 <_dtoa_r+0x210>
 800a054:	4b5b      	ldr	r3, [pc, #364]	@ (800a1c4 <_dtoa_r+0x2dc>)
 800a056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a062:	f7f6 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 800a066:	2800      	cmp	r0, #0
 800a068:	d048      	beq.n	800a0fc <_dtoa_r+0x214>
 800a06a:	3f01      	subs	r7, #1
 800a06c:	2300      	movs	r3, #0
 800a06e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a070:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a072:	1b9b      	subs	r3, r3, r6
 800a074:	1e5a      	subs	r2, r3, #1
 800a076:	bf44      	itt	mi
 800a078:	f1c3 0801 	rsbmi	r8, r3, #1
 800a07c:	2300      	movmi	r3, #0
 800a07e:	9208      	str	r2, [sp, #32]
 800a080:	bf54      	ite	pl
 800a082:	f04f 0800 	movpl.w	r8, #0
 800a086:	9308      	strmi	r3, [sp, #32]
 800a088:	2f00      	cmp	r7, #0
 800a08a:	db39      	blt.n	800a100 <_dtoa_r+0x218>
 800a08c:	9b08      	ldr	r3, [sp, #32]
 800a08e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a090:	443b      	add	r3, r7
 800a092:	9308      	str	r3, [sp, #32]
 800a094:	2300      	movs	r3, #0
 800a096:	930a      	str	r3, [sp, #40]	@ 0x28
 800a098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a09a:	2b09      	cmp	r3, #9
 800a09c:	d864      	bhi.n	800a168 <_dtoa_r+0x280>
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	bfc4      	itt	gt
 800a0a2:	3b04      	subgt	r3, #4
 800a0a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a8:	f1a3 0302 	sub.w	r3, r3, #2
 800a0ac:	bfcc      	ite	gt
 800a0ae:	2400      	movgt	r4, #0
 800a0b0:	2401      	movle	r4, #1
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d863      	bhi.n	800a17e <_dtoa_r+0x296>
 800a0b6:	e8df f003 	tbb	[pc, r3]
 800a0ba:	372a      	.short	0x372a
 800a0bc:	5535      	.short	0x5535
 800a0be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a0c2:	441e      	add	r6, r3
 800a0c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	bfc1      	itttt	gt
 800a0cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a0d0:	409f      	lslgt	r7, r3
 800a0d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a0d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a0da:	bfd6      	itet	le
 800a0dc:	f1c3 0320 	rsble	r3, r3, #32
 800a0e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a0e4:	fa04 f003 	lslle.w	r0, r4, r3
 800a0e8:	f7f6 fa2c 	bl	8000544 <__aeabi_ui2d>
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a0f2:	3e01      	subs	r6, #1
 800a0f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a0f6:	e777      	b.n	8009fe8 <_dtoa_r+0x100>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e7b8      	b.n	800a06e <_dtoa_r+0x186>
 800a0fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a0fe:	e7b7      	b.n	800a070 <_dtoa_r+0x188>
 800a100:	427b      	negs	r3, r7
 800a102:	930a      	str	r3, [sp, #40]	@ 0x28
 800a104:	2300      	movs	r3, #0
 800a106:	eba8 0807 	sub.w	r8, r8, r7
 800a10a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a10c:	e7c4      	b.n	800a098 <_dtoa_r+0x1b0>
 800a10e:	2300      	movs	r3, #0
 800a110:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a114:	2b00      	cmp	r3, #0
 800a116:	dc35      	bgt.n	800a184 <_dtoa_r+0x29c>
 800a118:	2301      	movs	r3, #1
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	9307      	str	r3, [sp, #28]
 800a11e:	461a      	mov	r2, r3
 800a120:	920e      	str	r2, [sp, #56]	@ 0x38
 800a122:	e00b      	b.n	800a13c <_dtoa_r+0x254>
 800a124:	2301      	movs	r3, #1
 800a126:	e7f3      	b.n	800a110 <_dtoa_r+0x228>
 800a128:	2300      	movs	r3, #0
 800a12a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a12c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a12e:	18fb      	adds	r3, r7, r3
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	3301      	adds	r3, #1
 800a134:	2b01      	cmp	r3, #1
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	bfb8      	it	lt
 800a13a:	2301      	movlt	r3, #1
 800a13c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a140:	2100      	movs	r1, #0
 800a142:	2204      	movs	r2, #4
 800a144:	f102 0514 	add.w	r5, r2, #20
 800a148:	429d      	cmp	r5, r3
 800a14a:	d91f      	bls.n	800a18c <_dtoa_r+0x2a4>
 800a14c:	6041      	str	r1, [r0, #4]
 800a14e:	4658      	mov	r0, fp
 800a150:	f000 fd8e 	bl	800ac70 <_Balloc>
 800a154:	4682      	mov	sl, r0
 800a156:	2800      	cmp	r0, #0
 800a158:	d13c      	bne.n	800a1d4 <_dtoa_r+0x2ec>
 800a15a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c8 <_dtoa_r+0x2e0>)
 800a15c:	4602      	mov	r2, r0
 800a15e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a162:	e6d8      	b.n	8009f16 <_dtoa_r+0x2e>
 800a164:	2301      	movs	r3, #1
 800a166:	e7e0      	b.n	800a12a <_dtoa_r+0x242>
 800a168:	2401      	movs	r4, #1
 800a16a:	2300      	movs	r3, #0
 800a16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a16e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a170:	f04f 33ff 	mov.w	r3, #4294967295
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	9307      	str	r3, [sp, #28]
 800a178:	2200      	movs	r2, #0
 800a17a:	2312      	movs	r3, #18
 800a17c:	e7d0      	b.n	800a120 <_dtoa_r+0x238>
 800a17e:	2301      	movs	r3, #1
 800a180:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a182:	e7f5      	b.n	800a170 <_dtoa_r+0x288>
 800a184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	9307      	str	r3, [sp, #28]
 800a18a:	e7d7      	b.n	800a13c <_dtoa_r+0x254>
 800a18c:	3101      	adds	r1, #1
 800a18e:	0052      	lsls	r2, r2, #1
 800a190:	e7d8      	b.n	800a144 <_dtoa_r+0x25c>
 800a192:	bf00      	nop
 800a194:	f3af 8000 	nop.w
 800a198:	636f4361 	.word	0x636f4361
 800a19c:	3fd287a7 	.word	0x3fd287a7
 800a1a0:	8b60c8b3 	.word	0x8b60c8b3
 800a1a4:	3fc68a28 	.word	0x3fc68a28
 800a1a8:	509f79fb 	.word	0x509f79fb
 800a1ac:	3fd34413 	.word	0x3fd34413
 800a1b0:	0800d537 	.word	0x0800d537
 800a1b4:	0800d54e 	.word	0x0800d54e
 800a1b8:	7ff00000 	.word	0x7ff00000
 800a1bc:	0800d502 	.word	0x0800d502
 800a1c0:	3ff80000 	.word	0x3ff80000
 800a1c4:	0800d648 	.word	0x0800d648
 800a1c8:	0800d5a6 	.word	0x0800d5a6
 800a1cc:	0800d533 	.word	0x0800d533
 800a1d0:	0800d501 	.word	0x0800d501
 800a1d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1d8:	6018      	str	r0, [r3, #0]
 800a1da:	9b07      	ldr	r3, [sp, #28]
 800a1dc:	2b0e      	cmp	r3, #14
 800a1de:	f200 80a4 	bhi.w	800a32a <_dtoa_r+0x442>
 800a1e2:	2c00      	cmp	r4, #0
 800a1e4:	f000 80a1 	beq.w	800a32a <_dtoa_r+0x442>
 800a1e8:	2f00      	cmp	r7, #0
 800a1ea:	dd33      	ble.n	800a254 <_dtoa_r+0x36c>
 800a1ec:	4bad      	ldr	r3, [pc, #692]	@ (800a4a4 <_dtoa_r+0x5bc>)
 800a1ee:	f007 020f 	and.w	r2, r7, #15
 800a1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1f6:	ed93 7b00 	vldr	d7, [r3]
 800a1fa:	05f8      	lsls	r0, r7, #23
 800a1fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a200:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a204:	d516      	bpl.n	800a234 <_dtoa_r+0x34c>
 800a206:	4ba8      	ldr	r3, [pc, #672]	@ (800a4a8 <_dtoa_r+0x5c0>)
 800a208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a20c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a210:	f7f6 fb3c 	bl	800088c <__aeabi_ddiv>
 800a214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a218:	f004 040f 	and.w	r4, r4, #15
 800a21c:	2603      	movs	r6, #3
 800a21e:	4da2      	ldr	r5, [pc, #648]	@ (800a4a8 <_dtoa_r+0x5c0>)
 800a220:	b954      	cbnz	r4, 800a238 <_dtoa_r+0x350>
 800a222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a22a:	f7f6 fb2f 	bl	800088c <__aeabi_ddiv>
 800a22e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a232:	e028      	b.n	800a286 <_dtoa_r+0x39e>
 800a234:	2602      	movs	r6, #2
 800a236:	e7f2      	b.n	800a21e <_dtoa_r+0x336>
 800a238:	07e1      	lsls	r1, r4, #31
 800a23a:	d508      	bpl.n	800a24e <_dtoa_r+0x366>
 800a23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a240:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a244:	f7f6 f9f8 	bl	8000638 <__aeabi_dmul>
 800a248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a24c:	3601      	adds	r6, #1
 800a24e:	1064      	asrs	r4, r4, #1
 800a250:	3508      	adds	r5, #8
 800a252:	e7e5      	b.n	800a220 <_dtoa_r+0x338>
 800a254:	f000 80d2 	beq.w	800a3fc <_dtoa_r+0x514>
 800a258:	427c      	negs	r4, r7
 800a25a:	4b92      	ldr	r3, [pc, #584]	@ (800a4a4 <_dtoa_r+0x5bc>)
 800a25c:	4d92      	ldr	r5, [pc, #584]	@ (800a4a8 <_dtoa_r+0x5c0>)
 800a25e:	f004 020f 	and.w	r2, r4, #15
 800a262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a26e:	f7f6 f9e3 	bl	8000638 <__aeabi_dmul>
 800a272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a276:	1124      	asrs	r4, r4, #4
 800a278:	2300      	movs	r3, #0
 800a27a:	2602      	movs	r6, #2
 800a27c:	2c00      	cmp	r4, #0
 800a27e:	f040 80b2 	bne.w	800a3e6 <_dtoa_r+0x4fe>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1d3      	bne.n	800a22e <_dtoa_r+0x346>
 800a286:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a288:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 80b7 	beq.w	800a400 <_dtoa_r+0x518>
 800a292:	4b86      	ldr	r3, [pc, #536]	@ (800a4ac <_dtoa_r+0x5c4>)
 800a294:	2200      	movs	r2, #0
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f6 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f000 80ae 	beq.w	800a400 <_dtoa_r+0x518>
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 80aa 	beq.w	800a400 <_dtoa_r+0x518>
 800a2ac:	9b00      	ldr	r3, [sp, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dd37      	ble.n	800a322 <_dtoa_r+0x43a>
 800a2b2:	1e7b      	subs	r3, r7, #1
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4b7d      	ldr	r3, [pc, #500]	@ (800a4b0 <_dtoa_r+0x5c8>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7f6 f9bb 	bl	8000638 <__aeabi_dmul>
 800a2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c6:	9c00      	ldr	r4, [sp, #0]
 800a2c8:	3601      	adds	r6, #1
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7f6 f94a 	bl	8000564 <__aeabi_i2d>
 800a2d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2d4:	f7f6 f9b0 	bl	8000638 <__aeabi_dmul>
 800a2d8:	4b76      	ldr	r3, [pc, #472]	@ (800a4b4 <_dtoa_r+0x5cc>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f7f5 fff6 	bl	80002cc <__adddf3>
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a2e6:	2c00      	cmp	r4, #0
 800a2e8:	f040 808d 	bne.w	800a406 <_dtoa_r+0x51e>
 800a2ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f0:	4b71      	ldr	r3, [pc, #452]	@ (800a4b8 <_dtoa_r+0x5d0>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f7f5 ffe8 	bl	80002c8 <__aeabi_dsub>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a300:	462a      	mov	r2, r5
 800a302:	4633      	mov	r3, r6
 800a304:	f7f6 fc28 	bl	8000b58 <__aeabi_dcmpgt>
 800a308:	2800      	cmp	r0, #0
 800a30a:	f040 828b 	bne.w	800a824 <_dtoa_r+0x93c>
 800a30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a312:	462a      	mov	r2, r5
 800a314:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a318:	f7f6 fc00 	bl	8000b1c <__aeabi_dcmplt>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	f040 8128 	bne.w	800a572 <_dtoa_r+0x68a>
 800a322:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a326:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a32a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f2c0 815a 	blt.w	800a5e6 <_dtoa_r+0x6fe>
 800a332:	2f0e      	cmp	r7, #14
 800a334:	f300 8157 	bgt.w	800a5e6 <_dtoa_r+0x6fe>
 800a338:	4b5a      	ldr	r3, [pc, #360]	@ (800a4a4 <_dtoa_r+0x5bc>)
 800a33a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a33e:	ed93 7b00 	vldr	d7, [r3]
 800a342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a344:	2b00      	cmp	r3, #0
 800a346:	ed8d 7b00 	vstr	d7, [sp]
 800a34a:	da03      	bge.n	800a354 <_dtoa_r+0x46c>
 800a34c:	9b07      	ldr	r3, [sp, #28]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f340 8101 	ble.w	800a556 <_dtoa_r+0x66e>
 800a354:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a358:	4656      	mov	r6, sl
 800a35a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a35e:	4620      	mov	r0, r4
 800a360:	4629      	mov	r1, r5
 800a362:	f7f6 fa93 	bl	800088c <__aeabi_ddiv>
 800a366:	f7f6 fc17 	bl	8000b98 <__aeabi_d2iz>
 800a36a:	4680      	mov	r8, r0
 800a36c:	f7f6 f8fa 	bl	8000564 <__aeabi_i2d>
 800a370:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a374:	f7f6 f960 	bl	8000638 <__aeabi_dmul>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	4620      	mov	r0, r4
 800a37e:	4629      	mov	r1, r5
 800a380:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a384:	f7f5 ffa0 	bl	80002c8 <__aeabi_dsub>
 800a388:	f806 4b01 	strb.w	r4, [r6], #1
 800a38c:	9d07      	ldr	r5, [sp, #28]
 800a38e:	eba6 040a 	sub.w	r4, r6, sl
 800a392:	42a5      	cmp	r5, r4
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	f040 8117 	bne.w	800a5ca <_dtoa_r+0x6e2>
 800a39c:	f7f5 ff96 	bl	80002cc <__adddf3>
 800a3a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	460d      	mov	r5, r1
 800a3a8:	f7f6 fbd6 	bl	8000b58 <__aeabi_dcmpgt>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f040 80f9 	bne.w	800a5a4 <_dtoa_r+0x6bc>
 800a3b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	f7f6 fba5 	bl	8000b08 <__aeabi_dcmpeq>
 800a3be:	b118      	cbz	r0, 800a3c8 <_dtoa_r+0x4e0>
 800a3c0:	f018 0f01 	tst.w	r8, #1
 800a3c4:	f040 80ee 	bne.w	800a5a4 <_dtoa_r+0x6bc>
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	4658      	mov	r0, fp
 800a3cc:	f000 fc90 	bl	800acf0 <_Bfree>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	7033      	strb	r3, [r6, #0]
 800a3d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3d6:	3701      	adds	r7, #1
 800a3d8:	601f      	str	r7, [r3, #0]
 800a3da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 831d 	beq.w	800aa1c <_dtoa_r+0xb34>
 800a3e2:	601e      	str	r6, [r3, #0]
 800a3e4:	e31a      	b.n	800aa1c <_dtoa_r+0xb34>
 800a3e6:	07e2      	lsls	r2, r4, #31
 800a3e8:	d505      	bpl.n	800a3f6 <_dtoa_r+0x50e>
 800a3ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3ee:	f7f6 f923 	bl	8000638 <__aeabi_dmul>
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	1064      	asrs	r4, r4, #1
 800a3f8:	3508      	adds	r5, #8
 800a3fa:	e73f      	b.n	800a27c <_dtoa_r+0x394>
 800a3fc:	2602      	movs	r6, #2
 800a3fe:	e742      	b.n	800a286 <_dtoa_r+0x39e>
 800a400:	9c07      	ldr	r4, [sp, #28]
 800a402:	9704      	str	r7, [sp, #16]
 800a404:	e761      	b.n	800a2ca <_dtoa_r+0x3e2>
 800a406:	4b27      	ldr	r3, [pc, #156]	@ (800a4a4 <_dtoa_r+0x5bc>)
 800a408:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a40a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a40e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a412:	4454      	add	r4, sl
 800a414:	2900      	cmp	r1, #0
 800a416:	d053      	beq.n	800a4c0 <_dtoa_r+0x5d8>
 800a418:	4928      	ldr	r1, [pc, #160]	@ (800a4bc <_dtoa_r+0x5d4>)
 800a41a:	2000      	movs	r0, #0
 800a41c:	f7f6 fa36 	bl	800088c <__aeabi_ddiv>
 800a420:	4633      	mov	r3, r6
 800a422:	462a      	mov	r2, r5
 800a424:	f7f5 ff50 	bl	80002c8 <__aeabi_dsub>
 800a428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a42c:	4656      	mov	r6, sl
 800a42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a432:	f7f6 fbb1 	bl	8000b98 <__aeabi_d2iz>
 800a436:	4605      	mov	r5, r0
 800a438:	f7f6 f894 	bl	8000564 <__aeabi_i2d>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a444:	f7f5 ff40 	bl	80002c8 <__aeabi_dsub>
 800a448:	3530      	adds	r5, #48	@ 0x30
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a452:	f806 5b01 	strb.w	r5, [r6], #1
 800a456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a45a:	f7f6 fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d171      	bne.n	800a546 <_dtoa_r+0x65e>
 800a462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a466:	4911      	ldr	r1, [pc, #68]	@ (800a4ac <_dtoa_r+0x5c4>)
 800a468:	2000      	movs	r0, #0
 800a46a:	f7f5 ff2d 	bl	80002c8 <__aeabi_dsub>
 800a46e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a472:	f7f6 fb53 	bl	8000b1c <__aeabi_dcmplt>
 800a476:	2800      	cmp	r0, #0
 800a478:	f040 8095 	bne.w	800a5a6 <_dtoa_r+0x6be>
 800a47c:	42a6      	cmp	r6, r4
 800a47e:	f43f af50 	beq.w	800a322 <_dtoa_r+0x43a>
 800a482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a486:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b0 <_dtoa_r+0x5c8>)
 800a488:	2200      	movs	r2, #0
 800a48a:	f7f6 f8d5 	bl	8000638 <__aeabi_dmul>
 800a48e:	4b08      	ldr	r3, [pc, #32]	@ (800a4b0 <_dtoa_r+0x5c8>)
 800a490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a494:	2200      	movs	r2, #0
 800a496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a49a:	f7f6 f8cd 	bl	8000638 <__aeabi_dmul>
 800a49e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a2:	e7c4      	b.n	800a42e <_dtoa_r+0x546>
 800a4a4:	0800d648 	.word	0x0800d648
 800a4a8:	0800d620 	.word	0x0800d620
 800a4ac:	3ff00000 	.word	0x3ff00000
 800a4b0:	40240000 	.word	0x40240000
 800a4b4:	401c0000 	.word	0x401c0000
 800a4b8:	40140000 	.word	0x40140000
 800a4bc:	3fe00000 	.word	0x3fe00000
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f7f6 f8b8 	bl	8000638 <__aeabi_dmul>
 800a4c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a4cc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a4ce:	4656      	mov	r6, sl
 800a4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4d4:	f7f6 fb60 	bl	8000b98 <__aeabi_d2iz>
 800a4d8:	4605      	mov	r5, r0
 800a4da:	f7f6 f843 	bl	8000564 <__aeabi_i2d>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4e6:	f7f5 feef 	bl	80002c8 <__aeabi_dsub>
 800a4ea:	3530      	adds	r5, #48	@ 0x30
 800a4ec:	f806 5b01 	strb.w	r5, [r6], #1
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	42a6      	cmp	r6, r4
 800a4f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4fa:	f04f 0200 	mov.w	r2, #0
 800a4fe:	d124      	bne.n	800a54a <_dtoa_r+0x662>
 800a500:	4bac      	ldr	r3, [pc, #688]	@ (800a7b4 <_dtoa_r+0x8cc>)
 800a502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a506:	f7f5 fee1 	bl	80002cc <__adddf3>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a512:	f7f6 fb21 	bl	8000b58 <__aeabi_dcmpgt>
 800a516:	2800      	cmp	r0, #0
 800a518:	d145      	bne.n	800a5a6 <_dtoa_r+0x6be>
 800a51a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a51e:	49a5      	ldr	r1, [pc, #660]	@ (800a7b4 <_dtoa_r+0x8cc>)
 800a520:	2000      	movs	r0, #0
 800a522:	f7f5 fed1 	bl	80002c8 <__aeabi_dsub>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a52e:	f7f6 faf5 	bl	8000b1c <__aeabi_dcmplt>
 800a532:	2800      	cmp	r0, #0
 800a534:	f43f aef5 	beq.w	800a322 <_dtoa_r+0x43a>
 800a538:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a53a:	1e73      	subs	r3, r6, #1
 800a53c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a53e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a542:	2b30      	cmp	r3, #48	@ 0x30
 800a544:	d0f8      	beq.n	800a538 <_dtoa_r+0x650>
 800a546:	9f04      	ldr	r7, [sp, #16]
 800a548:	e73e      	b.n	800a3c8 <_dtoa_r+0x4e0>
 800a54a:	4b9b      	ldr	r3, [pc, #620]	@ (800a7b8 <_dtoa_r+0x8d0>)
 800a54c:	f7f6 f874 	bl	8000638 <__aeabi_dmul>
 800a550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a554:	e7bc      	b.n	800a4d0 <_dtoa_r+0x5e8>
 800a556:	d10c      	bne.n	800a572 <_dtoa_r+0x68a>
 800a558:	4b98      	ldr	r3, [pc, #608]	@ (800a7bc <_dtoa_r+0x8d4>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a560:	f7f6 f86a 	bl	8000638 <__aeabi_dmul>
 800a564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a568:	f7f6 faec 	bl	8000b44 <__aeabi_dcmpge>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f000 8157 	beq.w	800a820 <_dtoa_r+0x938>
 800a572:	2400      	movs	r4, #0
 800a574:	4625      	mov	r5, r4
 800a576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a578:	43db      	mvns	r3, r3
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	4656      	mov	r6, sl
 800a57e:	2700      	movs	r7, #0
 800a580:	4621      	mov	r1, r4
 800a582:	4658      	mov	r0, fp
 800a584:	f000 fbb4 	bl	800acf0 <_Bfree>
 800a588:	2d00      	cmp	r5, #0
 800a58a:	d0dc      	beq.n	800a546 <_dtoa_r+0x65e>
 800a58c:	b12f      	cbz	r7, 800a59a <_dtoa_r+0x6b2>
 800a58e:	42af      	cmp	r7, r5
 800a590:	d003      	beq.n	800a59a <_dtoa_r+0x6b2>
 800a592:	4639      	mov	r1, r7
 800a594:	4658      	mov	r0, fp
 800a596:	f000 fbab 	bl	800acf0 <_Bfree>
 800a59a:	4629      	mov	r1, r5
 800a59c:	4658      	mov	r0, fp
 800a59e:	f000 fba7 	bl	800acf0 <_Bfree>
 800a5a2:	e7d0      	b.n	800a546 <_dtoa_r+0x65e>
 800a5a4:	9704      	str	r7, [sp, #16]
 800a5a6:	4633      	mov	r3, r6
 800a5a8:	461e      	mov	r6, r3
 800a5aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5ae:	2a39      	cmp	r2, #57	@ 0x39
 800a5b0:	d107      	bne.n	800a5c2 <_dtoa_r+0x6da>
 800a5b2:	459a      	cmp	sl, r3
 800a5b4:	d1f8      	bne.n	800a5a8 <_dtoa_r+0x6c0>
 800a5b6:	9a04      	ldr	r2, [sp, #16]
 800a5b8:	3201      	adds	r2, #1
 800a5ba:	9204      	str	r2, [sp, #16]
 800a5bc:	2230      	movs	r2, #48	@ 0x30
 800a5be:	f88a 2000 	strb.w	r2, [sl]
 800a5c2:	781a      	ldrb	r2, [r3, #0]
 800a5c4:	3201      	adds	r2, #1
 800a5c6:	701a      	strb	r2, [r3, #0]
 800a5c8:	e7bd      	b.n	800a546 <_dtoa_r+0x65e>
 800a5ca:	4b7b      	ldr	r3, [pc, #492]	@ (800a7b8 <_dtoa_r+0x8d0>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f7f6 f833 	bl	8000638 <__aeabi_dmul>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	460d      	mov	r5, r1
 800a5da:	f7f6 fa95 	bl	8000b08 <__aeabi_dcmpeq>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	f43f aebb 	beq.w	800a35a <_dtoa_r+0x472>
 800a5e4:	e6f0      	b.n	800a3c8 <_dtoa_r+0x4e0>
 800a5e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	f000 80db 	beq.w	800a7a4 <_dtoa_r+0x8bc>
 800a5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5f0:	2a01      	cmp	r2, #1
 800a5f2:	f300 80bf 	bgt.w	800a774 <_dtoa_r+0x88c>
 800a5f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	f000 80b7 	beq.w	800a76c <_dtoa_r+0x884>
 800a5fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a602:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a604:	4646      	mov	r6, r8
 800a606:	9a08      	ldr	r2, [sp, #32]
 800a608:	2101      	movs	r1, #1
 800a60a:	441a      	add	r2, r3
 800a60c:	4658      	mov	r0, fp
 800a60e:	4498      	add	r8, r3
 800a610:	9208      	str	r2, [sp, #32]
 800a612:	f000 fc6b 	bl	800aeec <__i2b>
 800a616:	4605      	mov	r5, r0
 800a618:	b15e      	cbz	r6, 800a632 <_dtoa_r+0x74a>
 800a61a:	9b08      	ldr	r3, [sp, #32]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	dd08      	ble.n	800a632 <_dtoa_r+0x74a>
 800a620:	42b3      	cmp	r3, r6
 800a622:	9a08      	ldr	r2, [sp, #32]
 800a624:	bfa8      	it	ge
 800a626:	4633      	movge	r3, r6
 800a628:	eba8 0803 	sub.w	r8, r8, r3
 800a62c:	1af6      	subs	r6, r6, r3
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	9308      	str	r3, [sp, #32]
 800a632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a634:	b1f3      	cbz	r3, 800a674 <_dtoa_r+0x78c>
 800a636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 80b7 	beq.w	800a7ac <_dtoa_r+0x8c4>
 800a63e:	b18c      	cbz	r4, 800a664 <_dtoa_r+0x77c>
 800a640:	4629      	mov	r1, r5
 800a642:	4622      	mov	r2, r4
 800a644:	4658      	mov	r0, fp
 800a646:	f000 fd11 	bl	800b06c <__pow5mult>
 800a64a:	464a      	mov	r2, r9
 800a64c:	4601      	mov	r1, r0
 800a64e:	4605      	mov	r5, r0
 800a650:	4658      	mov	r0, fp
 800a652:	f000 fc61 	bl	800af18 <__multiply>
 800a656:	4649      	mov	r1, r9
 800a658:	9004      	str	r0, [sp, #16]
 800a65a:	4658      	mov	r0, fp
 800a65c:	f000 fb48 	bl	800acf0 <_Bfree>
 800a660:	9b04      	ldr	r3, [sp, #16]
 800a662:	4699      	mov	r9, r3
 800a664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a666:	1b1a      	subs	r2, r3, r4
 800a668:	d004      	beq.n	800a674 <_dtoa_r+0x78c>
 800a66a:	4649      	mov	r1, r9
 800a66c:	4658      	mov	r0, fp
 800a66e:	f000 fcfd 	bl	800b06c <__pow5mult>
 800a672:	4681      	mov	r9, r0
 800a674:	2101      	movs	r1, #1
 800a676:	4658      	mov	r0, fp
 800a678:	f000 fc38 	bl	800aeec <__i2b>
 800a67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a67e:	4604      	mov	r4, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 81cf 	beq.w	800aa24 <_dtoa_r+0xb3c>
 800a686:	461a      	mov	r2, r3
 800a688:	4601      	mov	r1, r0
 800a68a:	4658      	mov	r0, fp
 800a68c:	f000 fcee 	bl	800b06c <__pow5mult>
 800a690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a692:	2b01      	cmp	r3, #1
 800a694:	4604      	mov	r4, r0
 800a696:	f300 8095 	bgt.w	800a7c4 <_dtoa_r+0x8dc>
 800a69a:	9b02      	ldr	r3, [sp, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f040 8087 	bne.w	800a7b0 <_dtoa_r+0x8c8>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f040 8089 	bne.w	800a7c0 <_dtoa_r+0x8d8>
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6b4:	0d1b      	lsrs	r3, r3, #20
 800a6b6:	051b      	lsls	r3, r3, #20
 800a6b8:	b12b      	cbz	r3, 800a6c6 <_dtoa_r+0x7de>
 800a6ba:	9b08      	ldr	r3, [sp, #32]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	9308      	str	r3, [sp, #32]
 800a6c0:	f108 0801 	add.w	r8, r8, #1
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 81b0 	beq.w	800aa30 <_dtoa_r+0xb48>
 800a6d0:	6923      	ldr	r3, [r4, #16]
 800a6d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6d6:	6918      	ldr	r0, [r3, #16]
 800a6d8:	f000 fbbc 	bl	800ae54 <__hi0bits>
 800a6dc:	f1c0 0020 	rsb	r0, r0, #32
 800a6e0:	9b08      	ldr	r3, [sp, #32]
 800a6e2:	4418      	add	r0, r3
 800a6e4:	f010 001f 	ands.w	r0, r0, #31
 800a6e8:	d077      	beq.n	800a7da <_dtoa_r+0x8f2>
 800a6ea:	f1c0 0320 	rsb	r3, r0, #32
 800a6ee:	2b04      	cmp	r3, #4
 800a6f0:	dd6b      	ble.n	800a7ca <_dtoa_r+0x8e2>
 800a6f2:	9b08      	ldr	r3, [sp, #32]
 800a6f4:	f1c0 001c 	rsb	r0, r0, #28
 800a6f8:	4403      	add	r3, r0
 800a6fa:	4480      	add	r8, r0
 800a6fc:	4406      	add	r6, r0
 800a6fe:	9308      	str	r3, [sp, #32]
 800a700:	f1b8 0f00 	cmp.w	r8, #0
 800a704:	dd05      	ble.n	800a712 <_dtoa_r+0x82a>
 800a706:	4649      	mov	r1, r9
 800a708:	4642      	mov	r2, r8
 800a70a:	4658      	mov	r0, fp
 800a70c:	f000 fd08 	bl	800b120 <__lshift>
 800a710:	4681      	mov	r9, r0
 800a712:	9b08      	ldr	r3, [sp, #32]
 800a714:	2b00      	cmp	r3, #0
 800a716:	dd05      	ble.n	800a724 <_dtoa_r+0x83c>
 800a718:	4621      	mov	r1, r4
 800a71a:	461a      	mov	r2, r3
 800a71c:	4658      	mov	r0, fp
 800a71e:	f000 fcff 	bl	800b120 <__lshift>
 800a722:	4604      	mov	r4, r0
 800a724:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a726:	2b00      	cmp	r3, #0
 800a728:	d059      	beq.n	800a7de <_dtoa_r+0x8f6>
 800a72a:	4621      	mov	r1, r4
 800a72c:	4648      	mov	r0, r9
 800a72e:	f000 fd63 	bl	800b1f8 <__mcmp>
 800a732:	2800      	cmp	r0, #0
 800a734:	da53      	bge.n	800a7de <_dtoa_r+0x8f6>
 800a736:	1e7b      	subs	r3, r7, #1
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	4649      	mov	r1, r9
 800a73c:	2300      	movs	r3, #0
 800a73e:	220a      	movs	r2, #10
 800a740:	4658      	mov	r0, fp
 800a742:	f000 faf7 	bl	800ad34 <__multadd>
 800a746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a748:	4681      	mov	r9, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 8172 	beq.w	800aa34 <_dtoa_r+0xb4c>
 800a750:	2300      	movs	r3, #0
 800a752:	4629      	mov	r1, r5
 800a754:	220a      	movs	r2, #10
 800a756:	4658      	mov	r0, fp
 800a758:	f000 faec 	bl	800ad34 <__multadd>
 800a75c:	9b00      	ldr	r3, [sp, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	4605      	mov	r5, r0
 800a762:	dc67      	bgt.n	800a834 <_dtoa_r+0x94c>
 800a764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a766:	2b02      	cmp	r3, #2
 800a768:	dc41      	bgt.n	800a7ee <_dtoa_r+0x906>
 800a76a:	e063      	b.n	800a834 <_dtoa_r+0x94c>
 800a76c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a76e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a772:	e746      	b.n	800a602 <_dtoa_r+0x71a>
 800a774:	9b07      	ldr	r3, [sp, #28]
 800a776:	1e5c      	subs	r4, r3, #1
 800a778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	bfbf      	itttt	lt
 800a77e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a780:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a782:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a784:	1ae3      	sublt	r3, r4, r3
 800a786:	bfb4      	ite	lt
 800a788:	18d2      	addlt	r2, r2, r3
 800a78a:	1b1c      	subge	r4, r3, r4
 800a78c:	9b07      	ldr	r3, [sp, #28]
 800a78e:	bfbc      	itt	lt
 800a790:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a792:	2400      	movlt	r4, #0
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfb5      	itete	lt
 800a798:	eba8 0603 	sublt.w	r6, r8, r3
 800a79c:	9b07      	ldrge	r3, [sp, #28]
 800a79e:	2300      	movlt	r3, #0
 800a7a0:	4646      	movge	r6, r8
 800a7a2:	e730      	b.n	800a606 <_dtoa_r+0x71e>
 800a7a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a7a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a7a8:	4646      	mov	r6, r8
 800a7aa:	e735      	b.n	800a618 <_dtoa_r+0x730>
 800a7ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7ae:	e75c      	b.n	800a66a <_dtoa_r+0x782>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e788      	b.n	800a6c6 <_dtoa_r+0x7de>
 800a7b4:	3fe00000 	.word	0x3fe00000
 800a7b8:	40240000 	.word	0x40240000
 800a7bc:	40140000 	.word	0x40140000
 800a7c0:	9b02      	ldr	r3, [sp, #8]
 800a7c2:	e780      	b.n	800a6c6 <_dtoa_r+0x7de>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7c8:	e782      	b.n	800a6d0 <_dtoa_r+0x7e8>
 800a7ca:	d099      	beq.n	800a700 <_dtoa_r+0x818>
 800a7cc:	9a08      	ldr	r2, [sp, #32]
 800a7ce:	331c      	adds	r3, #28
 800a7d0:	441a      	add	r2, r3
 800a7d2:	4498      	add	r8, r3
 800a7d4:	441e      	add	r6, r3
 800a7d6:	9208      	str	r2, [sp, #32]
 800a7d8:	e792      	b.n	800a700 <_dtoa_r+0x818>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	e7f6      	b.n	800a7cc <_dtoa_r+0x8e4>
 800a7de:	9b07      	ldr	r3, [sp, #28]
 800a7e0:	9704      	str	r7, [sp, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	dc20      	bgt.n	800a828 <_dtoa_r+0x940>
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	dd1e      	ble.n	800a82c <_dtoa_r+0x944>
 800a7ee:	9b00      	ldr	r3, [sp, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f47f aec0 	bne.w	800a576 <_dtoa_r+0x68e>
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	2205      	movs	r2, #5
 800a7fa:	4658      	mov	r0, fp
 800a7fc:	f000 fa9a 	bl	800ad34 <__multadd>
 800a800:	4601      	mov	r1, r0
 800a802:	4604      	mov	r4, r0
 800a804:	4648      	mov	r0, r9
 800a806:	f000 fcf7 	bl	800b1f8 <__mcmp>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f77f aeb3 	ble.w	800a576 <_dtoa_r+0x68e>
 800a810:	4656      	mov	r6, sl
 800a812:	2331      	movs	r3, #49	@ 0x31
 800a814:	f806 3b01 	strb.w	r3, [r6], #1
 800a818:	9b04      	ldr	r3, [sp, #16]
 800a81a:	3301      	adds	r3, #1
 800a81c:	9304      	str	r3, [sp, #16]
 800a81e:	e6ae      	b.n	800a57e <_dtoa_r+0x696>
 800a820:	9c07      	ldr	r4, [sp, #28]
 800a822:	9704      	str	r7, [sp, #16]
 800a824:	4625      	mov	r5, r4
 800a826:	e7f3      	b.n	800a810 <_dtoa_r+0x928>
 800a828:	9b07      	ldr	r3, [sp, #28]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 8104 	beq.w	800aa3c <_dtoa_r+0xb54>
 800a834:	2e00      	cmp	r6, #0
 800a836:	dd05      	ble.n	800a844 <_dtoa_r+0x95c>
 800a838:	4629      	mov	r1, r5
 800a83a:	4632      	mov	r2, r6
 800a83c:	4658      	mov	r0, fp
 800a83e:	f000 fc6f 	bl	800b120 <__lshift>
 800a842:	4605      	mov	r5, r0
 800a844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a846:	2b00      	cmp	r3, #0
 800a848:	d05a      	beq.n	800a900 <_dtoa_r+0xa18>
 800a84a:	6869      	ldr	r1, [r5, #4]
 800a84c:	4658      	mov	r0, fp
 800a84e:	f000 fa0f 	bl	800ac70 <_Balloc>
 800a852:	4606      	mov	r6, r0
 800a854:	b928      	cbnz	r0, 800a862 <_dtoa_r+0x97a>
 800a856:	4b84      	ldr	r3, [pc, #528]	@ (800aa68 <_dtoa_r+0xb80>)
 800a858:	4602      	mov	r2, r0
 800a85a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a85e:	f7ff bb5a 	b.w	8009f16 <_dtoa_r+0x2e>
 800a862:	692a      	ldr	r2, [r5, #16]
 800a864:	3202      	adds	r2, #2
 800a866:	0092      	lsls	r2, r2, #2
 800a868:	f105 010c 	add.w	r1, r5, #12
 800a86c:	300c      	adds	r0, #12
 800a86e:	f001 fee7 	bl	800c640 <memcpy>
 800a872:	2201      	movs	r2, #1
 800a874:	4631      	mov	r1, r6
 800a876:	4658      	mov	r0, fp
 800a878:	f000 fc52 	bl	800b120 <__lshift>
 800a87c:	f10a 0301 	add.w	r3, sl, #1
 800a880:	9307      	str	r3, [sp, #28]
 800a882:	9b00      	ldr	r3, [sp, #0]
 800a884:	4453      	add	r3, sl
 800a886:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a888:	9b02      	ldr	r3, [sp, #8]
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	462f      	mov	r7, r5
 800a890:	930a      	str	r3, [sp, #40]	@ 0x28
 800a892:	4605      	mov	r5, r0
 800a894:	9b07      	ldr	r3, [sp, #28]
 800a896:	4621      	mov	r1, r4
 800a898:	3b01      	subs	r3, #1
 800a89a:	4648      	mov	r0, r9
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	f7ff fa9b 	bl	8009dd8 <quorem>
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	9002      	str	r0, [sp, #8]
 800a8a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a8aa:	4648      	mov	r0, r9
 800a8ac:	f000 fca4 	bl	800b1f8 <__mcmp>
 800a8b0:	462a      	mov	r2, r5
 800a8b2:	9008      	str	r0, [sp, #32]
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4658      	mov	r0, fp
 800a8b8:	f000 fcba 	bl	800b230 <__mdiff>
 800a8bc:	68c2      	ldr	r2, [r0, #12]
 800a8be:	4606      	mov	r6, r0
 800a8c0:	bb02      	cbnz	r2, 800a904 <_dtoa_r+0xa1c>
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	4648      	mov	r0, r9
 800a8c6:	f000 fc97 	bl	800b1f8 <__mcmp>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4658      	mov	r0, fp
 800a8d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8d2:	f000 fa0d 	bl	800acf0 <_Bfree>
 800a8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8da:	9e07      	ldr	r6, [sp, #28]
 800a8dc:	ea43 0102 	orr.w	r1, r3, r2
 800a8e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8e2:	4319      	orrs	r1, r3
 800a8e4:	d110      	bne.n	800a908 <_dtoa_r+0xa20>
 800a8e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8ea:	d029      	beq.n	800a940 <_dtoa_r+0xa58>
 800a8ec:	9b08      	ldr	r3, [sp, #32]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	dd02      	ble.n	800a8f8 <_dtoa_r+0xa10>
 800a8f2:	9b02      	ldr	r3, [sp, #8]
 800a8f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a8f8:	9b00      	ldr	r3, [sp, #0]
 800a8fa:	f883 8000 	strb.w	r8, [r3]
 800a8fe:	e63f      	b.n	800a580 <_dtoa_r+0x698>
 800a900:	4628      	mov	r0, r5
 800a902:	e7bb      	b.n	800a87c <_dtoa_r+0x994>
 800a904:	2201      	movs	r2, #1
 800a906:	e7e1      	b.n	800a8cc <_dtoa_r+0x9e4>
 800a908:	9b08      	ldr	r3, [sp, #32]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	db04      	blt.n	800a918 <_dtoa_r+0xa30>
 800a90e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a910:	430b      	orrs	r3, r1
 800a912:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a914:	430b      	orrs	r3, r1
 800a916:	d120      	bne.n	800a95a <_dtoa_r+0xa72>
 800a918:	2a00      	cmp	r2, #0
 800a91a:	dded      	ble.n	800a8f8 <_dtoa_r+0xa10>
 800a91c:	4649      	mov	r1, r9
 800a91e:	2201      	movs	r2, #1
 800a920:	4658      	mov	r0, fp
 800a922:	f000 fbfd 	bl	800b120 <__lshift>
 800a926:	4621      	mov	r1, r4
 800a928:	4681      	mov	r9, r0
 800a92a:	f000 fc65 	bl	800b1f8 <__mcmp>
 800a92e:	2800      	cmp	r0, #0
 800a930:	dc03      	bgt.n	800a93a <_dtoa_r+0xa52>
 800a932:	d1e1      	bne.n	800a8f8 <_dtoa_r+0xa10>
 800a934:	f018 0f01 	tst.w	r8, #1
 800a938:	d0de      	beq.n	800a8f8 <_dtoa_r+0xa10>
 800a93a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a93e:	d1d8      	bne.n	800a8f2 <_dtoa_r+0xa0a>
 800a940:	9a00      	ldr	r2, [sp, #0]
 800a942:	2339      	movs	r3, #57	@ 0x39
 800a944:	7013      	strb	r3, [r2, #0]
 800a946:	4633      	mov	r3, r6
 800a948:	461e      	mov	r6, r3
 800a94a:	3b01      	subs	r3, #1
 800a94c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a950:	2a39      	cmp	r2, #57	@ 0x39
 800a952:	d052      	beq.n	800a9fa <_dtoa_r+0xb12>
 800a954:	3201      	adds	r2, #1
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e612      	b.n	800a580 <_dtoa_r+0x698>
 800a95a:	2a00      	cmp	r2, #0
 800a95c:	dd07      	ble.n	800a96e <_dtoa_r+0xa86>
 800a95e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a962:	d0ed      	beq.n	800a940 <_dtoa_r+0xa58>
 800a964:	9a00      	ldr	r2, [sp, #0]
 800a966:	f108 0301 	add.w	r3, r8, #1
 800a96a:	7013      	strb	r3, [r2, #0]
 800a96c:	e608      	b.n	800a580 <_dtoa_r+0x698>
 800a96e:	9b07      	ldr	r3, [sp, #28]
 800a970:	9a07      	ldr	r2, [sp, #28]
 800a972:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a978:	4293      	cmp	r3, r2
 800a97a:	d028      	beq.n	800a9ce <_dtoa_r+0xae6>
 800a97c:	4649      	mov	r1, r9
 800a97e:	2300      	movs	r3, #0
 800a980:	220a      	movs	r2, #10
 800a982:	4658      	mov	r0, fp
 800a984:	f000 f9d6 	bl	800ad34 <__multadd>
 800a988:	42af      	cmp	r7, r5
 800a98a:	4681      	mov	r9, r0
 800a98c:	f04f 0300 	mov.w	r3, #0
 800a990:	f04f 020a 	mov.w	r2, #10
 800a994:	4639      	mov	r1, r7
 800a996:	4658      	mov	r0, fp
 800a998:	d107      	bne.n	800a9aa <_dtoa_r+0xac2>
 800a99a:	f000 f9cb 	bl	800ad34 <__multadd>
 800a99e:	4607      	mov	r7, r0
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	9b07      	ldr	r3, [sp, #28]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	9307      	str	r3, [sp, #28]
 800a9a8:	e774      	b.n	800a894 <_dtoa_r+0x9ac>
 800a9aa:	f000 f9c3 	bl	800ad34 <__multadd>
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	220a      	movs	r2, #10
 800a9b6:	4658      	mov	r0, fp
 800a9b8:	f000 f9bc 	bl	800ad34 <__multadd>
 800a9bc:	4605      	mov	r5, r0
 800a9be:	e7f0      	b.n	800a9a2 <_dtoa_r+0xaba>
 800a9c0:	9b00      	ldr	r3, [sp, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	bfcc      	ite	gt
 800a9c6:	461e      	movgt	r6, r3
 800a9c8:	2601      	movle	r6, #1
 800a9ca:	4456      	add	r6, sl
 800a9cc:	2700      	movs	r7, #0
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	4658      	mov	r0, fp
 800a9d4:	f000 fba4 	bl	800b120 <__lshift>
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4681      	mov	r9, r0
 800a9dc:	f000 fc0c 	bl	800b1f8 <__mcmp>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	dcb0      	bgt.n	800a946 <_dtoa_r+0xa5e>
 800a9e4:	d102      	bne.n	800a9ec <_dtoa_r+0xb04>
 800a9e6:	f018 0f01 	tst.w	r8, #1
 800a9ea:	d1ac      	bne.n	800a946 <_dtoa_r+0xa5e>
 800a9ec:	4633      	mov	r3, r6
 800a9ee:	461e      	mov	r6, r3
 800a9f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9f4:	2a30      	cmp	r2, #48	@ 0x30
 800a9f6:	d0fa      	beq.n	800a9ee <_dtoa_r+0xb06>
 800a9f8:	e5c2      	b.n	800a580 <_dtoa_r+0x698>
 800a9fa:	459a      	cmp	sl, r3
 800a9fc:	d1a4      	bne.n	800a948 <_dtoa_r+0xa60>
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	3301      	adds	r3, #1
 800aa02:	9304      	str	r3, [sp, #16]
 800aa04:	2331      	movs	r3, #49	@ 0x31
 800aa06:	f88a 3000 	strb.w	r3, [sl]
 800aa0a:	e5b9      	b.n	800a580 <_dtoa_r+0x698>
 800aa0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aa6c <_dtoa_r+0xb84>
 800aa12:	b11b      	cbz	r3, 800aa1c <_dtoa_r+0xb34>
 800aa14:	f10a 0308 	add.w	r3, sl, #8
 800aa18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	4650      	mov	r0, sl
 800aa1e:	b019      	add	sp, #100	@ 0x64
 800aa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	f77f ae37 	ble.w	800a69a <_dtoa_r+0x7b2>
 800aa2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa30:	2001      	movs	r0, #1
 800aa32:	e655      	b.n	800a6e0 <_dtoa_r+0x7f8>
 800aa34:	9b00      	ldr	r3, [sp, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f77f aed6 	ble.w	800a7e8 <_dtoa_r+0x900>
 800aa3c:	4656      	mov	r6, sl
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4648      	mov	r0, r9
 800aa42:	f7ff f9c9 	bl	8009dd8 <quorem>
 800aa46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa4a:	f806 8b01 	strb.w	r8, [r6], #1
 800aa4e:	9b00      	ldr	r3, [sp, #0]
 800aa50:	eba6 020a 	sub.w	r2, r6, sl
 800aa54:	4293      	cmp	r3, r2
 800aa56:	ddb3      	ble.n	800a9c0 <_dtoa_r+0xad8>
 800aa58:	4649      	mov	r1, r9
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	220a      	movs	r2, #10
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f000 f968 	bl	800ad34 <__multadd>
 800aa64:	4681      	mov	r9, r0
 800aa66:	e7ea      	b.n	800aa3e <_dtoa_r+0xb56>
 800aa68:	0800d5a6 	.word	0x0800d5a6
 800aa6c:	0800d52a 	.word	0x0800d52a

0800aa70 <_free_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4605      	mov	r5, r0
 800aa74:	2900      	cmp	r1, #0
 800aa76:	d041      	beq.n	800aafc <_free_r+0x8c>
 800aa78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa7c:	1f0c      	subs	r4, r1, #4
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	bfb8      	it	lt
 800aa82:	18e4      	addlt	r4, r4, r3
 800aa84:	f000 f8e8 	bl	800ac58 <__malloc_lock>
 800aa88:	4a1d      	ldr	r2, [pc, #116]	@ (800ab00 <_free_r+0x90>)
 800aa8a:	6813      	ldr	r3, [r2, #0]
 800aa8c:	b933      	cbnz	r3, 800aa9c <_free_r+0x2c>
 800aa8e:	6063      	str	r3, [r4, #4]
 800aa90:	6014      	str	r4, [r2, #0]
 800aa92:	4628      	mov	r0, r5
 800aa94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa98:	f000 b8e4 	b.w	800ac64 <__malloc_unlock>
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d908      	bls.n	800aab2 <_free_r+0x42>
 800aaa0:	6820      	ldr	r0, [r4, #0]
 800aaa2:	1821      	adds	r1, r4, r0
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	bf01      	itttt	eq
 800aaa8:	6819      	ldreq	r1, [r3, #0]
 800aaaa:	685b      	ldreq	r3, [r3, #4]
 800aaac:	1809      	addeq	r1, r1, r0
 800aaae:	6021      	streq	r1, [r4, #0]
 800aab0:	e7ed      	b.n	800aa8e <_free_r+0x1e>
 800aab2:	461a      	mov	r2, r3
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	b10b      	cbz	r3, 800aabc <_free_r+0x4c>
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	d9fa      	bls.n	800aab2 <_free_r+0x42>
 800aabc:	6811      	ldr	r1, [r2, #0]
 800aabe:	1850      	adds	r0, r2, r1
 800aac0:	42a0      	cmp	r0, r4
 800aac2:	d10b      	bne.n	800aadc <_free_r+0x6c>
 800aac4:	6820      	ldr	r0, [r4, #0]
 800aac6:	4401      	add	r1, r0
 800aac8:	1850      	adds	r0, r2, r1
 800aaca:	4283      	cmp	r3, r0
 800aacc:	6011      	str	r1, [r2, #0]
 800aace:	d1e0      	bne.n	800aa92 <_free_r+0x22>
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	6053      	str	r3, [r2, #4]
 800aad6:	4408      	add	r0, r1
 800aad8:	6010      	str	r0, [r2, #0]
 800aada:	e7da      	b.n	800aa92 <_free_r+0x22>
 800aadc:	d902      	bls.n	800aae4 <_free_r+0x74>
 800aade:	230c      	movs	r3, #12
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	e7d6      	b.n	800aa92 <_free_r+0x22>
 800aae4:	6820      	ldr	r0, [r4, #0]
 800aae6:	1821      	adds	r1, r4, r0
 800aae8:	428b      	cmp	r3, r1
 800aaea:	bf04      	itt	eq
 800aaec:	6819      	ldreq	r1, [r3, #0]
 800aaee:	685b      	ldreq	r3, [r3, #4]
 800aaf0:	6063      	str	r3, [r4, #4]
 800aaf2:	bf04      	itt	eq
 800aaf4:	1809      	addeq	r1, r1, r0
 800aaf6:	6021      	streq	r1, [r4, #0]
 800aaf8:	6054      	str	r4, [r2, #4]
 800aafa:	e7ca      	b.n	800aa92 <_free_r+0x22>
 800aafc:	bd38      	pop	{r3, r4, r5, pc}
 800aafe:	bf00      	nop
 800ab00:	20000dc0 	.word	0x20000dc0

0800ab04 <malloc>:
 800ab04:	4b02      	ldr	r3, [pc, #8]	@ (800ab10 <malloc+0xc>)
 800ab06:	4601      	mov	r1, r0
 800ab08:	6818      	ldr	r0, [r3, #0]
 800ab0a:	f000 b825 	b.w	800ab58 <_malloc_r>
 800ab0e:	bf00      	nop
 800ab10:	20000028 	.word	0x20000028

0800ab14 <sbrk_aligned>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	4e0f      	ldr	r6, [pc, #60]	@ (800ab54 <sbrk_aligned+0x40>)
 800ab18:	460c      	mov	r4, r1
 800ab1a:	6831      	ldr	r1, [r6, #0]
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	b911      	cbnz	r1, 800ab26 <sbrk_aligned+0x12>
 800ab20:	f001 fd7e 	bl	800c620 <_sbrk_r>
 800ab24:	6030      	str	r0, [r6, #0]
 800ab26:	4621      	mov	r1, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f001 fd79 	bl	800c620 <_sbrk_r>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	d103      	bne.n	800ab3a <sbrk_aligned+0x26>
 800ab32:	f04f 34ff 	mov.w	r4, #4294967295
 800ab36:	4620      	mov	r0, r4
 800ab38:	bd70      	pop	{r4, r5, r6, pc}
 800ab3a:	1cc4      	adds	r4, r0, #3
 800ab3c:	f024 0403 	bic.w	r4, r4, #3
 800ab40:	42a0      	cmp	r0, r4
 800ab42:	d0f8      	beq.n	800ab36 <sbrk_aligned+0x22>
 800ab44:	1a21      	subs	r1, r4, r0
 800ab46:	4628      	mov	r0, r5
 800ab48:	f001 fd6a 	bl	800c620 <_sbrk_r>
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d1f2      	bne.n	800ab36 <sbrk_aligned+0x22>
 800ab50:	e7ef      	b.n	800ab32 <sbrk_aligned+0x1e>
 800ab52:	bf00      	nop
 800ab54:	20000dbc 	.word	0x20000dbc

0800ab58 <_malloc_r>:
 800ab58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	1ccd      	adds	r5, r1, #3
 800ab5e:	f025 0503 	bic.w	r5, r5, #3
 800ab62:	3508      	adds	r5, #8
 800ab64:	2d0c      	cmp	r5, #12
 800ab66:	bf38      	it	cc
 800ab68:	250c      	movcc	r5, #12
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	db01      	blt.n	800ab74 <_malloc_r+0x1c>
 800ab70:	42a9      	cmp	r1, r5
 800ab72:	d904      	bls.n	800ab7e <_malloc_r+0x26>
 800ab74:	230c      	movs	r3, #12
 800ab76:	6033      	str	r3, [r6, #0]
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac54 <_malloc_r+0xfc>
 800ab82:	f000 f869 	bl	800ac58 <__malloc_lock>
 800ab86:	f8d8 3000 	ldr.w	r3, [r8]
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	bb44      	cbnz	r4, 800abe0 <_malloc_r+0x88>
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7ff ffbf 	bl	800ab14 <sbrk_aligned>
 800ab96:	1c43      	adds	r3, r0, #1
 800ab98:	4604      	mov	r4, r0
 800ab9a:	d158      	bne.n	800ac4e <_malloc_r+0xf6>
 800ab9c:	f8d8 4000 	ldr.w	r4, [r8]
 800aba0:	4627      	mov	r7, r4
 800aba2:	2f00      	cmp	r7, #0
 800aba4:	d143      	bne.n	800ac2e <_malloc_r+0xd6>
 800aba6:	2c00      	cmp	r4, #0
 800aba8:	d04b      	beq.n	800ac42 <_malloc_r+0xea>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	4639      	mov	r1, r7
 800abae:	4630      	mov	r0, r6
 800abb0:	eb04 0903 	add.w	r9, r4, r3
 800abb4:	f001 fd34 	bl	800c620 <_sbrk_r>
 800abb8:	4581      	cmp	r9, r0
 800abba:	d142      	bne.n	800ac42 <_malloc_r+0xea>
 800abbc:	6821      	ldr	r1, [r4, #0]
 800abbe:	1a6d      	subs	r5, r5, r1
 800abc0:	4629      	mov	r1, r5
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ffa6 	bl	800ab14 <sbrk_aligned>
 800abc8:	3001      	adds	r0, #1
 800abca:	d03a      	beq.n	800ac42 <_malloc_r+0xea>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	442b      	add	r3, r5
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	f8d8 3000 	ldr.w	r3, [r8]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	bb62      	cbnz	r2, 800ac34 <_malloc_r+0xdc>
 800abda:	f8c8 7000 	str.w	r7, [r8]
 800abde:	e00f      	b.n	800ac00 <_malloc_r+0xa8>
 800abe0:	6822      	ldr	r2, [r4, #0]
 800abe2:	1b52      	subs	r2, r2, r5
 800abe4:	d420      	bmi.n	800ac28 <_malloc_r+0xd0>
 800abe6:	2a0b      	cmp	r2, #11
 800abe8:	d917      	bls.n	800ac1a <_malloc_r+0xc2>
 800abea:	1961      	adds	r1, r4, r5
 800abec:	42a3      	cmp	r3, r4
 800abee:	6025      	str	r5, [r4, #0]
 800abf0:	bf18      	it	ne
 800abf2:	6059      	strne	r1, [r3, #4]
 800abf4:	6863      	ldr	r3, [r4, #4]
 800abf6:	bf08      	it	eq
 800abf8:	f8c8 1000 	streq.w	r1, [r8]
 800abfc:	5162      	str	r2, [r4, r5]
 800abfe:	604b      	str	r3, [r1, #4]
 800ac00:	4630      	mov	r0, r6
 800ac02:	f000 f82f 	bl	800ac64 <__malloc_unlock>
 800ac06:	f104 000b 	add.w	r0, r4, #11
 800ac0a:	1d23      	adds	r3, r4, #4
 800ac0c:	f020 0007 	bic.w	r0, r0, #7
 800ac10:	1ac2      	subs	r2, r0, r3
 800ac12:	bf1c      	itt	ne
 800ac14:	1a1b      	subne	r3, r3, r0
 800ac16:	50a3      	strne	r3, [r4, r2]
 800ac18:	e7af      	b.n	800ab7a <_malloc_r+0x22>
 800ac1a:	6862      	ldr	r2, [r4, #4]
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	bf0c      	ite	eq
 800ac20:	f8c8 2000 	streq.w	r2, [r8]
 800ac24:	605a      	strne	r2, [r3, #4]
 800ac26:	e7eb      	b.n	800ac00 <_malloc_r+0xa8>
 800ac28:	4623      	mov	r3, r4
 800ac2a:	6864      	ldr	r4, [r4, #4]
 800ac2c:	e7ae      	b.n	800ab8c <_malloc_r+0x34>
 800ac2e:	463c      	mov	r4, r7
 800ac30:	687f      	ldr	r7, [r7, #4]
 800ac32:	e7b6      	b.n	800aba2 <_malloc_r+0x4a>
 800ac34:	461a      	mov	r2, r3
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	42a3      	cmp	r3, r4
 800ac3a:	d1fb      	bne.n	800ac34 <_malloc_r+0xdc>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6053      	str	r3, [r2, #4]
 800ac40:	e7de      	b.n	800ac00 <_malloc_r+0xa8>
 800ac42:	230c      	movs	r3, #12
 800ac44:	6033      	str	r3, [r6, #0]
 800ac46:	4630      	mov	r0, r6
 800ac48:	f000 f80c 	bl	800ac64 <__malloc_unlock>
 800ac4c:	e794      	b.n	800ab78 <_malloc_r+0x20>
 800ac4e:	6005      	str	r5, [r0, #0]
 800ac50:	e7d6      	b.n	800ac00 <_malloc_r+0xa8>
 800ac52:	bf00      	nop
 800ac54:	20000dc0 	.word	0x20000dc0

0800ac58 <__malloc_lock>:
 800ac58:	4801      	ldr	r0, [pc, #4]	@ (800ac60 <__malloc_lock+0x8>)
 800ac5a:	f7ff b8b4 	b.w	8009dc6 <__retarget_lock_acquire_recursive>
 800ac5e:	bf00      	nop
 800ac60:	20000db8 	.word	0x20000db8

0800ac64 <__malloc_unlock>:
 800ac64:	4801      	ldr	r0, [pc, #4]	@ (800ac6c <__malloc_unlock+0x8>)
 800ac66:	f7ff b8af 	b.w	8009dc8 <__retarget_lock_release_recursive>
 800ac6a:	bf00      	nop
 800ac6c:	20000db8 	.word	0x20000db8

0800ac70 <_Balloc>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	69c6      	ldr	r6, [r0, #28]
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	b976      	cbnz	r6, 800ac98 <_Balloc+0x28>
 800ac7a:	2010      	movs	r0, #16
 800ac7c:	f7ff ff42 	bl	800ab04 <malloc>
 800ac80:	4602      	mov	r2, r0
 800ac82:	61e0      	str	r0, [r4, #28]
 800ac84:	b920      	cbnz	r0, 800ac90 <_Balloc+0x20>
 800ac86:	4b18      	ldr	r3, [pc, #96]	@ (800ace8 <_Balloc+0x78>)
 800ac88:	4818      	ldr	r0, [pc, #96]	@ (800acec <_Balloc+0x7c>)
 800ac8a:	216b      	movs	r1, #107	@ 0x6b
 800ac8c:	f001 fcf0 	bl	800c670 <__assert_func>
 800ac90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac94:	6006      	str	r6, [r0, #0]
 800ac96:	60c6      	str	r6, [r0, #12]
 800ac98:	69e6      	ldr	r6, [r4, #28]
 800ac9a:	68f3      	ldr	r3, [r6, #12]
 800ac9c:	b183      	cbz	r3, 800acc0 <_Balloc+0x50>
 800ac9e:	69e3      	ldr	r3, [r4, #28]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aca6:	b9b8      	cbnz	r0, 800acd8 <_Balloc+0x68>
 800aca8:	2101      	movs	r1, #1
 800acaa:	fa01 f605 	lsl.w	r6, r1, r5
 800acae:	1d72      	adds	r2, r6, #5
 800acb0:	0092      	lsls	r2, r2, #2
 800acb2:	4620      	mov	r0, r4
 800acb4:	f001 fcfa 	bl	800c6ac <_calloc_r>
 800acb8:	b160      	cbz	r0, 800acd4 <_Balloc+0x64>
 800acba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acbe:	e00e      	b.n	800acde <_Balloc+0x6e>
 800acc0:	2221      	movs	r2, #33	@ 0x21
 800acc2:	2104      	movs	r1, #4
 800acc4:	4620      	mov	r0, r4
 800acc6:	f001 fcf1 	bl	800c6ac <_calloc_r>
 800acca:	69e3      	ldr	r3, [r4, #28]
 800accc:	60f0      	str	r0, [r6, #12]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e4      	bne.n	800ac9e <_Balloc+0x2e>
 800acd4:	2000      	movs	r0, #0
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	6802      	ldr	r2, [r0, #0]
 800acda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acde:	2300      	movs	r3, #0
 800ace0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ace4:	e7f7      	b.n	800acd6 <_Balloc+0x66>
 800ace6:	bf00      	nop
 800ace8:	0800d537 	.word	0x0800d537
 800acec:	0800d5b7 	.word	0x0800d5b7

0800acf0 <_Bfree>:
 800acf0:	b570      	push	{r4, r5, r6, lr}
 800acf2:	69c6      	ldr	r6, [r0, #28]
 800acf4:	4605      	mov	r5, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	b976      	cbnz	r6, 800ad18 <_Bfree+0x28>
 800acfa:	2010      	movs	r0, #16
 800acfc:	f7ff ff02 	bl	800ab04 <malloc>
 800ad00:	4602      	mov	r2, r0
 800ad02:	61e8      	str	r0, [r5, #28]
 800ad04:	b920      	cbnz	r0, 800ad10 <_Bfree+0x20>
 800ad06:	4b09      	ldr	r3, [pc, #36]	@ (800ad2c <_Bfree+0x3c>)
 800ad08:	4809      	ldr	r0, [pc, #36]	@ (800ad30 <_Bfree+0x40>)
 800ad0a:	218f      	movs	r1, #143	@ 0x8f
 800ad0c:	f001 fcb0 	bl	800c670 <__assert_func>
 800ad10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad14:	6006      	str	r6, [r0, #0]
 800ad16:	60c6      	str	r6, [r0, #12]
 800ad18:	b13c      	cbz	r4, 800ad2a <_Bfree+0x3a>
 800ad1a:	69eb      	ldr	r3, [r5, #28]
 800ad1c:	6862      	ldr	r2, [r4, #4]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad24:	6021      	str	r1, [r4, #0]
 800ad26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}
 800ad2c:	0800d537 	.word	0x0800d537
 800ad30:	0800d5b7 	.word	0x0800d5b7

0800ad34 <__multadd>:
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	690d      	ldr	r5, [r1, #16]
 800ad3a:	4607      	mov	r7, r0
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	461e      	mov	r6, r3
 800ad40:	f101 0c14 	add.w	ip, r1, #20
 800ad44:	2000      	movs	r0, #0
 800ad46:	f8dc 3000 	ldr.w	r3, [ip]
 800ad4a:	b299      	uxth	r1, r3
 800ad4c:	fb02 6101 	mla	r1, r2, r1, r6
 800ad50:	0c1e      	lsrs	r6, r3, #16
 800ad52:	0c0b      	lsrs	r3, r1, #16
 800ad54:	fb02 3306 	mla	r3, r2, r6, r3
 800ad58:	b289      	uxth	r1, r1
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad60:	4285      	cmp	r5, r0
 800ad62:	f84c 1b04 	str.w	r1, [ip], #4
 800ad66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad6a:	dcec      	bgt.n	800ad46 <__multadd+0x12>
 800ad6c:	b30e      	cbz	r6, 800adb2 <__multadd+0x7e>
 800ad6e:	68a3      	ldr	r3, [r4, #8]
 800ad70:	42ab      	cmp	r3, r5
 800ad72:	dc19      	bgt.n	800ada8 <__multadd+0x74>
 800ad74:	6861      	ldr	r1, [r4, #4]
 800ad76:	4638      	mov	r0, r7
 800ad78:	3101      	adds	r1, #1
 800ad7a:	f7ff ff79 	bl	800ac70 <_Balloc>
 800ad7e:	4680      	mov	r8, r0
 800ad80:	b928      	cbnz	r0, 800ad8e <__multadd+0x5a>
 800ad82:	4602      	mov	r2, r0
 800ad84:	4b0c      	ldr	r3, [pc, #48]	@ (800adb8 <__multadd+0x84>)
 800ad86:	480d      	ldr	r0, [pc, #52]	@ (800adbc <__multadd+0x88>)
 800ad88:	21ba      	movs	r1, #186	@ 0xba
 800ad8a:	f001 fc71 	bl	800c670 <__assert_func>
 800ad8e:	6922      	ldr	r2, [r4, #16]
 800ad90:	3202      	adds	r2, #2
 800ad92:	f104 010c 	add.w	r1, r4, #12
 800ad96:	0092      	lsls	r2, r2, #2
 800ad98:	300c      	adds	r0, #12
 800ad9a:	f001 fc51 	bl	800c640 <memcpy>
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7ff ffa5 	bl	800acf0 <_Bfree>
 800ada6:	4644      	mov	r4, r8
 800ada8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adac:	3501      	adds	r5, #1
 800adae:	615e      	str	r6, [r3, #20]
 800adb0:	6125      	str	r5, [r4, #16]
 800adb2:	4620      	mov	r0, r4
 800adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb8:	0800d5a6 	.word	0x0800d5a6
 800adbc:	0800d5b7 	.word	0x0800d5b7

0800adc0 <__s2b>:
 800adc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc4:	460c      	mov	r4, r1
 800adc6:	4615      	mov	r5, r2
 800adc8:	461f      	mov	r7, r3
 800adca:	2209      	movs	r2, #9
 800adcc:	3308      	adds	r3, #8
 800adce:	4606      	mov	r6, r0
 800add0:	fb93 f3f2 	sdiv	r3, r3, r2
 800add4:	2100      	movs	r1, #0
 800add6:	2201      	movs	r2, #1
 800add8:	429a      	cmp	r2, r3
 800adda:	db09      	blt.n	800adf0 <__s2b+0x30>
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff ff47 	bl	800ac70 <_Balloc>
 800ade2:	b940      	cbnz	r0, 800adf6 <__s2b+0x36>
 800ade4:	4602      	mov	r2, r0
 800ade6:	4b19      	ldr	r3, [pc, #100]	@ (800ae4c <__s2b+0x8c>)
 800ade8:	4819      	ldr	r0, [pc, #100]	@ (800ae50 <__s2b+0x90>)
 800adea:	21d3      	movs	r1, #211	@ 0xd3
 800adec:	f001 fc40 	bl	800c670 <__assert_func>
 800adf0:	0052      	lsls	r2, r2, #1
 800adf2:	3101      	adds	r1, #1
 800adf4:	e7f0      	b.n	800add8 <__s2b+0x18>
 800adf6:	9b08      	ldr	r3, [sp, #32]
 800adf8:	6143      	str	r3, [r0, #20]
 800adfa:	2d09      	cmp	r5, #9
 800adfc:	f04f 0301 	mov.w	r3, #1
 800ae00:	6103      	str	r3, [r0, #16]
 800ae02:	dd16      	ble.n	800ae32 <__s2b+0x72>
 800ae04:	f104 0909 	add.w	r9, r4, #9
 800ae08:	46c8      	mov	r8, r9
 800ae0a:	442c      	add	r4, r5
 800ae0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae10:	4601      	mov	r1, r0
 800ae12:	3b30      	subs	r3, #48	@ 0x30
 800ae14:	220a      	movs	r2, #10
 800ae16:	4630      	mov	r0, r6
 800ae18:	f7ff ff8c 	bl	800ad34 <__multadd>
 800ae1c:	45a0      	cmp	r8, r4
 800ae1e:	d1f5      	bne.n	800ae0c <__s2b+0x4c>
 800ae20:	f1a5 0408 	sub.w	r4, r5, #8
 800ae24:	444c      	add	r4, r9
 800ae26:	1b2d      	subs	r5, r5, r4
 800ae28:	1963      	adds	r3, r4, r5
 800ae2a:	42bb      	cmp	r3, r7
 800ae2c:	db04      	blt.n	800ae38 <__s2b+0x78>
 800ae2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae32:	340a      	adds	r4, #10
 800ae34:	2509      	movs	r5, #9
 800ae36:	e7f6      	b.n	800ae26 <__s2b+0x66>
 800ae38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	3b30      	subs	r3, #48	@ 0x30
 800ae40:	220a      	movs	r2, #10
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ff76 	bl	800ad34 <__multadd>
 800ae48:	e7ee      	b.n	800ae28 <__s2b+0x68>
 800ae4a:	bf00      	nop
 800ae4c:	0800d5a6 	.word	0x0800d5a6
 800ae50:	0800d5b7 	.word	0x0800d5b7

0800ae54 <__hi0bits>:
 800ae54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae58:	4603      	mov	r3, r0
 800ae5a:	bf36      	itet	cc
 800ae5c:	0403      	lslcc	r3, r0, #16
 800ae5e:	2000      	movcs	r0, #0
 800ae60:	2010      	movcc	r0, #16
 800ae62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae66:	bf3c      	itt	cc
 800ae68:	021b      	lslcc	r3, r3, #8
 800ae6a:	3008      	addcc	r0, #8
 800ae6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae70:	bf3c      	itt	cc
 800ae72:	011b      	lslcc	r3, r3, #4
 800ae74:	3004      	addcc	r0, #4
 800ae76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae7a:	bf3c      	itt	cc
 800ae7c:	009b      	lslcc	r3, r3, #2
 800ae7e:	3002      	addcc	r0, #2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	db05      	blt.n	800ae90 <__hi0bits+0x3c>
 800ae84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae88:	f100 0001 	add.w	r0, r0, #1
 800ae8c:	bf08      	it	eq
 800ae8e:	2020      	moveq	r0, #32
 800ae90:	4770      	bx	lr

0800ae92 <__lo0bits>:
 800ae92:	6803      	ldr	r3, [r0, #0]
 800ae94:	4602      	mov	r2, r0
 800ae96:	f013 0007 	ands.w	r0, r3, #7
 800ae9a:	d00b      	beq.n	800aeb4 <__lo0bits+0x22>
 800ae9c:	07d9      	lsls	r1, r3, #31
 800ae9e:	d421      	bmi.n	800aee4 <__lo0bits+0x52>
 800aea0:	0798      	lsls	r0, r3, #30
 800aea2:	bf49      	itett	mi
 800aea4:	085b      	lsrmi	r3, r3, #1
 800aea6:	089b      	lsrpl	r3, r3, #2
 800aea8:	2001      	movmi	r0, #1
 800aeaa:	6013      	strmi	r3, [r2, #0]
 800aeac:	bf5c      	itt	pl
 800aeae:	6013      	strpl	r3, [r2, #0]
 800aeb0:	2002      	movpl	r0, #2
 800aeb2:	4770      	bx	lr
 800aeb4:	b299      	uxth	r1, r3
 800aeb6:	b909      	cbnz	r1, 800aebc <__lo0bits+0x2a>
 800aeb8:	0c1b      	lsrs	r3, r3, #16
 800aeba:	2010      	movs	r0, #16
 800aebc:	b2d9      	uxtb	r1, r3
 800aebe:	b909      	cbnz	r1, 800aec4 <__lo0bits+0x32>
 800aec0:	3008      	adds	r0, #8
 800aec2:	0a1b      	lsrs	r3, r3, #8
 800aec4:	0719      	lsls	r1, r3, #28
 800aec6:	bf04      	itt	eq
 800aec8:	091b      	lsreq	r3, r3, #4
 800aeca:	3004      	addeq	r0, #4
 800aecc:	0799      	lsls	r1, r3, #30
 800aece:	bf04      	itt	eq
 800aed0:	089b      	lsreq	r3, r3, #2
 800aed2:	3002      	addeq	r0, #2
 800aed4:	07d9      	lsls	r1, r3, #31
 800aed6:	d403      	bmi.n	800aee0 <__lo0bits+0x4e>
 800aed8:	085b      	lsrs	r3, r3, #1
 800aeda:	f100 0001 	add.w	r0, r0, #1
 800aede:	d003      	beq.n	800aee8 <__lo0bits+0x56>
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	4770      	bx	lr
 800aee4:	2000      	movs	r0, #0
 800aee6:	4770      	bx	lr
 800aee8:	2020      	movs	r0, #32
 800aeea:	4770      	bx	lr

0800aeec <__i2b>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	460c      	mov	r4, r1
 800aef0:	2101      	movs	r1, #1
 800aef2:	f7ff febd 	bl	800ac70 <_Balloc>
 800aef6:	4602      	mov	r2, r0
 800aef8:	b928      	cbnz	r0, 800af06 <__i2b+0x1a>
 800aefa:	4b05      	ldr	r3, [pc, #20]	@ (800af10 <__i2b+0x24>)
 800aefc:	4805      	ldr	r0, [pc, #20]	@ (800af14 <__i2b+0x28>)
 800aefe:	f240 1145 	movw	r1, #325	@ 0x145
 800af02:	f001 fbb5 	bl	800c670 <__assert_func>
 800af06:	2301      	movs	r3, #1
 800af08:	6144      	str	r4, [r0, #20]
 800af0a:	6103      	str	r3, [r0, #16]
 800af0c:	bd10      	pop	{r4, pc}
 800af0e:	bf00      	nop
 800af10:	0800d5a6 	.word	0x0800d5a6
 800af14:	0800d5b7 	.word	0x0800d5b7

0800af18 <__multiply>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	4614      	mov	r4, r2
 800af1e:	690a      	ldr	r2, [r1, #16]
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	429a      	cmp	r2, r3
 800af24:	bfa8      	it	ge
 800af26:	4623      	movge	r3, r4
 800af28:	460f      	mov	r7, r1
 800af2a:	bfa4      	itt	ge
 800af2c:	460c      	movge	r4, r1
 800af2e:	461f      	movge	r7, r3
 800af30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	6861      	ldr	r1, [r4, #4]
 800af3c:	eb0a 0609 	add.w	r6, sl, r9
 800af40:	42b3      	cmp	r3, r6
 800af42:	b085      	sub	sp, #20
 800af44:	bfb8      	it	lt
 800af46:	3101      	addlt	r1, #1
 800af48:	f7ff fe92 	bl	800ac70 <_Balloc>
 800af4c:	b930      	cbnz	r0, 800af5c <__multiply+0x44>
 800af4e:	4602      	mov	r2, r0
 800af50:	4b44      	ldr	r3, [pc, #272]	@ (800b064 <__multiply+0x14c>)
 800af52:	4845      	ldr	r0, [pc, #276]	@ (800b068 <__multiply+0x150>)
 800af54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af58:	f001 fb8a 	bl	800c670 <__assert_func>
 800af5c:	f100 0514 	add.w	r5, r0, #20
 800af60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af64:	462b      	mov	r3, r5
 800af66:	2200      	movs	r2, #0
 800af68:	4543      	cmp	r3, r8
 800af6a:	d321      	bcc.n	800afb0 <__multiply+0x98>
 800af6c:	f107 0114 	add.w	r1, r7, #20
 800af70:	f104 0214 	add.w	r2, r4, #20
 800af74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af7c:	9302      	str	r3, [sp, #8]
 800af7e:	1b13      	subs	r3, r2, r4
 800af80:	3b15      	subs	r3, #21
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	3304      	adds	r3, #4
 800af88:	f104 0715 	add.w	r7, r4, #21
 800af8c:	42ba      	cmp	r2, r7
 800af8e:	bf38      	it	cc
 800af90:	2304      	movcc	r3, #4
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	9b02      	ldr	r3, [sp, #8]
 800af96:	9103      	str	r1, [sp, #12]
 800af98:	428b      	cmp	r3, r1
 800af9a:	d80c      	bhi.n	800afb6 <__multiply+0x9e>
 800af9c:	2e00      	cmp	r6, #0
 800af9e:	dd03      	ble.n	800afa8 <__multiply+0x90>
 800afa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d05b      	beq.n	800b060 <__multiply+0x148>
 800afa8:	6106      	str	r6, [r0, #16]
 800afaa:	b005      	add	sp, #20
 800afac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb0:	f843 2b04 	str.w	r2, [r3], #4
 800afb4:	e7d8      	b.n	800af68 <__multiply+0x50>
 800afb6:	f8b1 a000 	ldrh.w	sl, [r1]
 800afba:	f1ba 0f00 	cmp.w	sl, #0
 800afbe:	d024      	beq.n	800b00a <__multiply+0xf2>
 800afc0:	f104 0e14 	add.w	lr, r4, #20
 800afc4:	46a9      	mov	r9, r5
 800afc6:	f04f 0c00 	mov.w	ip, #0
 800afca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afce:	f8d9 3000 	ldr.w	r3, [r9]
 800afd2:	fa1f fb87 	uxth.w	fp, r7
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	fb0a 330b 	mla	r3, sl, fp, r3
 800afdc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800afe0:	f8d9 7000 	ldr.w	r7, [r9]
 800afe4:	4463      	add	r3, ip
 800afe6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afea:	fb0a c70b 	mla	r7, sl, fp, ip
 800afee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aff8:	4572      	cmp	r2, lr
 800affa:	f849 3b04 	str.w	r3, [r9], #4
 800affe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b002:	d8e2      	bhi.n	800afca <__multiply+0xb2>
 800b004:	9b01      	ldr	r3, [sp, #4]
 800b006:	f845 c003 	str.w	ip, [r5, r3]
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b010:	3104      	adds	r1, #4
 800b012:	f1b9 0f00 	cmp.w	r9, #0
 800b016:	d021      	beq.n	800b05c <__multiply+0x144>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	f104 0c14 	add.w	ip, r4, #20
 800b01e:	46ae      	mov	lr, r5
 800b020:	f04f 0a00 	mov.w	sl, #0
 800b024:	f8bc b000 	ldrh.w	fp, [ip]
 800b028:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b02c:	fb09 770b 	mla	r7, r9, fp, r7
 800b030:	4457      	add	r7, sl
 800b032:	b29b      	uxth	r3, r3
 800b034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b038:	f84e 3b04 	str.w	r3, [lr], #4
 800b03c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b044:	f8be 3000 	ldrh.w	r3, [lr]
 800b048:	fb09 330a 	mla	r3, r9, sl, r3
 800b04c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b050:	4562      	cmp	r2, ip
 800b052:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b056:	d8e5      	bhi.n	800b024 <__multiply+0x10c>
 800b058:	9f01      	ldr	r7, [sp, #4]
 800b05a:	51eb      	str	r3, [r5, r7]
 800b05c:	3504      	adds	r5, #4
 800b05e:	e799      	b.n	800af94 <__multiply+0x7c>
 800b060:	3e01      	subs	r6, #1
 800b062:	e79b      	b.n	800af9c <__multiply+0x84>
 800b064:	0800d5a6 	.word	0x0800d5a6
 800b068:	0800d5b7 	.word	0x0800d5b7

0800b06c <__pow5mult>:
 800b06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b070:	4615      	mov	r5, r2
 800b072:	f012 0203 	ands.w	r2, r2, #3
 800b076:	4607      	mov	r7, r0
 800b078:	460e      	mov	r6, r1
 800b07a:	d007      	beq.n	800b08c <__pow5mult+0x20>
 800b07c:	4c25      	ldr	r4, [pc, #148]	@ (800b114 <__pow5mult+0xa8>)
 800b07e:	3a01      	subs	r2, #1
 800b080:	2300      	movs	r3, #0
 800b082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b086:	f7ff fe55 	bl	800ad34 <__multadd>
 800b08a:	4606      	mov	r6, r0
 800b08c:	10ad      	asrs	r5, r5, #2
 800b08e:	d03d      	beq.n	800b10c <__pow5mult+0xa0>
 800b090:	69fc      	ldr	r4, [r7, #28]
 800b092:	b97c      	cbnz	r4, 800b0b4 <__pow5mult+0x48>
 800b094:	2010      	movs	r0, #16
 800b096:	f7ff fd35 	bl	800ab04 <malloc>
 800b09a:	4602      	mov	r2, r0
 800b09c:	61f8      	str	r0, [r7, #28]
 800b09e:	b928      	cbnz	r0, 800b0ac <__pow5mult+0x40>
 800b0a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b118 <__pow5mult+0xac>)
 800b0a2:	481e      	ldr	r0, [pc, #120]	@ (800b11c <__pow5mult+0xb0>)
 800b0a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b0a8:	f001 fae2 	bl	800c670 <__assert_func>
 800b0ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0b0:	6004      	str	r4, [r0, #0]
 800b0b2:	60c4      	str	r4, [r0, #12]
 800b0b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0bc:	b94c      	cbnz	r4, 800b0d2 <__pow5mult+0x66>
 800b0be:	f240 2171 	movw	r1, #625	@ 0x271
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	f7ff ff12 	bl	800aeec <__i2b>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	6003      	str	r3, [r0, #0]
 800b0d2:	f04f 0900 	mov.w	r9, #0
 800b0d6:	07eb      	lsls	r3, r5, #31
 800b0d8:	d50a      	bpl.n	800b0f0 <__pow5mult+0x84>
 800b0da:	4631      	mov	r1, r6
 800b0dc:	4622      	mov	r2, r4
 800b0de:	4638      	mov	r0, r7
 800b0e0:	f7ff ff1a 	bl	800af18 <__multiply>
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4680      	mov	r8, r0
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	f7ff fe01 	bl	800acf0 <_Bfree>
 800b0ee:	4646      	mov	r6, r8
 800b0f0:	106d      	asrs	r5, r5, #1
 800b0f2:	d00b      	beq.n	800b10c <__pow5mult+0xa0>
 800b0f4:	6820      	ldr	r0, [r4, #0]
 800b0f6:	b938      	cbnz	r0, 800b108 <__pow5mult+0x9c>
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	f7ff ff0b 	bl	800af18 <__multiply>
 800b102:	6020      	str	r0, [r4, #0]
 800b104:	f8c0 9000 	str.w	r9, [r0]
 800b108:	4604      	mov	r4, r0
 800b10a:	e7e4      	b.n	800b0d6 <__pow5mult+0x6a>
 800b10c:	4630      	mov	r0, r6
 800b10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b112:	bf00      	nop
 800b114:	0800d610 	.word	0x0800d610
 800b118:	0800d537 	.word	0x0800d537
 800b11c:	0800d5b7 	.word	0x0800d5b7

0800b120 <__lshift>:
 800b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b124:	460c      	mov	r4, r1
 800b126:	6849      	ldr	r1, [r1, #4]
 800b128:	6923      	ldr	r3, [r4, #16]
 800b12a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	4607      	mov	r7, r0
 800b132:	4691      	mov	r9, r2
 800b134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b138:	f108 0601 	add.w	r6, r8, #1
 800b13c:	42b3      	cmp	r3, r6
 800b13e:	db0b      	blt.n	800b158 <__lshift+0x38>
 800b140:	4638      	mov	r0, r7
 800b142:	f7ff fd95 	bl	800ac70 <_Balloc>
 800b146:	4605      	mov	r5, r0
 800b148:	b948      	cbnz	r0, 800b15e <__lshift+0x3e>
 800b14a:	4602      	mov	r2, r0
 800b14c:	4b28      	ldr	r3, [pc, #160]	@ (800b1f0 <__lshift+0xd0>)
 800b14e:	4829      	ldr	r0, [pc, #164]	@ (800b1f4 <__lshift+0xd4>)
 800b150:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b154:	f001 fa8c 	bl	800c670 <__assert_func>
 800b158:	3101      	adds	r1, #1
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	e7ee      	b.n	800b13c <__lshift+0x1c>
 800b15e:	2300      	movs	r3, #0
 800b160:	f100 0114 	add.w	r1, r0, #20
 800b164:	f100 0210 	add.w	r2, r0, #16
 800b168:	4618      	mov	r0, r3
 800b16a:	4553      	cmp	r3, sl
 800b16c:	db33      	blt.n	800b1d6 <__lshift+0xb6>
 800b16e:	6920      	ldr	r0, [r4, #16]
 800b170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b174:	f104 0314 	add.w	r3, r4, #20
 800b178:	f019 091f 	ands.w	r9, r9, #31
 800b17c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b180:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b184:	d02b      	beq.n	800b1de <__lshift+0xbe>
 800b186:	f1c9 0e20 	rsb	lr, r9, #32
 800b18a:	468a      	mov	sl, r1
 800b18c:	2200      	movs	r2, #0
 800b18e:	6818      	ldr	r0, [r3, #0]
 800b190:	fa00 f009 	lsl.w	r0, r0, r9
 800b194:	4310      	orrs	r0, r2
 800b196:	f84a 0b04 	str.w	r0, [sl], #4
 800b19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b19e:	459c      	cmp	ip, r3
 800b1a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1a4:	d8f3      	bhi.n	800b18e <__lshift+0x6e>
 800b1a6:	ebac 0304 	sub.w	r3, ip, r4
 800b1aa:	3b15      	subs	r3, #21
 800b1ac:	f023 0303 	bic.w	r3, r3, #3
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	f104 0015 	add.w	r0, r4, #21
 800b1b6:	4584      	cmp	ip, r0
 800b1b8:	bf38      	it	cc
 800b1ba:	2304      	movcc	r3, #4
 800b1bc:	50ca      	str	r2, [r1, r3]
 800b1be:	b10a      	cbz	r2, 800b1c4 <__lshift+0xa4>
 800b1c0:	f108 0602 	add.w	r6, r8, #2
 800b1c4:	3e01      	subs	r6, #1
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	612e      	str	r6, [r5, #16]
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	f7ff fd90 	bl	800acf0 <_Bfree>
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1da:	3301      	adds	r3, #1
 800b1dc:	e7c5      	b.n	800b16a <__lshift+0x4a>
 800b1de:	3904      	subs	r1, #4
 800b1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1e8:	459c      	cmp	ip, r3
 800b1ea:	d8f9      	bhi.n	800b1e0 <__lshift+0xc0>
 800b1ec:	e7ea      	b.n	800b1c4 <__lshift+0xa4>
 800b1ee:	bf00      	nop
 800b1f0:	0800d5a6 	.word	0x0800d5a6
 800b1f4:	0800d5b7 	.word	0x0800d5b7

0800b1f8 <__mcmp>:
 800b1f8:	690a      	ldr	r2, [r1, #16]
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	6900      	ldr	r0, [r0, #16]
 800b1fe:	1a80      	subs	r0, r0, r2
 800b200:	b530      	push	{r4, r5, lr}
 800b202:	d10e      	bne.n	800b222 <__mcmp+0x2a>
 800b204:	3314      	adds	r3, #20
 800b206:	3114      	adds	r1, #20
 800b208:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b20c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b218:	4295      	cmp	r5, r2
 800b21a:	d003      	beq.n	800b224 <__mcmp+0x2c>
 800b21c:	d205      	bcs.n	800b22a <__mcmp+0x32>
 800b21e:	f04f 30ff 	mov.w	r0, #4294967295
 800b222:	bd30      	pop	{r4, r5, pc}
 800b224:	42a3      	cmp	r3, r4
 800b226:	d3f3      	bcc.n	800b210 <__mcmp+0x18>
 800b228:	e7fb      	b.n	800b222 <__mcmp+0x2a>
 800b22a:	2001      	movs	r0, #1
 800b22c:	e7f9      	b.n	800b222 <__mcmp+0x2a>
	...

0800b230 <__mdiff>:
 800b230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	4689      	mov	r9, r1
 800b236:	4606      	mov	r6, r0
 800b238:	4611      	mov	r1, r2
 800b23a:	4648      	mov	r0, r9
 800b23c:	4614      	mov	r4, r2
 800b23e:	f7ff ffdb 	bl	800b1f8 <__mcmp>
 800b242:	1e05      	subs	r5, r0, #0
 800b244:	d112      	bne.n	800b26c <__mdiff+0x3c>
 800b246:	4629      	mov	r1, r5
 800b248:	4630      	mov	r0, r6
 800b24a:	f7ff fd11 	bl	800ac70 <_Balloc>
 800b24e:	4602      	mov	r2, r0
 800b250:	b928      	cbnz	r0, 800b25e <__mdiff+0x2e>
 800b252:	4b3f      	ldr	r3, [pc, #252]	@ (800b350 <__mdiff+0x120>)
 800b254:	f240 2137 	movw	r1, #567	@ 0x237
 800b258:	483e      	ldr	r0, [pc, #248]	@ (800b354 <__mdiff+0x124>)
 800b25a:	f001 fa09 	bl	800c670 <__assert_func>
 800b25e:	2301      	movs	r3, #1
 800b260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b264:	4610      	mov	r0, r2
 800b266:	b003      	add	sp, #12
 800b268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26c:	bfbc      	itt	lt
 800b26e:	464b      	movlt	r3, r9
 800b270:	46a1      	movlt	r9, r4
 800b272:	4630      	mov	r0, r6
 800b274:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b278:	bfba      	itte	lt
 800b27a:	461c      	movlt	r4, r3
 800b27c:	2501      	movlt	r5, #1
 800b27e:	2500      	movge	r5, #0
 800b280:	f7ff fcf6 	bl	800ac70 <_Balloc>
 800b284:	4602      	mov	r2, r0
 800b286:	b918      	cbnz	r0, 800b290 <__mdiff+0x60>
 800b288:	4b31      	ldr	r3, [pc, #196]	@ (800b350 <__mdiff+0x120>)
 800b28a:	f240 2145 	movw	r1, #581	@ 0x245
 800b28e:	e7e3      	b.n	800b258 <__mdiff+0x28>
 800b290:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b294:	6926      	ldr	r6, [r4, #16]
 800b296:	60c5      	str	r5, [r0, #12]
 800b298:	f109 0310 	add.w	r3, r9, #16
 800b29c:	f109 0514 	add.w	r5, r9, #20
 800b2a0:	f104 0e14 	add.w	lr, r4, #20
 800b2a4:	f100 0b14 	add.w	fp, r0, #20
 800b2a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b2ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	46d9      	mov	r9, fp
 800b2b4:	f04f 0c00 	mov.w	ip, #0
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	fa1f f38a 	uxth.w	r3, sl
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	b283      	uxth	r3, r0
 800b2cc:	1acb      	subs	r3, r1, r3
 800b2ce:	0c00      	lsrs	r0, r0, #16
 800b2d0:	4463      	add	r3, ip
 800b2d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2e0:	4576      	cmp	r6, lr
 800b2e2:	f849 3b04 	str.w	r3, [r9], #4
 800b2e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2ea:	d8e5      	bhi.n	800b2b8 <__mdiff+0x88>
 800b2ec:	1b33      	subs	r3, r6, r4
 800b2ee:	3b15      	subs	r3, #21
 800b2f0:	f023 0303 	bic.w	r3, r3, #3
 800b2f4:	3415      	adds	r4, #21
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	42a6      	cmp	r6, r4
 800b2fa:	bf38      	it	cc
 800b2fc:	2304      	movcc	r3, #4
 800b2fe:	441d      	add	r5, r3
 800b300:	445b      	add	r3, fp
 800b302:	461e      	mov	r6, r3
 800b304:	462c      	mov	r4, r5
 800b306:	4544      	cmp	r4, r8
 800b308:	d30e      	bcc.n	800b328 <__mdiff+0xf8>
 800b30a:	f108 0103 	add.w	r1, r8, #3
 800b30e:	1b49      	subs	r1, r1, r5
 800b310:	f021 0103 	bic.w	r1, r1, #3
 800b314:	3d03      	subs	r5, #3
 800b316:	45a8      	cmp	r8, r5
 800b318:	bf38      	it	cc
 800b31a:	2100      	movcc	r1, #0
 800b31c:	440b      	add	r3, r1
 800b31e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b322:	b191      	cbz	r1, 800b34a <__mdiff+0x11a>
 800b324:	6117      	str	r7, [r2, #16]
 800b326:	e79d      	b.n	800b264 <__mdiff+0x34>
 800b328:	f854 1b04 	ldr.w	r1, [r4], #4
 800b32c:	46e6      	mov	lr, ip
 800b32e:	0c08      	lsrs	r0, r1, #16
 800b330:	fa1c fc81 	uxtah	ip, ip, r1
 800b334:	4471      	add	r1, lr
 800b336:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b33a:	b289      	uxth	r1, r1
 800b33c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b340:	f846 1b04 	str.w	r1, [r6], #4
 800b344:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b348:	e7dd      	b.n	800b306 <__mdiff+0xd6>
 800b34a:	3f01      	subs	r7, #1
 800b34c:	e7e7      	b.n	800b31e <__mdiff+0xee>
 800b34e:	bf00      	nop
 800b350:	0800d5a6 	.word	0x0800d5a6
 800b354:	0800d5b7 	.word	0x0800d5b7

0800b358 <__ulp>:
 800b358:	b082      	sub	sp, #8
 800b35a:	ed8d 0b00 	vstr	d0, [sp]
 800b35e:	9a01      	ldr	r2, [sp, #4]
 800b360:	4b0f      	ldr	r3, [pc, #60]	@ (800b3a0 <__ulp+0x48>)
 800b362:	4013      	ands	r3, r2
 800b364:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	dc08      	bgt.n	800b37e <__ulp+0x26>
 800b36c:	425b      	negs	r3, r3
 800b36e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b372:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b376:	da04      	bge.n	800b382 <__ulp+0x2a>
 800b378:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b37c:	4113      	asrs	r3, r2
 800b37e:	2200      	movs	r2, #0
 800b380:	e008      	b.n	800b394 <__ulp+0x3c>
 800b382:	f1a2 0314 	sub.w	r3, r2, #20
 800b386:	2b1e      	cmp	r3, #30
 800b388:	bfda      	itte	le
 800b38a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b38e:	40da      	lsrle	r2, r3
 800b390:	2201      	movgt	r2, #1
 800b392:	2300      	movs	r3, #0
 800b394:	4619      	mov	r1, r3
 800b396:	4610      	mov	r0, r2
 800b398:	ec41 0b10 	vmov	d0, r0, r1
 800b39c:	b002      	add	sp, #8
 800b39e:	4770      	bx	lr
 800b3a0:	7ff00000 	.word	0x7ff00000

0800b3a4 <__b2d>:
 800b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a8:	6906      	ldr	r6, [r0, #16]
 800b3aa:	f100 0814 	add.w	r8, r0, #20
 800b3ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b3b2:	1f37      	subs	r7, r6, #4
 800b3b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f7ff fd4b 	bl	800ae54 <__hi0bits>
 800b3be:	f1c0 0320 	rsb	r3, r0, #32
 800b3c2:	280a      	cmp	r0, #10
 800b3c4:	600b      	str	r3, [r1, #0]
 800b3c6:	491b      	ldr	r1, [pc, #108]	@ (800b434 <__b2d+0x90>)
 800b3c8:	dc15      	bgt.n	800b3f6 <__b2d+0x52>
 800b3ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800b3ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800b3d2:	45b8      	cmp	r8, r7
 800b3d4:	ea43 0501 	orr.w	r5, r3, r1
 800b3d8:	bf34      	ite	cc
 800b3da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3de:	2300      	movcs	r3, #0
 800b3e0:	3015      	adds	r0, #21
 800b3e2:	fa02 f000 	lsl.w	r0, r2, r0
 800b3e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b3ea:	4303      	orrs	r3, r0
 800b3ec:	461c      	mov	r4, r3
 800b3ee:	ec45 4b10 	vmov	d0, r4, r5
 800b3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f6:	45b8      	cmp	r8, r7
 800b3f8:	bf3a      	itte	cc
 800b3fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800b402:	2300      	movcs	r3, #0
 800b404:	380b      	subs	r0, #11
 800b406:	d012      	beq.n	800b42e <__b2d+0x8a>
 800b408:	f1c0 0120 	rsb	r1, r0, #32
 800b40c:	fa23 f401 	lsr.w	r4, r3, r1
 800b410:	4082      	lsls	r2, r0
 800b412:	4322      	orrs	r2, r4
 800b414:	4547      	cmp	r7, r8
 800b416:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b41a:	bf8c      	ite	hi
 800b41c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b420:	2200      	movls	r2, #0
 800b422:	4083      	lsls	r3, r0
 800b424:	40ca      	lsrs	r2, r1
 800b426:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b42a:	4313      	orrs	r3, r2
 800b42c:	e7de      	b.n	800b3ec <__b2d+0x48>
 800b42e:	ea42 0501 	orr.w	r5, r2, r1
 800b432:	e7db      	b.n	800b3ec <__b2d+0x48>
 800b434:	3ff00000 	.word	0x3ff00000

0800b438 <__d2b>:
 800b438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b43c:	460f      	mov	r7, r1
 800b43e:	2101      	movs	r1, #1
 800b440:	ec59 8b10 	vmov	r8, r9, d0
 800b444:	4616      	mov	r6, r2
 800b446:	f7ff fc13 	bl	800ac70 <_Balloc>
 800b44a:	4604      	mov	r4, r0
 800b44c:	b930      	cbnz	r0, 800b45c <__d2b+0x24>
 800b44e:	4602      	mov	r2, r0
 800b450:	4b23      	ldr	r3, [pc, #140]	@ (800b4e0 <__d2b+0xa8>)
 800b452:	4824      	ldr	r0, [pc, #144]	@ (800b4e4 <__d2b+0xac>)
 800b454:	f240 310f 	movw	r1, #783	@ 0x30f
 800b458:	f001 f90a 	bl	800c670 <__assert_func>
 800b45c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b464:	b10d      	cbz	r5, 800b46a <__d2b+0x32>
 800b466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b46a:	9301      	str	r3, [sp, #4]
 800b46c:	f1b8 0300 	subs.w	r3, r8, #0
 800b470:	d023      	beq.n	800b4ba <__d2b+0x82>
 800b472:	4668      	mov	r0, sp
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	f7ff fd0c 	bl	800ae92 <__lo0bits>
 800b47a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b47e:	b1d0      	cbz	r0, 800b4b6 <__d2b+0x7e>
 800b480:	f1c0 0320 	rsb	r3, r0, #32
 800b484:	fa02 f303 	lsl.w	r3, r2, r3
 800b488:	430b      	orrs	r3, r1
 800b48a:	40c2      	lsrs	r2, r0
 800b48c:	6163      	str	r3, [r4, #20]
 800b48e:	9201      	str	r2, [sp, #4]
 800b490:	9b01      	ldr	r3, [sp, #4]
 800b492:	61a3      	str	r3, [r4, #24]
 800b494:	2b00      	cmp	r3, #0
 800b496:	bf0c      	ite	eq
 800b498:	2201      	moveq	r2, #1
 800b49a:	2202      	movne	r2, #2
 800b49c:	6122      	str	r2, [r4, #16]
 800b49e:	b1a5      	cbz	r5, 800b4ca <__d2b+0x92>
 800b4a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b4a4:	4405      	add	r5, r0
 800b4a6:	603d      	str	r5, [r7, #0]
 800b4a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b4ac:	6030      	str	r0, [r6, #0]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	b003      	add	sp, #12
 800b4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4b6:	6161      	str	r1, [r4, #20]
 800b4b8:	e7ea      	b.n	800b490 <__d2b+0x58>
 800b4ba:	a801      	add	r0, sp, #4
 800b4bc:	f7ff fce9 	bl	800ae92 <__lo0bits>
 800b4c0:	9b01      	ldr	r3, [sp, #4]
 800b4c2:	6163      	str	r3, [r4, #20]
 800b4c4:	3020      	adds	r0, #32
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	e7e8      	b.n	800b49c <__d2b+0x64>
 800b4ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4d2:	6038      	str	r0, [r7, #0]
 800b4d4:	6918      	ldr	r0, [r3, #16]
 800b4d6:	f7ff fcbd 	bl	800ae54 <__hi0bits>
 800b4da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4de:	e7e5      	b.n	800b4ac <__d2b+0x74>
 800b4e0:	0800d5a6 	.word	0x0800d5a6
 800b4e4:	0800d5b7 	.word	0x0800d5b7

0800b4e8 <__ratio>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	b085      	sub	sp, #20
 800b4ee:	e9cd 1000 	strd	r1, r0, [sp]
 800b4f2:	a902      	add	r1, sp, #8
 800b4f4:	f7ff ff56 	bl	800b3a4 <__b2d>
 800b4f8:	9800      	ldr	r0, [sp, #0]
 800b4fa:	a903      	add	r1, sp, #12
 800b4fc:	ec55 4b10 	vmov	r4, r5, d0
 800b500:	f7ff ff50 	bl	800b3a4 <__b2d>
 800b504:	9b01      	ldr	r3, [sp, #4]
 800b506:	6919      	ldr	r1, [r3, #16]
 800b508:	9b00      	ldr	r3, [sp, #0]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	1ac9      	subs	r1, r1, r3
 800b50e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	ec5b ab10 	vmov	sl, fp, d0
 800b518:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfce      	itee	gt
 800b520:	462a      	movgt	r2, r5
 800b522:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b526:	465a      	movle	r2, fp
 800b528:	462f      	mov	r7, r5
 800b52a:	46d9      	mov	r9, fp
 800b52c:	bfcc      	ite	gt
 800b52e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b532:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b536:	464b      	mov	r3, r9
 800b538:	4652      	mov	r2, sl
 800b53a:	4620      	mov	r0, r4
 800b53c:	4639      	mov	r1, r7
 800b53e:	f7f5 f9a5 	bl	800088c <__aeabi_ddiv>
 800b542:	ec41 0b10 	vmov	d0, r0, r1
 800b546:	b005      	add	sp, #20
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b54c <__copybits>:
 800b54c:	3901      	subs	r1, #1
 800b54e:	b570      	push	{r4, r5, r6, lr}
 800b550:	1149      	asrs	r1, r1, #5
 800b552:	6914      	ldr	r4, [r2, #16]
 800b554:	3101      	adds	r1, #1
 800b556:	f102 0314 	add.w	r3, r2, #20
 800b55a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b55e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b562:	1f05      	subs	r5, r0, #4
 800b564:	42a3      	cmp	r3, r4
 800b566:	d30c      	bcc.n	800b582 <__copybits+0x36>
 800b568:	1aa3      	subs	r3, r4, r2
 800b56a:	3b11      	subs	r3, #17
 800b56c:	f023 0303 	bic.w	r3, r3, #3
 800b570:	3211      	adds	r2, #17
 800b572:	42a2      	cmp	r2, r4
 800b574:	bf88      	it	hi
 800b576:	2300      	movhi	r3, #0
 800b578:	4418      	add	r0, r3
 800b57a:	2300      	movs	r3, #0
 800b57c:	4288      	cmp	r0, r1
 800b57e:	d305      	bcc.n	800b58c <__copybits+0x40>
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	f853 6b04 	ldr.w	r6, [r3], #4
 800b586:	f845 6f04 	str.w	r6, [r5, #4]!
 800b58a:	e7eb      	b.n	800b564 <__copybits+0x18>
 800b58c:	f840 3b04 	str.w	r3, [r0], #4
 800b590:	e7f4      	b.n	800b57c <__copybits+0x30>

0800b592 <__any_on>:
 800b592:	f100 0214 	add.w	r2, r0, #20
 800b596:	6900      	ldr	r0, [r0, #16]
 800b598:	114b      	asrs	r3, r1, #5
 800b59a:	4298      	cmp	r0, r3
 800b59c:	b510      	push	{r4, lr}
 800b59e:	db11      	blt.n	800b5c4 <__any_on+0x32>
 800b5a0:	dd0a      	ble.n	800b5b8 <__any_on+0x26>
 800b5a2:	f011 011f 	ands.w	r1, r1, #31
 800b5a6:	d007      	beq.n	800b5b8 <__any_on+0x26>
 800b5a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5ac:	fa24 f001 	lsr.w	r0, r4, r1
 800b5b0:	fa00 f101 	lsl.w	r1, r0, r1
 800b5b4:	428c      	cmp	r4, r1
 800b5b6:	d10b      	bne.n	800b5d0 <__any_on+0x3e>
 800b5b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d803      	bhi.n	800b5c8 <__any_on+0x36>
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	bd10      	pop	{r4, pc}
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	e7f7      	b.n	800b5b8 <__any_on+0x26>
 800b5c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5cc:	2900      	cmp	r1, #0
 800b5ce:	d0f5      	beq.n	800b5bc <__any_on+0x2a>
 800b5d0:	2001      	movs	r0, #1
 800b5d2:	e7f6      	b.n	800b5c2 <__any_on+0x30>

0800b5d4 <sulp>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	460d      	mov	r5, r1
 800b5da:	ec45 4b10 	vmov	d0, r4, r5
 800b5de:	4616      	mov	r6, r2
 800b5e0:	f7ff feba 	bl	800b358 <__ulp>
 800b5e4:	ec51 0b10 	vmov	r0, r1, d0
 800b5e8:	b17e      	cbz	r6, 800b60a <sulp+0x36>
 800b5ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	dd09      	ble.n	800b60a <sulp+0x36>
 800b5f6:	051b      	lsls	r3, r3, #20
 800b5f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b5fc:	2400      	movs	r4, #0
 800b5fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b602:	4622      	mov	r2, r4
 800b604:	462b      	mov	r3, r5
 800b606:	f7f5 f817 	bl	8000638 <__aeabi_dmul>
 800b60a:	ec41 0b10 	vmov	d0, r0, r1
 800b60e:	bd70      	pop	{r4, r5, r6, pc}

0800b610 <_strtod_l>:
 800b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	b09f      	sub	sp, #124	@ 0x7c
 800b616:	460c      	mov	r4, r1
 800b618:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b61a:	2200      	movs	r2, #0
 800b61c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b61e:	9005      	str	r0, [sp, #20]
 800b620:	f04f 0a00 	mov.w	sl, #0
 800b624:	f04f 0b00 	mov.w	fp, #0
 800b628:	460a      	mov	r2, r1
 800b62a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b62c:	7811      	ldrb	r1, [r2, #0]
 800b62e:	292b      	cmp	r1, #43	@ 0x2b
 800b630:	d04a      	beq.n	800b6c8 <_strtod_l+0xb8>
 800b632:	d838      	bhi.n	800b6a6 <_strtod_l+0x96>
 800b634:	290d      	cmp	r1, #13
 800b636:	d832      	bhi.n	800b69e <_strtod_l+0x8e>
 800b638:	2908      	cmp	r1, #8
 800b63a:	d832      	bhi.n	800b6a2 <_strtod_l+0x92>
 800b63c:	2900      	cmp	r1, #0
 800b63e:	d03b      	beq.n	800b6b8 <_strtod_l+0xa8>
 800b640:	2200      	movs	r2, #0
 800b642:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b644:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b646:	782a      	ldrb	r2, [r5, #0]
 800b648:	2a30      	cmp	r2, #48	@ 0x30
 800b64a:	f040 80b3 	bne.w	800b7b4 <_strtod_l+0x1a4>
 800b64e:	786a      	ldrb	r2, [r5, #1]
 800b650:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b654:	2a58      	cmp	r2, #88	@ 0x58
 800b656:	d16e      	bne.n	800b736 <_strtod_l+0x126>
 800b658:	9302      	str	r3, [sp, #8]
 800b65a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	4a8e      	ldr	r2, [pc, #568]	@ (800b89c <_strtod_l+0x28c>)
 800b664:	9805      	ldr	r0, [sp, #20]
 800b666:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b668:	a919      	add	r1, sp, #100	@ 0x64
 800b66a:	f001 f89b 	bl	800c7a4 <__gethex>
 800b66e:	f010 060f 	ands.w	r6, r0, #15
 800b672:	4604      	mov	r4, r0
 800b674:	d005      	beq.n	800b682 <_strtod_l+0x72>
 800b676:	2e06      	cmp	r6, #6
 800b678:	d128      	bne.n	800b6cc <_strtod_l+0xbc>
 800b67a:	3501      	adds	r5, #1
 800b67c:	2300      	movs	r3, #0
 800b67e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b680:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 858e 	bne.w	800c1a6 <_strtod_l+0xb96>
 800b68a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b68c:	b1cb      	cbz	r3, 800b6c2 <_strtod_l+0xb2>
 800b68e:	4652      	mov	r2, sl
 800b690:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b694:	ec43 2b10 	vmov	d0, r2, r3
 800b698:	b01f      	add	sp, #124	@ 0x7c
 800b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69e:	2920      	cmp	r1, #32
 800b6a0:	d1ce      	bne.n	800b640 <_strtod_l+0x30>
 800b6a2:	3201      	adds	r2, #1
 800b6a4:	e7c1      	b.n	800b62a <_strtod_l+0x1a>
 800b6a6:	292d      	cmp	r1, #45	@ 0x2d
 800b6a8:	d1ca      	bne.n	800b640 <_strtod_l+0x30>
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b6ae:	1c51      	adds	r1, r2, #1
 800b6b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b6b2:	7852      	ldrb	r2, [r2, #1]
 800b6b4:	2a00      	cmp	r2, #0
 800b6b6:	d1c5      	bne.n	800b644 <_strtod_l+0x34>
 800b6b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f040 8570 	bne.w	800c1a2 <_strtod_l+0xb92>
 800b6c2:	4652      	mov	r2, sl
 800b6c4:	465b      	mov	r3, fp
 800b6c6:	e7e5      	b.n	800b694 <_strtod_l+0x84>
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	e7ef      	b.n	800b6ac <_strtod_l+0x9c>
 800b6cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b6ce:	b13a      	cbz	r2, 800b6e0 <_strtod_l+0xd0>
 800b6d0:	2135      	movs	r1, #53	@ 0x35
 800b6d2:	a81c      	add	r0, sp, #112	@ 0x70
 800b6d4:	f7ff ff3a 	bl	800b54c <__copybits>
 800b6d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6da:	9805      	ldr	r0, [sp, #20]
 800b6dc:	f7ff fb08 	bl	800acf0 <_Bfree>
 800b6e0:	3e01      	subs	r6, #1
 800b6e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b6e4:	2e04      	cmp	r6, #4
 800b6e6:	d806      	bhi.n	800b6f6 <_strtod_l+0xe6>
 800b6e8:	e8df f006 	tbb	[pc, r6]
 800b6ec:	201d0314 	.word	0x201d0314
 800b6f0:	14          	.byte	0x14
 800b6f1:	00          	.byte	0x00
 800b6f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b6f6:	05e1      	lsls	r1, r4, #23
 800b6f8:	bf48      	it	mi
 800b6fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b6fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b702:	0d1b      	lsrs	r3, r3, #20
 800b704:	051b      	lsls	r3, r3, #20
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1bb      	bne.n	800b682 <_strtod_l+0x72>
 800b70a:	f7fe fb31 	bl	8009d70 <__errno>
 800b70e:	2322      	movs	r3, #34	@ 0x22
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	e7b6      	b.n	800b682 <_strtod_l+0x72>
 800b714:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b718:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b71c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b720:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b724:	e7e7      	b.n	800b6f6 <_strtod_l+0xe6>
 800b726:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b8a4 <_strtod_l+0x294>
 800b72a:	e7e4      	b.n	800b6f6 <_strtod_l+0xe6>
 800b72c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b730:	f04f 3aff 	mov.w	sl, #4294967295
 800b734:	e7df      	b.n	800b6f6 <_strtod_l+0xe6>
 800b736:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b73c:	785b      	ldrb	r3, [r3, #1]
 800b73e:	2b30      	cmp	r3, #48	@ 0x30
 800b740:	d0f9      	beq.n	800b736 <_strtod_l+0x126>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d09d      	beq.n	800b682 <_strtod_l+0x72>
 800b746:	2301      	movs	r3, #1
 800b748:	9309      	str	r3, [sp, #36]	@ 0x24
 800b74a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b74c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b74e:	2300      	movs	r3, #0
 800b750:	9308      	str	r3, [sp, #32]
 800b752:	930a      	str	r3, [sp, #40]	@ 0x28
 800b754:	461f      	mov	r7, r3
 800b756:	220a      	movs	r2, #10
 800b758:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b75a:	7805      	ldrb	r5, [r0, #0]
 800b75c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b760:	b2d9      	uxtb	r1, r3
 800b762:	2909      	cmp	r1, #9
 800b764:	d928      	bls.n	800b7b8 <_strtod_l+0x1a8>
 800b766:	494e      	ldr	r1, [pc, #312]	@ (800b8a0 <_strtod_l+0x290>)
 800b768:	2201      	movs	r2, #1
 800b76a:	f7fe faa4 	bl	8009cb6 <strncmp>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d032      	beq.n	800b7d8 <_strtod_l+0x1c8>
 800b772:	2000      	movs	r0, #0
 800b774:	462a      	mov	r2, r5
 800b776:	4681      	mov	r9, r0
 800b778:	463d      	mov	r5, r7
 800b77a:	4603      	mov	r3, r0
 800b77c:	2a65      	cmp	r2, #101	@ 0x65
 800b77e:	d001      	beq.n	800b784 <_strtod_l+0x174>
 800b780:	2a45      	cmp	r2, #69	@ 0x45
 800b782:	d114      	bne.n	800b7ae <_strtod_l+0x19e>
 800b784:	b91d      	cbnz	r5, 800b78e <_strtod_l+0x17e>
 800b786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b788:	4302      	orrs	r2, r0
 800b78a:	d095      	beq.n	800b6b8 <_strtod_l+0xa8>
 800b78c:	2500      	movs	r5, #0
 800b78e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b790:	1c62      	adds	r2, r4, #1
 800b792:	9219      	str	r2, [sp, #100]	@ 0x64
 800b794:	7862      	ldrb	r2, [r4, #1]
 800b796:	2a2b      	cmp	r2, #43	@ 0x2b
 800b798:	d077      	beq.n	800b88a <_strtod_l+0x27a>
 800b79a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b79c:	d07b      	beq.n	800b896 <_strtod_l+0x286>
 800b79e:	f04f 0c00 	mov.w	ip, #0
 800b7a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b7a6:	2909      	cmp	r1, #9
 800b7a8:	f240 8082 	bls.w	800b8b0 <_strtod_l+0x2a0>
 800b7ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800b7ae:	f04f 0800 	mov.w	r8, #0
 800b7b2:	e0a2      	b.n	800b8fa <_strtod_l+0x2ea>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e7c7      	b.n	800b748 <_strtod_l+0x138>
 800b7b8:	2f08      	cmp	r7, #8
 800b7ba:	bfd5      	itete	le
 800b7bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b7be:	9908      	ldrgt	r1, [sp, #32]
 800b7c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b7c8:	f100 0001 	add.w	r0, r0, #1
 800b7cc:	bfd4      	ite	le
 800b7ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b7d0:	9308      	strgt	r3, [sp, #32]
 800b7d2:	3701      	adds	r7, #1
 800b7d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7d6:	e7bf      	b.n	800b758 <_strtod_l+0x148>
 800b7d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7de:	785a      	ldrb	r2, [r3, #1]
 800b7e0:	b37f      	cbz	r7, 800b842 <_strtod_l+0x232>
 800b7e2:	4681      	mov	r9, r0
 800b7e4:	463d      	mov	r5, r7
 800b7e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b7ea:	2b09      	cmp	r3, #9
 800b7ec:	d912      	bls.n	800b814 <_strtod_l+0x204>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e7c4      	b.n	800b77c <_strtod_l+0x16c>
 800b7f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7f8:	785a      	ldrb	r2, [r3, #1]
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	2a30      	cmp	r2, #48	@ 0x30
 800b7fe:	d0f8      	beq.n	800b7f2 <_strtod_l+0x1e2>
 800b800:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b804:	2b08      	cmp	r3, #8
 800b806:	f200 84d3 	bhi.w	800c1b0 <_strtod_l+0xba0>
 800b80a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b80c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b80e:	4681      	mov	r9, r0
 800b810:	2000      	movs	r0, #0
 800b812:	4605      	mov	r5, r0
 800b814:	3a30      	subs	r2, #48	@ 0x30
 800b816:	f100 0301 	add.w	r3, r0, #1
 800b81a:	d02a      	beq.n	800b872 <_strtod_l+0x262>
 800b81c:	4499      	add	r9, r3
 800b81e:	eb00 0c05 	add.w	ip, r0, r5
 800b822:	462b      	mov	r3, r5
 800b824:	210a      	movs	r1, #10
 800b826:	4563      	cmp	r3, ip
 800b828:	d10d      	bne.n	800b846 <_strtod_l+0x236>
 800b82a:	1c69      	adds	r1, r5, #1
 800b82c:	4401      	add	r1, r0
 800b82e:	4428      	add	r0, r5
 800b830:	2808      	cmp	r0, #8
 800b832:	dc16      	bgt.n	800b862 <_strtod_l+0x252>
 800b834:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b836:	230a      	movs	r3, #10
 800b838:	fb03 2300 	mla	r3, r3, r0, r2
 800b83c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b83e:	2300      	movs	r3, #0
 800b840:	e018      	b.n	800b874 <_strtod_l+0x264>
 800b842:	4638      	mov	r0, r7
 800b844:	e7da      	b.n	800b7fc <_strtod_l+0x1ec>
 800b846:	2b08      	cmp	r3, #8
 800b848:	f103 0301 	add.w	r3, r3, #1
 800b84c:	dc03      	bgt.n	800b856 <_strtod_l+0x246>
 800b84e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b850:	434e      	muls	r6, r1
 800b852:	960a      	str	r6, [sp, #40]	@ 0x28
 800b854:	e7e7      	b.n	800b826 <_strtod_l+0x216>
 800b856:	2b10      	cmp	r3, #16
 800b858:	bfde      	ittt	le
 800b85a:	9e08      	ldrle	r6, [sp, #32]
 800b85c:	434e      	mulle	r6, r1
 800b85e:	9608      	strle	r6, [sp, #32]
 800b860:	e7e1      	b.n	800b826 <_strtod_l+0x216>
 800b862:	280f      	cmp	r0, #15
 800b864:	dceb      	bgt.n	800b83e <_strtod_l+0x22e>
 800b866:	9808      	ldr	r0, [sp, #32]
 800b868:	230a      	movs	r3, #10
 800b86a:	fb03 2300 	mla	r3, r3, r0, r2
 800b86e:	9308      	str	r3, [sp, #32]
 800b870:	e7e5      	b.n	800b83e <_strtod_l+0x22e>
 800b872:	4629      	mov	r1, r5
 800b874:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b876:	1c50      	adds	r0, r2, #1
 800b878:	9019      	str	r0, [sp, #100]	@ 0x64
 800b87a:	7852      	ldrb	r2, [r2, #1]
 800b87c:	4618      	mov	r0, r3
 800b87e:	460d      	mov	r5, r1
 800b880:	e7b1      	b.n	800b7e6 <_strtod_l+0x1d6>
 800b882:	f04f 0900 	mov.w	r9, #0
 800b886:	2301      	movs	r3, #1
 800b888:	e77d      	b.n	800b786 <_strtod_l+0x176>
 800b88a:	f04f 0c00 	mov.w	ip, #0
 800b88e:	1ca2      	adds	r2, r4, #2
 800b890:	9219      	str	r2, [sp, #100]	@ 0x64
 800b892:	78a2      	ldrb	r2, [r4, #2]
 800b894:	e785      	b.n	800b7a2 <_strtod_l+0x192>
 800b896:	f04f 0c01 	mov.w	ip, #1
 800b89a:	e7f8      	b.n	800b88e <_strtod_l+0x27e>
 800b89c:	0800d728 	.word	0x0800d728
 800b8a0:	0800d710 	.word	0x0800d710
 800b8a4:	7ff00000 	.word	0x7ff00000
 800b8a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8aa:	1c51      	adds	r1, r2, #1
 800b8ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8ae:	7852      	ldrb	r2, [r2, #1]
 800b8b0:	2a30      	cmp	r2, #48	@ 0x30
 800b8b2:	d0f9      	beq.n	800b8a8 <_strtod_l+0x298>
 800b8b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b8b8:	2908      	cmp	r1, #8
 800b8ba:	f63f af78 	bhi.w	800b7ae <_strtod_l+0x19e>
 800b8be:	3a30      	subs	r2, #48	@ 0x30
 800b8c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b8c6:	f04f 080a 	mov.w	r8, #10
 800b8ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8cc:	1c56      	adds	r6, r2, #1
 800b8ce:	9619      	str	r6, [sp, #100]	@ 0x64
 800b8d0:	7852      	ldrb	r2, [r2, #1]
 800b8d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b8d6:	f1be 0f09 	cmp.w	lr, #9
 800b8da:	d939      	bls.n	800b950 <_strtod_l+0x340>
 800b8dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8de:	1a76      	subs	r6, r6, r1
 800b8e0:	2e08      	cmp	r6, #8
 800b8e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b8e6:	dc03      	bgt.n	800b8f0 <_strtod_l+0x2e0>
 800b8e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8ea:	4588      	cmp	r8, r1
 800b8ec:	bfa8      	it	ge
 800b8ee:	4688      	movge	r8, r1
 800b8f0:	f1bc 0f00 	cmp.w	ip, #0
 800b8f4:	d001      	beq.n	800b8fa <_strtod_l+0x2ea>
 800b8f6:	f1c8 0800 	rsb	r8, r8, #0
 800b8fa:	2d00      	cmp	r5, #0
 800b8fc:	d14e      	bne.n	800b99c <_strtod_l+0x38c>
 800b8fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b900:	4308      	orrs	r0, r1
 800b902:	f47f aebe 	bne.w	800b682 <_strtod_l+0x72>
 800b906:	2b00      	cmp	r3, #0
 800b908:	f47f aed6 	bne.w	800b6b8 <_strtod_l+0xa8>
 800b90c:	2a69      	cmp	r2, #105	@ 0x69
 800b90e:	d028      	beq.n	800b962 <_strtod_l+0x352>
 800b910:	dc25      	bgt.n	800b95e <_strtod_l+0x34e>
 800b912:	2a49      	cmp	r2, #73	@ 0x49
 800b914:	d025      	beq.n	800b962 <_strtod_l+0x352>
 800b916:	2a4e      	cmp	r2, #78	@ 0x4e
 800b918:	f47f aece 	bne.w	800b6b8 <_strtod_l+0xa8>
 800b91c:	499b      	ldr	r1, [pc, #620]	@ (800bb8c <_strtod_l+0x57c>)
 800b91e:	a819      	add	r0, sp, #100	@ 0x64
 800b920:	f001 f962 	bl	800cbe8 <__match>
 800b924:	2800      	cmp	r0, #0
 800b926:	f43f aec7 	beq.w	800b6b8 <_strtod_l+0xa8>
 800b92a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b28      	cmp	r3, #40	@ 0x28
 800b930:	d12e      	bne.n	800b990 <_strtod_l+0x380>
 800b932:	4997      	ldr	r1, [pc, #604]	@ (800bb90 <_strtod_l+0x580>)
 800b934:	aa1c      	add	r2, sp, #112	@ 0x70
 800b936:	a819      	add	r0, sp, #100	@ 0x64
 800b938:	f001 f96a 	bl	800cc10 <__hexnan>
 800b93c:	2805      	cmp	r0, #5
 800b93e:	d127      	bne.n	800b990 <_strtod_l+0x380>
 800b940:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b942:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b946:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b94a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b94e:	e698      	b.n	800b682 <_strtod_l+0x72>
 800b950:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b952:	fb08 2101 	mla	r1, r8, r1, r2
 800b956:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b95a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b95c:	e7b5      	b.n	800b8ca <_strtod_l+0x2ba>
 800b95e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b960:	e7da      	b.n	800b918 <_strtod_l+0x308>
 800b962:	498c      	ldr	r1, [pc, #560]	@ (800bb94 <_strtod_l+0x584>)
 800b964:	a819      	add	r0, sp, #100	@ 0x64
 800b966:	f001 f93f 	bl	800cbe8 <__match>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	f43f aea4 	beq.w	800b6b8 <_strtod_l+0xa8>
 800b970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b972:	4989      	ldr	r1, [pc, #548]	@ (800bb98 <_strtod_l+0x588>)
 800b974:	3b01      	subs	r3, #1
 800b976:	a819      	add	r0, sp, #100	@ 0x64
 800b978:	9319      	str	r3, [sp, #100]	@ 0x64
 800b97a:	f001 f935 	bl	800cbe8 <__match>
 800b97e:	b910      	cbnz	r0, 800b986 <_strtod_l+0x376>
 800b980:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b982:	3301      	adds	r3, #1
 800b984:	9319      	str	r3, [sp, #100]	@ 0x64
 800b986:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bba8 <_strtod_l+0x598>
 800b98a:	f04f 0a00 	mov.w	sl, #0
 800b98e:	e678      	b.n	800b682 <_strtod_l+0x72>
 800b990:	4882      	ldr	r0, [pc, #520]	@ (800bb9c <_strtod_l+0x58c>)
 800b992:	f000 fe65 	bl	800c660 <nan>
 800b996:	ec5b ab10 	vmov	sl, fp, d0
 800b99a:	e672      	b.n	800b682 <_strtod_l+0x72>
 800b99c:	eba8 0309 	sub.w	r3, r8, r9
 800b9a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9a4:	2f00      	cmp	r7, #0
 800b9a6:	bf08      	it	eq
 800b9a8:	462f      	moveq	r7, r5
 800b9aa:	2d10      	cmp	r5, #16
 800b9ac:	462c      	mov	r4, r5
 800b9ae:	bfa8      	it	ge
 800b9b0:	2410      	movge	r4, #16
 800b9b2:	f7f4 fdc7 	bl	8000544 <__aeabi_ui2d>
 800b9b6:	2d09      	cmp	r5, #9
 800b9b8:	4682      	mov	sl, r0
 800b9ba:	468b      	mov	fp, r1
 800b9bc:	dc13      	bgt.n	800b9e6 <_strtod_l+0x3d6>
 800b9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f43f ae5e 	beq.w	800b682 <_strtod_l+0x72>
 800b9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c8:	dd78      	ble.n	800babc <_strtod_l+0x4ac>
 800b9ca:	2b16      	cmp	r3, #22
 800b9cc:	dc5f      	bgt.n	800ba8e <_strtod_l+0x47e>
 800b9ce:	4974      	ldr	r1, [pc, #464]	@ (800bba0 <_strtod_l+0x590>)
 800b9d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d8:	4652      	mov	r2, sl
 800b9da:	465b      	mov	r3, fp
 800b9dc:	f7f4 fe2c 	bl	8000638 <__aeabi_dmul>
 800b9e0:	4682      	mov	sl, r0
 800b9e2:	468b      	mov	fp, r1
 800b9e4:	e64d      	b.n	800b682 <_strtod_l+0x72>
 800b9e6:	4b6e      	ldr	r3, [pc, #440]	@ (800bba0 <_strtod_l+0x590>)
 800b9e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b9f0:	f7f4 fe22 	bl	8000638 <__aeabi_dmul>
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	9808      	ldr	r0, [sp, #32]
 800b9f8:	468b      	mov	fp, r1
 800b9fa:	f7f4 fda3 	bl	8000544 <__aeabi_ui2d>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4650      	mov	r0, sl
 800ba04:	4659      	mov	r1, fp
 800ba06:	f7f4 fc61 	bl	80002cc <__adddf3>
 800ba0a:	2d0f      	cmp	r5, #15
 800ba0c:	4682      	mov	sl, r0
 800ba0e:	468b      	mov	fp, r1
 800ba10:	ddd5      	ble.n	800b9be <_strtod_l+0x3ae>
 800ba12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba14:	1b2c      	subs	r4, r5, r4
 800ba16:	441c      	add	r4, r3
 800ba18:	2c00      	cmp	r4, #0
 800ba1a:	f340 8096 	ble.w	800bb4a <_strtod_l+0x53a>
 800ba1e:	f014 030f 	ands.w	r3, r4, #15
 800ba22:	d00a      	beq.n	800ba3a <_strtod_l+0x42a>
 800ba24:	495e      	ldr	r1, [pc, #376]	@ (800bba0 <_strtod_l+0x590>)
 800ba26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba2a:	4652      	mov	r2, sl
 800ba2c:	465b      	mov	r3, fp
 800ba2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba32:	f7f4 fe01 	bl	8000638 <__aeabi_dmul>
 800ba36:	4682      	mov	sl, r0
 800ba38:	468b      	mov	fp, r1
 800ba3a:	f034 040f 	bics.w	r4, r4, #15
 800ba3e:	d073      	beq.n	800bb28 <_strtod_l+0x518>
 800ba40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ba44:	dd48      	ble.n	800bad8 <_strtod_l+0x4c8>
 800ba46:	2400      	movs	r4, #0
 800ba48:	46a0      	mov	r8, r4
 800ba4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba4c:	46a1      	mov	r9, r4
 800ba4e:	9a05      	ldr	r2, [sp, #20]
 800ba50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bba8 <_strtod_l+0x598>
 800ba54:	2322      	movs	r3, #34	@ 0x22
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	f04f 0a00 	mov.w	sl, #0
 800ba5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f43f ae0f 	beq.w	800b682 <_strtod_l+0x72>
 800ba64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba66:	9805      	ldr	r0, [sp, #20]
 800ba68:	f7ff f942 	bl	800acf0 <_Bfree>
 800ba6c:	9805      	ldr	r0, [sp, #20]
 800ba6e:	4649      	mov	r1, r9
 800ba70:	f7ff f93e 	bl	800acf0 <_Bfree>
 800ba74:	9805      	ldr	r0, [sp, #20]
 800ba76:	4641      	mov	r1, r8
 800ba78:	f7ff f93a 	bl	800acf0 <_Bfree>
 800ba7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba7e:	9805      	ldr	r0, [sp, #20]
 800ba80:	f7ff f936 	bl	800acf0 <_Bfree>
 800ba84:	9805      	ldr	r0, [sp, #20]
 800ba86:	4621      	mov	r1, r4
 800ba88:	f7ff f932 	bl	800acf0 <_Bfree>
 800ba8c:	e5f9      	b.n	800b682 <_strtod_l+0x72>
 800ba8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ba94:	4293      	cmp	r3, r2
 800ba96:	dbbc      	blt.n	800ba12 <_strtod_l+0x402>
 800ba98:	4c41      	ldr	r4, [pc, #260]	@ (800bba0 <_strtod_l+0x590>)
 800ba9a:	f1c5 050f 	rsb	r5, r5, #15
 800ba9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800baa2:	4652      	mov	r2, sl
 800baa4:	465b      	mov	r3, fp
 800baa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baaa:	f7f4 fdc5 	bl	8000638 <__aeabi_dmul>
 800baae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bab0:	1b5d      	subs	r5, r3, r5
 800bab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800baba:	e78f      	b.n	800b9dc <_strtod_l+0x3cc>
 800babc:	3316      	adds	r3, #22
 800babe:	dba8      	blt.n	800ba12 <_strtod_l+0x402>
 800bac0:	4b37      	ldr	r3, [pc, #220]	@ (800bba0 <_strtod_l+0x590>)
 800bac2:	eba9 0808 	sub.w	r8, r9, r8
 800bac6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800baca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bace:	4650      	mov	r0, sl
 800bad0:	4659      	mov	r1, fp
 800bad2:	f7f4 fedb 	bl	800088c <__aeabi_ddiv>
 800bad6:	e783      	b.n	800b9e0 <_strtod_l+0x3d0>
 800bad8:	4b32      	ldr	r3, [pc, #200]	@ (800bba4 <_strtod_l+0x594>)
 800bada:	9308      	str	r3, [sp, #32]
 800badc:	2300      	movs	r3, #0
 800bade:	1124      	asrs	r4, r4, #4
 800bae0:	4650      	mov	r0, sl
 800bae2:	4659      	mov	r1, fp
 800bae4:	461e      	mov	r6, r3
 800bae6:	2c01      	cmp	r4, #1
 800bae8:	dc21      	bgt.n	800bb2e <_strtod_l+0x51e>
 800baea:	b10b      	cbz	r3, 800baf0 <_strtod_l+0x4e0>
 800baec:	4682      	mov	sl, r0
 800baee:	468b      	mov	fp, r1
 800baf0:	492c      	ldr	r1, [pc, #176]	@ (800bba4 <_strtod_l+0x594>)
 800baf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800baf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bafa:	4652      	mov	r2, sl
 800bafc:	465b      	mov	r3, fp
 800bafe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb02:	f7f4 fd99 	bl	8000638 <__aeabi_dmul>
 800bb06:	4b28      	ldr	r3, [pc, #160]	@ (800bba8 <_strtod_l+0x598>)
 800bb08:	460a      	mov	r2, r1
 800bb0a:	400b      	ands	r3, r1
 800bb0c:	4927      	ldr	r1, [pc, #156]	@ (800bbac <_strtod_l+0x59c>)
 800bb0e:	428b      	cmp	r3, r1
 800bb10:	4682      	mov	sl, r0
 800bb12:	d898      	bhi.n	800ba46 <_strtod_l+0x436>
 800bb14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bb18:	428b      	cmp	r3, r1
 800bb1a:	bf86      	itte	hi
 800bb1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bbb0 <_strtod_l+0x5a0>
 800bb20:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bb28:	2300      	movs	r3, #0
 800bb2a:	9308      	str	r3, [sp, #32]
 800bb2c:	e07a      	b.n	800bc24 <_strtod_l+0x614>
 800bb2e:	07e2      	lsls	r2, r4, #31
 800bb30:	d505      	bpl.n	800bb3e <_strtod_l+0x52e>
 800bb32:	9b08      	ldr	r3, [sp, #32]
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	f7f4 fd7e 	bl	8000638 <__aeabi_dmul>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	9a08      	ldr	r2, [sp, #32]
 800bb40:	3208      	adds	r2, #8
 800bb42:	3601      	adds	r6, #1
 800bb44:	1064      	asrs	r4, r4, #1
 800bb46:	9208      	str	r2, [sp, #32]
 800bb48:	e7cd      	b.n	800bae6 <_strtod_l+0x4d6>
 800bb4a:	d0ed      	beq.n	800bb28 <_strtod_l+0x518>
 800bb4c:	4264      	negs	r4, r4
 800bb4e:	f014 020f 	ands.w	r2, r4, #15
 800bb52:	d00a      	beq.n	800bb6a <_strtod_l+0x55a>
 800bb54:	4b12      	ldr	r3, [pc, #72]	@ (800bba0 <_strtod_l+0x590>)
 800bb56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb5a:	4650      	mov	r0, sl
 800bb5c:	4659      	mov	r1, fp
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	f7f4 fe93 	bl	800088c <__aeabi_ddiv>
 800bb66:	4682      	mov	sl, r0
 800bb68:	468b      	mov	fp, r1
 800bb6a:	1124      	asrs	r4, r4, #4
 800bb6c:	d0dc      	beq.n	800bb28 <_strtod_l+0x518>
 800bb6e:	2c1f      	cmp	r4, #31
 800bb70:	dd20      	ble.n	800bbb4 <_strtod_l+0x5a4>
 800bb72:	2400      	movs	r4, #0
 800bb74:	46a0      	mov	r8, r4
 800bb76:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb78:	46a1      	mov	r9, r4
 800bb7a:	9a05      	ldr	r2, [sp, #20]
 800bb7c:	2322      	movs	r3, #34	@ 0x22
 800bb7e:	f04f 0a00 	mov.w	sl, #0
 800bb82:	f04f 0b00 	mov.w	fp, #0
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	e768      	b.n	800ba5c <_strtod_l+0x44c>
 800bb8a:	bf00      	nop
 800bb8c:	0800d4fe 	.word	0x0800d4fe
 800bb90:	0800d714 	.word	0x0800d714
 800bb94:	0800d4f6 	.word	0x0800d4f6
 800bb98:	0800d52d 	.word	0x0800d52d
 800bb9c:	0800d7bc 	.word	0x0800d7bc
 800bba0:	0800d648 	.word	0x0800d648
 800bba4:	0800d620 	.word	0x0800d620
 800bba8:	7ff00000 	.word	0x7ff00000
 800bbac:	7ca00000 	.word	0x7ca00000
 800bbb0:	7fefffff 	.word	0x7fefffff
 800bbb4:	f014 0310 	ands.w	r3, r4, #16
 800bbb8:	bf18      	it	ne
 800bbba:	236a      	movne	r3, #106	@ 0x6a
 800bbbc:	4ea9      	ldr	r6, [pc, #676]	@ (800be64 <_strtod_l+0x854>)
 800bbbe:	9308      	str	r3, [sp, #32]
 800bbc0:	4650      	mov	r0, sl
 800bbc2:	4659      	mov	r1, fp
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	07e2      	lsls	r2, r4, #31
 800bbc8:	d504      	bpl.n	800bbd4 <_strtod_l+0x5c4>
 800bbca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbce:	f7f4 fd33 	bl	8000638 <__aeabi_dmul>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	1064      	asrs	r4, r4, #1
 800bbd6:	f106 0608 	add.w	r6, r6, #8
 800bbda:	d1f4      	bne.n	800bbc6 <_strtod_l+0x5b6>
 800bbdc:	b10b      	cbz	r3, 800bbe2 <_strtod_l+0x5d2>
 800bbde:	4682      	mov	sl, r0
 800bbe0:	468b      	mov	fp, r1
 800bbe2:	9b08      	ldr	r3, [sp, #32]
 800bbe4:	b1b3      	cbz	r3, 800bc14 <_strtod_l+0x604>
 800bbe6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bbea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	4659      	mov	r1, fp
 800bbf2:	dd0f      	ble.n	800bc14 <_strtod_l+0x604>
 800bbf4:	2b1f      	cmp	r3, #31
 800bbf6:	dd55      	ble.n	800bca4 <_strtod_l+0x694>
 800bbf8:	2b34      	cmp	r3, #52	@ 0x34
 800bbfa:	bfde      	ittt	le
 800bbfc:	f04f 33ff 	movle.w	r3, #4294967295
 800bc00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bc04:	4093      	lslle	r3, r2
 800bc06:	f04f 0a00 	mov.w	sl, #0
 800bc0a:	bfcc      	ite	gt
 800bc0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bc10:	ea03 0b01 	andle.w	fp, r3, r1
 800bc14:	2200      	movs	r2, #0
 800bc16:	2300      	movs	r3, #0
 800bc18:	4650      	mov	r0, sl
 800bc1a:	4659      	mov	r1, fp
 800bc1c:	f7f4 ff74 	bl	8000b08 <__aeabi_dcmpeq>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d1a6      	bne.n	800bb72 <_strtod_l+0x562>
 800bc24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bc2a:	9805      	ldr	r0, [sp, #20]
 800bc2c:	462b      	mov	r3, r5
 800bc2e:	463a      	mov	r2, r7
 800bc30:	f7ff f8c6 	bl	800adc0 <__s2b>
 800bc34:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc36:	2800      	cmp	r0, #0
 800bc38:	f43f af05 	beq.w	800ba46 <_strtod_l+0x436>
 800bc3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	eba9 0308 	sub.w	r3, r9, r8
 800bc44:	bfa8      	it	ge
 800bc46:	2300      	movge	r3, #0
 800bc48:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc4a:	2400      	movs	r4, #0
 800bc4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc50:	9316      	str	r3, [sp, #88]	@ 0x58
 800bc52:	46a0      	mov	r8, r4
 800bc54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc56:	9805      	ldr	r0, [sp, #20]
 800bc58:	6859      	ldr	r1, [r3, #4]
 800bc5a:	f7ff f809 	bl	800ac70 <_Balloc>
 800bc5e:	4681      	mov	r9, r0
 800bc60:	2800      	cmp	r0, #0
 800bc62:	f43f aef4 	beq.w	800ba4e <_strtod_l+0x43e>
 800bc66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc68:	691a      	ldr	r2, [r3, #16]
 800bc6a:	3202      	adds	r2, #2
 800bc6c:	f103 010c 	add.w	r1, r3, #12
 800bc70:	0092      	lsls	r2, r2, #2
 800bc72:	300c      	adds	r0, #12
 800bc74:	f000 fce4 	bl	800c640 <memcpy>
 800bc78:	ec4b ab10 	vmov	d0, sl, fp
 800bc7c:	9805      	ldr	r0, [sp, #20]
 800bc7e:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc80:	a91b      	add	r1, sp, #108	@ 0x6c
 800bc82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bc86:	f7ff fbd7 	bl	800b438 <__d2b>
 800bc8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f43f aede 	beq.w	800ba4e <_strtod_l+0x43e>
 800bc92:	9805      	ldr	r0, [sp, #20]
 800bc94:	2101      	movs	r1, #1
 800bc96:	f7ff f929 	bl	800aeec <__i2b>
 800bc9a:	4680      	mov	r8, r0
 800bc9c:	b948      	cbnz	r0, 800bcb2 <_strtod_l+0x6a2>
 800bc9e:	f04f 0800 	mov.w	r8, #0
 800bca2:	e6d4      	b.n	800ba4e <_strtod_l+0x43e>
 800bca4:	f04f 32ff 	mov.w	r2, #4294967295
 800bca8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcac:	ea03 0a0a 	and.w	sl, r3, sl
 800bcb0:	e7b0      	b.n	800bc14 <_strtod_l+0x604>
 800bcb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bcb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bcb6:	2d00      	cmp	r5, #0
 800bcb8:	bfab      	itete	ge
 800bcba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bcbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bcbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bcc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bcc2:	bfac      	ite	ge
 800bcc4:	18ef      	addge	r7, r5, r3
 800bcc6:	1b5e      	sublt	r6, r3, r5
 800bcc8:	9b08      	ldr	r3, [sp, #32]
 800bcca:	1aed      	subs	r5, r5, r3
 800bccc:	4415      	add	r5, r2
 800bcce:	4b66      	ldr	r3, [pc, #408]	@ (800be68 <_strtod_l+0x858>)
 800bcd0:	3d01      	subs	r5, #1
 800bcd2:	429d      	cmp	r5, r3
 800bcd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bcd8:	da50      	bge.n	800bd7c <_strtod_l+0x76c>
 800bcda:	1b5b      	subs	r3, r3, r5
 800bcdc:	2b1f      	cmp	r3, #31
 800bcde:	eba2 0203 	sub.w	r2, r2, r3
 800bce2:	f04f 0101 	mov.w	r1, #1
 800bce6:	dc3d      	bgt.n	800bd64 <_strtod_l+0x754>
 800bce8:	fa01 f303 	lsl.w	r3, r1, r3
 800bcec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcf2:	18bd      	adds	r5, r7, r2
 800bcf4:	9b08      	ldr	r3, [sp, #32]
 800bcf6:	42af      	cmp	r7, r5
 800bcf8:	4416      	add	r6, r2
 800bcfa:	441e      	add	r6, r3
 800bcfc:	463b      	mov	r3, r7
 800bcfe:	bfa8      	it	ge
 800bd00:	462b      	movge	r3, r5
 800bd02:	42b3      	cmp	r3, r6
 800bd04:	bfa8      	it	ge
 800bd06:	4633      	movge	r3, r6
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bfc2      	ittt	gt
 800bd0c:	1aed      	subgt	r5, r5, r3
 800bd0e:	1af6      	subgt	r6, r6, r3
 800bd10:	1aff      	subgt	r7, r7, r3
 800bd12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dd16      	ble.n	800bd46 <_strtod_l+0x736>
 800bd18:	4641      	mov	r1, r8
 800bd1a:	9805      	ldr	r0, [sp, #20]
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	f7ff f9a5 	bl	800b06c <__pow5mult>
 800bd22:	4680      	mov	r8, r0
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d0ba      	beq.n	800bc9e <_strtod_l+0x68e>
 800bd28:	4601      	mov	r1, r0
 800bd2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd2c:	9805      	ldr	r0, [sp, #20]
 800bd2e:	f7ff f8f3 	bl	800af18 <__multiply>
 800bd32:	900e      	str	r0, [sp, #56]	@ 0x38
 800bd34:	2800      	cmp	r0, #0
 800bd36:	f43f ae8a 	beq.w	800ba4e <_strtod_l+0x43e>
 800bd3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd3c:	9805      	ldr	r0, [sp, #20]
 800bd3e:	f7fe ffd7 	bl	800acf0 <_Bfree>
 800bd42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd44:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd46:	2d00      	cmp	r5, #0
 800bd48:	dc1d      	bgt.n	800bd86 <_strtod_l+0x776>
 800bd4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	dd23      	ble.n	800bd98 <_strtod_l+0x788>
 800bd50:	4649      	mov	r1, r9
 800bd52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bd54:	9805      	ldr	r0, [sp, #20]
 800bd56:	f7ff f989 	bl	800b06c <__pow5mult>
 800bd5a:	4681      	mov	r9, r0
 800bd5c:	b9e0      	cbnz	r0, 800bd98 <_strtod_l+0x788>
 800bd5e:	f04f 0900 	mov.w	r9, #0
 800bd62:	e674      	b.n	800ba4e <_strtod_l+0x43e>
 800bd64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bd68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bd6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bd70:	35e2      	adds	r5, #226	@ 0xe2
 800bd72:	fa01 f305 	lsl.w	r3, r1, r5
 800bd76:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd78:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bd7a:	e7ba      	b.n	800bcf2 <_strtod_l+0x6e2>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd80:	2301      	movs	r3, #1
 800bd82:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd84:	e7b5      	b.n	800bcf2 <_strtod_l+0x6e2>
 800bd86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd88:	9805      	ldr	r0, [sp, #20]
 800bd8a:	462a      	mov	r2, r5
 800bd8c:	f7ff f9c8 	bl	800b120 <__lshift>
 800bd90:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d1d9      	bne.n	800bd4a <_strtod_l+0x73a>
 800bd96:	e65a      	b.n	800ba4e <_strtod_l+0x43e>
 800bd98:	2e00      	cmp	r6, #0
 800bd9a:	dd07      	ble.n	800bdac <_strtod_l+0x79c>
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	9805      	ldr	r0, [sp, #20]
 800bda0:	4632      	mov	r2, r6
 800bda2:	f7ff f9bd 	bl	800b120 <__lshift>
 800bda6:	4681      	mov	r9, r0
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d0d8      	beq.n	800bd5e <_strtod_l+0x74e>
 800bdac:	2f00      	cmp	r7, #0
 800bdae:	dd08      	ble.n	800bdc2 <_strtod_l+0x7b2>
 800bdb0:	4641      	mov	r1, r8
 800bdb2:	9805      	ldr	r0, [sp, #20]
 800bdb4:	463a      	mov	r2, r7
 800bdb6:	f7ff f9b3 	bl	800b120 <__lshift>
 800bdba:	4680      	mov	r8, r0
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	f43f ae46 	beq.w	800ba4e <_strtod_l+0x43e>
 800bdc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdc4:	9805      	ldr	r0, [sp, #20]
 800bdc6:	464a      	mov	r2, r9
 800bdc8:	f7ff fa32 	bl	800b230 <__mdiff>
 800bdcc:	4604      	mov	r4, r0
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	f43f ae3d 	beq.w	800ba4e <_strtod_l+0x43e>
 800bdd4:	68c3      	ldr	r3, [r0, #12]
 800bdd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60c3      	str	r3, [r0, #12]
 800bddc:	4641      	mov	r1, r8
 800bdde:	f7ff fa0b 	bl	800b1f8 <__mcmp>
 800bde2:	2800      	cmp	r0, #0
 800bde4:	da46      	bge.n	800be74 <_strtod_l+0x864>
 800bde6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bde8:	ea53 030a 	orrs.w	r3, r3, sl
 800bdec:	d16c      	bne.n	800bec8 <_strtod_l+0x8b8>
 800bdee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d168      	bne.n	800bec8 <_strtod_l+0x8b8>
 800bdf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdfa:	0d1b      	lsrs	r3, r3, #20
 800bdfc:	051b      	lsls	r3, r3, #20
 800bdfe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be02:	d961      	bls.n	800bec8 <_strtod_l+0x8b8>
 800be04:	6963      	ldr	r3, [r4, #20]
 800be06:	b913      	cbnz	r3, 800be0e <_strtod_l+0x7fe>
 800be08:	6923      	ldr	r3, [r4, #16]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	dd5c      	ble.n	800bec8 <_strtod_l+0x8b8>
 800be0e:	4621      	mov	r1, r4
 800be10:	2201      	movs	r2, #1
 800be12:	9805      	ldr	r0, [sp, #20]
 800be14:	f7ff f984 	bl	800b120 <__lshift>
 800be18:	4641      	mov	r1, r8
 800be1a:	4604      	mov	r4, r0
 800be1c:	f7ff f9ec 	bl	800b1f8 <__mcmp>
 800be20:	2800      	cmp	r0, #0
 800be22:	dd51      	ble.n	800bec8 <_strtod_l+0x8b8>
 800be24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be28:	9a08      	ldr	r2, [sp, #32]
 800be2a:	0d1b      	lsrs	r3, r3, #20
 800be2c:	051b      	lsls	r3, r3, #20
 800be2e:	2a00      	cmp	r2, #0
 800be30:	d06b      	beq.n	800bf0a <_strtod_l+0x8fa>
 800be32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be36:	d868      	bhi.n	800bf0a <_strtod_l+0x8fa>
 800be38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800be3c:	f67f ae9d 	bls.w	800bb7a <_strtod_l+0x56a>
 800be40:	4b0a      	ldr	r3, [pc, #40]	@ (800be6c <_strtod_l+0x85c>)
 800be42:	4650      	mov	r0, sl
 800be44:	4659      	mov	r1, fp
 800be46:	2200      	movs	r2, #0
 800be48:	f7f4 fbf6 	bl	8000638 <__aeabi_dmul>
 800be4c:	4b08      	ldr	r3, [pc, #32]	@ (800be70 <_strtod_l+0x860>)
 800be4e:	400b      	ands	r3, r1
 800be50:	4682      	mov	sl, r0
 800be52:	468b      	mov	fp, r1
 800be54:	2b00      	cmp	r3, #0
 800be56:	f47f ae05 	bne.w	800ba64 <_strtod_l+0x454>
 800be5a:	9a05      	ldr	r2, [sp, #20]
 800be5c:	2322      	movs	r3, #34	@ 0x22
 800be5e:	6013      	str	r3, [r2, #0]
 800be60:	e600      	b.n	800ba64 <_strtod_l+0x454>
 800be62:	bf00      	nop
 800be64:	0800d740 	.word	0x0800d740
 800be68:	fffffc02 	.word	0xfffffc02
 800be6c:	39500000 	.word	0x39500000
 800be70:	7ff00000 	.word	0x7ff00000
 800be74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be78:	d165      	bne.n	800bf46 <_strtod_l+0x936>
 800be7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be80:	b35a      	cbz	r2, 800beda <_strtod_l+0x8ca>
 800be82:	4a9f      	ldr	r2, [pc, #636]	@ (800c100 <_strtod_l+0xaf0>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d12b      	bne.n	800bee0 <_strtod_l+0x8d0>
 800be88:	9b08      	ldr	r3, [sp, #32]
 800be8a:	4651      	mov	r1, sl
 800be8c:	b303      	cbz	r3, 800bed0 <_strtod_l+0x8c0>
 800be8e:	4b9d      	ldr	r3, [pc, #628]	@ (800c104 <_strtod_l+0xaf4>)
 800be90:	465a      	mov	r2, fp
 800be92:	4013      	ands	r3, r2
 800be94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be98:	f04f 32ff 	mov.w	r2, #4294967295
 800be9c:	d81b      	bhi.n	800bed6 <_strtod_l+0x8c6>
 800be9e:	0d1b      	lsrs	r3, r3, #20
 800bea0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bea4:	fa02 f303 	lsl.w	r3, r2, r3
 800bea8:	4299      	cmp	r1, r3
 800beaa:	d119      	bne.n	800bee0 <_strtod_l+0x8d0>
 800beac:	4b96      	ldr	r3, [pc, #600]	@ (800c108 <_strtod_l+0xaf8>)
 800beae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d102      	bne.n	800beba <_strtod_l+0x8aa>
 800beb4:	3101      	adds	r1, #1
 800beb6:	f43f adca 	beq.w	800ba4e <_strtod_l+0x43e>
 800beba:	4b92      	ldr	r3, [pc, #584]	@ (800c104 <_strtod_l+0xaf4>)
 800bebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bebe:	401a      	ands	r2, r3
 800bec0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bec4:	f04f 0a00 	mov.w	sl, #0
 800bec8:	9b08      	ldr	r3, [sp, #32]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1b8      	bne.n	800be40 <_strtod_l+0x830>
 800bece:	e5c9      	b.n	800ba64 <_strtod_l+0x454>
 800bed0:	f04f 33ff 	mov.w	r3, #4294967295
 800bed4:	e7e8      	b.n	800bea8 <_strtod_l+0x898>
 800bed6:	4613      	mov	r3, r2
 800bed8:	e7e6      	b.n	800bea8 <_strtod_l+0x898>
 800beda:	ea53 030a 	orrs.w	r3, r3, sl
 800bede:	d0a1      	beq.n	800be24 <_strtod_l+0x814>
 800bee0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bee2:	b1db      	cbz	r3, 800bf1c <_strtod_l+0x90c>
 800bee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bee6:	4213      	tst	r3, r2
 800bee8:	d0ee      	beq.n	800bec8 <_strtod_l+0x8b8>
 800beea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beec:	9a08      	ldr	r2, [sp, #32]
 800beee:	4650      	mov	r0, sl
 800bef0:	4659      	mov	r1, fp
 800bef2:	b1bb      	cbz	r3, 800bf24 <_strtod_l+0x914>
 800bef4:	f7ff fb6e 	bl	800b5d4 <sulp>
 800bef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800befc:	ec53 2b10 	vmov	r2, r3, d0
 800bf00:	f7f4 f9e4 	bl	80002cc <__adddf3>
 800bf04:	4682      	mov	sl, r0
 800bf06:	468b      	mov	fp, r1
 800bf08:	e7de      	b.n	800bec8 <_strtod_l+0x8b8>
 800bf0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bf0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf16:	f04f 3aff 	mov.w	sl, #4294967295
 800bf1a:	e7d5      	b.n	800bec8 <_strtod_l+0x8b8>
 800bf1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf1e:	ea13 0f0a 	tst.w	r3, sl
 800bf22:	e7e1      	b.n	800bee8 <_strtod_l+0x8d8>
 800bf24:	f7ff fb56 	bl	800b5d4 <sulp>
 800bf28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf2c:	ec53 2b10 	vmov	r2, r3, d0
 800bf30:	f7f4 f9ca 	bl	80002c8 <__aeabi_dsub>
 800bf34:	2200      	movs	r2, #0
 800bf36:	2300      	movs	r3, #0
 800bf38:	4682      	mov	sl, r0
 800bf3a:	468b      	mov	fp, r1
 800bf3c:	f7f4 fde4 	bl	8000b08 <__aeabi_dcmpeq>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d0c1      	beq.n	800bec8 <_strtod_l+0x8b8>
 800bf44:	e619      	b.n	800bb7a <_strtod_l+0x56a>
 800bf46:	4641      	mov	r1, r8
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f7ff facd 	bl	800b4e8 <__ratio>
 800bf4e:	ec57 6b10 	vmov	r6, r7, d0
 800bf52:	2200      	movs	r2, #0
 800bf54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf58:	4630      	mov	r0, r6
 800bf5a:	4639      	mov	r1, r7
 800bf5c:	f7f4 fde8 	bl	8000b30 <__aeabi_dcmple>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d06f      	beq.n	800c044 <_strtod_l+0xa34>
 800bf64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d17a      	bne.n	800c060 <_strtod_l+0xa50>
 800bf6a:	f1ba 0f00 	cmp.w	sl, #0
 800bf6e:	d158      	bne.n	800c022 <_strtod_l+0xa12>
 800bf70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d15a      	bne.n	800c030 <_strtod_l+0xa20>
 800bf7a:	4b64      	ldr	r3, [pc, #400]	@ (800c10c <_strtod_l+0xafc>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	4630      	mov	r0, r6
 800bf80:	4639      	mov	r1, r7
 800bf82:	f7f4 fdcb 	bl	8000b1c <__aeabi_dcmplt>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d159      	bne.n	800c03e <_strtod_l+0xa2e>
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	4b60      	ldr	r3, [pc, #384]	@ (800c110 <_strtod_l+0xb00>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	f7f4 fb51 	bl	8000638 <__aeabi_dmul>
 800bf96:	4606      	mov	r6, r0
 800bf98:	460f      	mov	r7, r1
 800bf9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bf9e:	9606      	str	r6, [sp, #24]
 800bfa0:	9307      	str	r3, [sp, #28]
 800bfa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfa6:	4d57      	ldr	r5, [pc, #348]	@ (800c104 <_strtod_l+0xaf4>)
 800bfa8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bfac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfae:	401d      	ands	r5, r3
 800bfb0:	4b58      	ldr	r3, [pc, #352]	@ (800c114 <_strtod_l+0xb04>)
 800bfb2:	429d      	cmp	r5, r3
 800bfb4:	f040 80b2 	bne.w	800c11c <_strtod_l+0xb0c>
 800bfb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bfbe:	ec4b ab10 	vmov	d0, sl, fp
 800bfc2:	f7ff f9c9 	bl	800b358 <__ulp>
 800bfc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfca:	ec51 0b10 	vmov	r0, r1, d0
 800bfce:	f7f4 fb33 	bl	8000638 <__aeabi_dmul>
 800bfd2:	4652      	mov	r2, sl
 800bfd4:	465b      	mov	r3, fp
 800bfd6:	f7f4 f979 	bl	80002cc <__adddf3>
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4949      	ldr	r1, [pc, #292]	@ (800c104 <_strtod_l+0xaf4>)
 800bfde:	4a4e      	ldr	r2, [pc, #312]	@ (800c118 <_strtod_l+0xb08>)
 800bfe0:	4019      	ands	r1, r3
 800bfe2:	4291      	cmp	r1, r2
 800bfe4:	4682      	mov	sl, r0
 800bfe6:	d942      	bls.n	800c06e <_strtod_l+0xa5e>
 800bfe8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bfea:	4b47      	ldr	r3, [pc, #284]	@ (800c108 <_strtod_l+0xaf8>)
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d103      	bne.n	800bff8 <_strtod_l+0x9e8>
 800bff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bff2:	3301      	adds	r3, #1
 800bff4:	f43f ad2b 	beq.w	800ba4e <_strtod_l+0x43e>
 800bff8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c108 <_strtod_l+0xaf8>
 800bffc:	f04f 3aff 	mov.w	sl, #4294967295
 800c000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c002:	9805      	ldr	r0, [sp, #20]
 800c004:	f7fe fe74 	bl	800acf0 <_Bfree>
 800c008:	9805      	ldr	r0, [sp, #20]
 800c00a:	4649      	mov	r1, r9
 800c00c:	f7fe fe70 	bl	800acf0 <_Bfree>
 800c010:	9805      	ldr	r0, [sp, #20]
 800c012:	4641      	mov	r1, r8
 800c014:	f7fe fe6c 	bl	800acf0 <_Bfree>
 800c018:	9805      	ldr	r0, [sp, #20]
 800c01a:	4621      	mov	r1, r4
 800c01c:	f7fe fe68 	bl	800acf0 <_Bfree>
 800c020:	e618      	b.n	800bc54 <_strtod_l+0x644>
 800c022:	f1ba 0f01 	cmp.w	sl, #1
 800c026:	d103      	bne.n	800c030 <_strtod_l+0xa20>
 800c028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f43f ada5 	beq.w	800bb7a <_strtod_l+0x56a>
 800c030:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c0e0 <_strtod_l+0xad0>
 800c034:	4f35      	ldr	r7, [pc, #212]	@ (800c10c <_strtod_l+0xafc>)
 800c036:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c03a:	2600      	movs	r6, #0
 800c03c:	e7b1      	b.n	800bfa2 <_strtod_l+0x992>
 800c03e:	4f34      	ldr	r7, [pc, #208]	@ (800c110 <_strtod_l+0xb00>)
 800c040:	2600      	movs	r6, #0
 800c042:	e7aa      	b.n	800bf9a <_strtod_l+0x98a>
 800c044:	4b32      	ldr	r3, [pc, #200]	@ (800c110 <_strtod_l+0xb00>)
 800c046:	4630      	mov	r0, r6
 800c048:	4639      	mov	r1, r7
 800c04a:	2200      	movs	r2, #0
 800c04c:	f7f4 faf4 	bl	8000638 <__aeabi_dmul>
 800c050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c052:	4606      	mov	r6, r0
 800c054:	460f      	mov	r7, r1
 800c056:	2b00      	cmp	r3, #0
 800c058:	d09f      	beq.n	800bf9a <_strtod_l+0x98a>
 800c05a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c05e:	e7a0      	b.n	800bfa2 <_strtod_l+0x992>
 800c060:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c0e8 <_strtod_l+0xad8>
 800c064:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c068:	ec57 6b17 	vmov	r6, r7, d7
 800c06c:	e799      	b.n	800bfa2 <_strtod_l+0x992>
 800c06e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c072:	9b08      	ldr	r3, [sp, #32]
 800c074:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1c1      	bne.n	800c000 <_strtod_l+0x9f0>
 800c07c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c080:	0d1b      	lsrs	r3, r3, #20
 800c082:	051b      	lsls	r3, r3, #20
 800c084:	429d      	cmp	r5, r3
 800c086:	d1bb      	bne.n	800c000 <_strtod_l+0x9f0>
 800c088:	4630      	mov	r0, r6
 800c08a:	4639      	mov	r1, r7
 800c08c:	f7f4 fe34 	bl	8000cf8 <__aeabi_d2lz>
 800c090:	f7f4 faa4 	bl	80005dc <__aeabi_l2d>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f7f4 f914 	bl	80002c8 <__aeabi_dsub>
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c0a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ae:	ea46 060a 	orr.w	r6, r6, sl
 800c0b2:	431e      	orrs	r6, r3
 800c0b4:	d06f      	beq.n	800c196 <_strtod_l+0xb86>
 800c0b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c0f0 <_strtod_l+0xae0>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	f7f4 fd2e 	bl	8000b1c <__aeabi_dcmplt>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	f47f accf 	bne.w	800ba64 <_strtod_l+0x454>
 800c0c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c0f8 <_strtod_l+0xae8>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0d0:	f7f4 fd42 	bl	8000b58 <__aeabi_dcmpgt>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d093      	beq.n	800c000 <_strtod_l+0x9f0>
 800c0d8:	e4c4      	b.n	800ba64 <_strtod_l+0x454>
 800c0da:	bf00      	nop
 800c0dc:	f3af 8000 	nop.w
 800c0e0:	00000000 	.word	0x00000000
 800c0e4:	bff00000 	.word	0xbff00000
 800c0e8:	00000000 	.word	0x00000000
 800c0ec:	3ff00000 	.word	0x3ff00000
 800c0f0:	94a03595 	.word	0x94a03595
 800c0f4:	3fdfffff 	.word	0x3fdfffff
 800c0f8:	35afe535 	.word	0x35afe535
 800c0fc:	3fe00000 	.word	0x3fe00000
 800c100:	000fffff 	.word	0x000fffff
 800c104:	7ff00000 	.word	0x7ff00000
 800c108:	7fefffff 	.word	0x7fefffff
 800c10c:	3ff00000 	.word	0x3ff00000
 800c110:	3fe00000 	.word	0x3fe00000
 800c114:	7fe00000 	.word	0x7fe00000
 800c118:	7c9fffff 	.word	0x7c9fffff
 800c11c:	9b08      	ldr	r3, [sp, #32]
 800c11e:	b323      	cbz	r3, 800c16a <_strtod_l+0xb5a>
 800c120:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c124:	d821      	bhi.n	800c16a <_strtod_l+0xb5a>
 800c126:	a328      	add	r3, pc, #160	@ (adr r3, 800c1c8 <_strtod_l+0xbb8>)
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	4630      	mov	r0, r6
 800c12e:	4639      	mov	r1, r7
 800c130:	f7f4 fcfe 	bl	8000b30 <__aeabi_dcmple>
 800c134:	b1a0      	cbz	r0, 800c160 <_strtod_l+0xb50>
 800c136:	4639      	mov	r1, r7
 800c138:	4630      	mov	r0, r6
 800c13a:	f7f4 fd55 	bl	8000be8 <__aeabi_d2uiz>
 800c13e:	2801      	cmp	r0, #1
 800c140:	bf38      	it	cc
 800c142:	2001      	movcc	r0, #1
 800c144:	f7f4 f9fe 	bl	8000544 <__aeabi_ui2d>
 800c148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	b9fb      	cbnz	r3, 800c190 <_strtod_l+0xb80>
 800c150:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c154:	9014      	str	r0, [sp, #80]	@ 0x50
 800c156:	9315      	str	r3, [sp, #84]	@ 0x54
 800c158:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c15c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c160:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c162:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c166:	1b5b      	subs	r3, r3, r5
 800c168:	9311      	str	r3, [sp, #68]	@ 0x44
 800c16a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c16e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c172:	f7ff f8f1 	bl	800b358 <__ulp>
 800c176:	4650      	mov	r0, sl
 800c178:	ec53 2b10 	vmov	r2, r3, d0
 800c17c:	4659      	mov	r1, fp
 800c17e:	f7f4 fa5b 	bl	8000638 <__aeabi_dmul>
 800c182:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c186:	f7f4 f8a1 	bl	80002cc <__adddf3>
 800c18a:	4682      	mov	sl, r0
 800c18c:	468b      	mov	fp, r1
 800c18e:	e770      	b.n	800c072 <_strtod_l+0xa62>
 800c190:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c194:	e7e0      	b.n	800c158 <_strtod_l+0xb48>
 800c196:	a30e      	add	r3, pc, #56	@ (adr r3, 800c1d0 <_strtod_l+0xbc0>)
 800c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19c:	f7f4 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 800c1a0:	e798      	b.n	800c0d4 <_strtod_l+0xac4>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c1a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	f7ff ba6d 	b.w	800b68a <_strtod_l+0x7a>
 800c1b0:	2a65      	cmp	r2, #101	@ 0x65
 800c1b2:	f43f ab66 	beq.w	800b882 <_strtod_l+0x272>
 800c1b6:	2a45      	cmp	r2, #69	@ 0x45
 800c1b8:	f43f ab63 	beq.w	800b882 <_strtod_l+0x272>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f7ff bb9e 	b.w	800b8fe <_strtod_l+0x2ee>
 800c1c2:	bf00      	nop
 800c1c4:	f3af 8000 	nop.w
 800c1c8:	ffc00000 	.word	0xffc00000
 800c1cc:	41dfffff 	.word	0x41dfffff
 800c1d0:	94a03595 	.word	0x94a03595
 800c1d4:	3fcfffff 	.word	0x3fcfffff

0800c1d8 <_strtod_r>:
 800c1d8:	4b01      	ldr	r3, [pc, #4]	@ (800c1e0 <_strtod_r+0x8>)
 800c1da:	f7ff ba19 	b.w	800b610 <_strtod_l>
 800c1de:	bf00      	nop
 800c1e0:	20000078 	.word	0x20000078

0800c1e4 <__ssputs_r>:
 800c1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e8:	688e      	ldr	r6, [r1, #8]
 800c1ea:	461f      	mov	r7, r3
 800c1ec:	42be      	cmp	r6, r7
 800c1ee:	680b      	ldr	r3, [r1, #0]
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	4690      	mov	r8, r2
 800c1f6:	d82d      	bhi.n	800c254 <__ssputs_r+0x70>
 800c1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c200:	d026      	beq.n	800c250 <__ssputs_r+0x6c>
 800c202:	6965      	ldr	r5, [r4, #20]
 800c204:	6909      	ldr	r1, [r1, #16]
 800c206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c20a:	eba3 0901 	sub.w	r9, r3, r1
 800c20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c212:	1c7b      	adds	r3, r7, #1
 800c214:	444b      	add	r3, r9
 800c216:	106d      	asrs	r5, r5, #1
 800c218:	429d      	cmp	r5, r3
 800c21a:	bf38      	it	cc
 800c21c:	461d      	movcc	r5, r3
 800c21e:	0553      	lsls	r3, r2, #21
 800c220:	d527      	bpl.n	800c272 <__ssputs_r+0x8e>
 800c222:	4629      	mov	r1, r5
 800c224:	f7fe fc98 	bl	800ab58 <_malloc_r>
 800c228:	4606      	mov	r6, r0
 800c22a:	b360      	cbz	r0, 800c286 <__ssputs_r+0xa2>
 800c22c:	6921      	ldr	r1, [r4, #16]
 800c22e:	464a      	mov	r2, r9
 800c230:	f000 fa06 	bl	800c640 <memcpy>
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	6126      	str	r6, [r4, #16]
 800c242:	6165      	str	r5, [r4, #20]
 800c244:	444e      	add	r6, r9
 800c246:	eba5 0509 	sub.w	r5, r5, r9
 800c24a:	6026      	str	r6, [r4, #0]
 800c24c:	60a5      	str	r5, [r4, #8]
 800c24e:	463e      	mov	r6, r7
 800c250:	42be      	cmp	r6, r7
 800c252:	d900      	bls.n	800c256 <__ssputs_r+0x72>
 800c254:	463e      	mov	r6, r7
 800c256:	6820      	ldr	r0, [r4, #0]
 800c258:	4632      	mov	r2, r6
 800c25a:	4641      	mov	r1, r8
 800c25c:	f000 f9c6 	bl	800c5ec <memmove>
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	1b9b      	subs	r3, r3, r6
 800c264:	60a3      	str	r3, [r4, #8]
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	4433      	add	r3, r6
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	2000      	movs	r0, #0
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	462a      	mov	r2, r5
 800c274:	f000 fd79 	bl	800cd6a <_realloc_r>
 800c278:	4606      	mov	r6, r0
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d1e0      	bne.n	800c240 <__ssputs_r+0x5c>
 800c27e:	6921      	ldr	r1, [r4, #16]
 800c280:	4650      	mov	r0, sl
 800c282:	f7fe fbf5 	bl	800aa70 <_free_r>
 800c286:	230c      	movs	r3, #12
 800c288:	f8ca 3000 	str.w	r3, [sl]
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e7e9      	b.n	800c26e <__ssputs_r+0x8a>
	...

0800c29c <_svfiprintf_r>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	4698      	mov	r8, r3
 800c2a2:	898b      	ldrh	r3, [r1, #12]
 800c2a4:	061b      	lsls	r3, r3, #24
 800c2a6:	b09d      	sub	sp, #116	@ 0x74
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	4614      	mov	r4, r2
 800c2ae:	d510      	bpl.n	800c2d2 <_svfiprintf_r+0x36>
 800c2b0:	690b      	ldr	r3, [r1, #16]
 800c2b2:	b973      	cbnz	r3, 800c2d2 <_svfiprintf_r+0x36>
 800c2b4:	2140      	movs	r1, #64	@ 0x40
 800c2b6:	f7fe fc4f 	bl	800ab58 <_malloc_r>
 800c2ba:	6028      	str	r0, [r5, #0]
 800c2bc:	6128      	str	r0, [r5, #16]
 800c2be:	b930      	cbnz	r0, 800c2ce <_svfiprintf_r+0x32>
 800c2c0:	230c      	movs	r3, #12
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	b01d      	add	sp, #116	@ 0x74
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	2340      	movs	r3, #64	@ 0x40
 800c2d0:	616b      	str	r3, [r5, #20]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d6:	2320      	movs	r3, #32
 800c2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e0:	2330      	movs	r3, #48	@ 0x30
 800c2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c480 <_svfiprintf_r+0x1e4>
 800c2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2ea:	f04f 0901 	mov.w	r9, #1
 800c2ee:	4623      	mov	r3, r4
 800c2f0:	469a      	mov	sl, r3
 800c2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f6:	b10a      	cbz	r2, 800c2fc <_svfiprintf_r+0x60>
 800c2f8:	2a25      	cmp	r2, #37	@ 0x25
 800c2fa:	d1f9      	bne.n	800c2f0 <_svfiprintf_r+0x54>
 800c2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c300:	d00b      	beq.n	800c31a <_svfiprintf_r+0x7e>
 800c302:	465b      	mov	r3, fp
 800c304:	4622      	mov	r2, r4
 800c306:	4629      	mov	r1, r5
 800c308:	4638      	mov	r0, r7
 800c30a:	f7ff ff6b 	bl	800c1e4 <__ssputs_r>
 800c30e:	3001      	adds	r0, #1
 800c310:	f000 80a7 	beq.w	800c462 <_svfiprintf_r+0x1c6>
 800c314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c316:	445a      	add	r2, fp
 800c318:	9209      	str	r2, [sp, #36]	@ 0x24
 800c31a:	f89a 3000 	ldrb.w	r3, [sl]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 809f 	beq.w	800c462 <_svfiprintf_r+0x1c6>
 800c324:	2300      	movs	r3, #0
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c32e:	f10a 0a01 	add.w	sl, sl, #1
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	9307      	str	r3, [sp, #28]
 800c336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c33c:	4654      	mov	r4, sl
 800c33e:	2205      	movs	r2, #5
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	484e      	ldr	r0, [pc, #312]	@ (800c480 <_svfiprintf_r+0x1e4>)
 800c346:	f7f3 ff63 	bl	8000210 <memchr>
 800c34a:	9a04      	ldr	r2, [sp, #16]
 800c34c:	b9d8      	cbnz	r0, 800c386 <_svfiprintf_r+0xea>
 800c34e:	06d0      	lsls	r0, r2, #27
 800c350:	bf44      	itt	mi
 800c352:	2320      	movmi	r3, #32
 800c354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c358:	0711      	lsls	r1, r2, #28
 800c35a:	bf44      	itt	mi
 800c35c:	232b      	movmi	r3, #43	@ 0x2b
 800c35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c362:	f89a 3000 	ldrb.w	r3, [sl]
 800c366:	2b2a      	cmp	r3, #42	@ 0x2a
 800c368:	d015      	beq.n	800c396 <_svfiprintf_r+0xfa>
 800c36a:	9a07      	ldr	r2, [sp, #28]
 800c36c:	4654      	mov	r4, sl
 800c36e:	2000      	movs	r0, #0
 800c370:	f04f 0c0a 	mov.w	ip, #10
 800c374:	4621      	mov	r1, r4
 800c376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c37a:	3b30      	subs	r3, #48	@ 0x30
 800c37c:	2b09      	cmp	r3, #9
 800c37e:	d94b      	bls.n	800c418 <_svfiprintf_r+0x17c>
 800c380:	b1b0      	cbz	r0, 800c3b0 <_svfiprintf_r+0x114>
 800c382:	9207      	str	r2, [sp, #28]
 800c384:	e014      	b.n	800c3b0 <_svfiprintf_r+0x114>
 800c386:	eba0 0308 	sub.w	r3, r0, r8
 800c38a:	fa09 f303 	lsl.w	r3, r9, r3
 800c38e:	4313      	orrs	r3, r2
 800c390:	9304      	str	r3, [sp, #16]
 800c392:	46a2      	mov	sl, r4
 800c394:	e7d2      	b.n	800c33c <_svfiprintf_r+0xa0>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	1d19      	adds	r1, r3, #4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	9103      	str	r1, [sp, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bfbb      	ittet	lt
 800c3a2:	425b      	neglt	r3, r3
 800c3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a8:	9307      	strge	r3, [sp, #28]
 800c3aa:	9307      	strlt	r3, [sp, #28]
 800c3ac:	bfb8      	it	lt
 800c3ae:	9204      	strlt	r2, [sp, #16]
 800c3b0:	7823      	ldrb	r3, [r4, #0]
 800c3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3b4:	d10a      	bne.n	800c3cc <_svfiprintf_r+0x130>
 800c3b6:	7863      	ldrb	r3, [r4, #1]
 800c3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ba:	d132      	bne.n	800c422 <_svfiprintf_r+0x186>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	9203      	str	r2, [sp, #12]
 800c3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3c8:	3402      	adds	r4, #2
 800c3ca:	9305      	str	r3, [sp, #20]
 800c3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c490 <_svfiprintf_r+0x1f4>
 800c3d0:	7821      	ldrb	r1, [r4, #0]
 800c3d2:	2203      	movs	r2, #3
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	f7f3 ff1b 	bl	8000210 <memchr>
 800c3da:	b138      	cbz	r0, 800c3ec <_svfiprintf_r+0x150>
 800c3dc:	9b04      	ldr	r3, [sp, #16]
 800c3de:	eba0 000a 	sub.w	r0, r0, sl
 800c3e2:	2240      	movs	r2, #64	@ 0x40
 800c3e4:	4082      	lsls	r2, r0
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	3401      	adds	r4, #1
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f0:	4824      	ldr	r0, [pc, #144]	@ (800c484 <_svfiprintf_r+0x1e8>)
 800c3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3f6:	2206      	movs	r2, #6
 800c3f8:	f7f3 ff0a 	bl	8000210 <memchr>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d036      	beq.n	800c46e <_svfiprintf_r+0x1d2>
 800c400:	4b21      	ldr	r3, [pc, #132]	@ (800c488 <_svfiprintf_r+0x1ec>)
 800c402:	bb1b      	cbnz	r3, 800c44c <_svfiprintf_r+0x1b0>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	3307      	adds	r3, #7
 800c408:	f023 0307 	bic.w	r3, r3, #7
 800c40c:	3308      	adds	r3, #8
 800c40e:	9303      	str	r3, [sp, #12]
 800c410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c412:	4433      	add	r3, r6
 800c414:	9309      	str	r3, [sp, #36]	@ 0x24
 800c416:	e76a      	b.n	800c2ee <_svfiprintf_r+0x52>
 800c418:	fb0c 3202 	mla	r2, ip, r2, r3
 800c41c:	460c      	mov	r4, r1
 800c41e:	2001      	movs	r0, #1
 800c420:	e7a8      	b.n	800c374 <_svfiprintf_r+0xd8>
 800c422:	2300      	movs	r3, #0
 800c424:	3401      	adds	r4, #1
 800c426:	9305      	str	r3, [sp, #20]
 800c428:	4619      	mov	r1, r3
 800c42a:	f04f 0c0a 	mov.w	ip, #10
 800c42e:	4620      	mov	r0, r4
 800c430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c434:	3a30      	subs	r2, #48	@ 0x30
 800c436:	2a09      	cmp	r2, #9
 800c438:	d903      	bls.n	800c442 <_svfiprintf_r+0x1a6>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0c6      	beq.n	800c3cc <_svfiprintf_r+0x130>
 800c43e:	9105      	str	r1, [sp, #20]
 800c440:	e7c4      	b.n	800c3cc <_svfiprintf_r+0x130>
 800c442:	fb0c 2101 	mla	r1, ip, r1, r2
 800c446:	4604      	mov	r4, r0
 800c448:	2301      	movs	r3, #1
 800c44a:	e7f0      	b.n	800c42e <_svfiprintf_r+0x192>
 800c44c:	ab03      	add	r3, sp, #12
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	462a      	mov	r2, r5
 800c452:	4b0e      	ldr	r3, [pc, #56]	@ (800c48c <_svfiprintf_r+0x1f0>)
 800c454:	a904      	add	r1, sp, #16
 800c456:	4638      	mov	r0, r7
 800c458:	f7fc fd34 	bl	8008ec4 <_printf_float>
 800c45c:	1c42      	adds	r2, r0, #1
 800c45e:	4606      	mov	r6, r0
 800c460:	d1d6      	bne.n	800c410 <_svfiprintf_r+0x174>
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	065b      	lsls	r3, r3, #25
 800c466:	f53f af2d 	bmi.w	800c2c4 <_svfiprintf_r+0x28>
 800c46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c46c:	e72c      	b.n	800c2c8 <_svfiprintf_r+0x2c>
 800c46e:	ab03      	add	r3, sp, #12
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	462a      	mov	r2, r5
 800c474:	4b05      	ldr	r3, [pc, #20]	@ (800c48c <_svfiprintf_r+0x1f0>)
 800c476:	a904      	add	r1, sp, #16
 800c478:	4638      	mov	r0, r7
 800c47a:	f7fc ffbb 	bl	80093f4 <_printf_i>
 800c47e:	e7ed      	b.n	800c45c <_svfiprintf_r+0x1c0>
 800c480:	0800d768 	.word	0x0800d768
 800c484:	0800d772 	.word	0x0800d772
 800c488:	08008ec5 	.word	0x08008ec5
 800c48c:	0800c1e5 	.word	0x0800c1e5
 800c490:	0800d76e 	.word	0x0800d76e

0800c494 <__sflush_r>:
 800c494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49c:	0716      	lsls	r6, r2, #28
 800c49e:	4605      	mov	r5, r0
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	d454      	bmi.n	800c54e <__sflush_r+0xba>
 800c4a4:	684b      	ldr	r3, [r1, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	dc02      	bgt.n	800c4b0 <__sflush_r+0x1c>
 800c4aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dd48      	ble.n	800c542 <__sflush_r+0xae>
 800c4b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4b2:	2e00      	cmp	r6, #0
 800c4b4:	d045      	beq.n	800c542 <__sflush_r+0xae>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4bc:	682f      	ldr	r7, [r5, #0]
 800c4be:	6a21      	ldr	r1, [r4, #32]
 800c4c0:	602b      	str	r3, [r5, #0]
 800c4c2:	d030      	beq.n	800c526 <__sflush_r+0x92>
 800c4c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4c6:	89a3      	ldrh	r3, [r4, #12]
 800c4c8:	0759      	lsls	r1, r3, #29
 800c4ca:	d505      	bpl.n	800c4d8 <__sflush_r+0x44>
 800c4cc:	6863      	ldr	r3, [r4, #4]
 800c4ce:	1ad2      	subs	r2, r2, r3
 800c4d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4d2:	b10b      	cbz	r3, 800c4d8 <__sflush_r+0x44>
 800c4d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	2300      	movs	r3, #0
 800c4da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4dc:	6a21      	ldr	r1, [r4, #32]
 800c4de:	4628      	mov	r0, r5
 800c4e0:	47b0      	blx	r6
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	d106      	bne.n	800c4f6 <__sflush_r+0x62>
 800c4e8:	6829      	ldr	r1, [r5, #0]
 800c4ea:	291d      	cmp	r1, #29
 800c4ec:	d82b      	bhi.n	800c546 <__sflush_r+0xb2>
 800c4ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c598 <__sflush_r+0x104>)
 800c4f0:	410a      	asrs	r2, r1
 800c4f2:	07d6      	lsls	r6, r2, #31
 800c4f4:	d427      	bmi.n	800c546 <__sflush_r+0xb2>
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	6062      	str	r2, [r4, #4]
 800c4fa:	04d9      	lsls	r1, r3, #19
 800c4fc:	6922      	ldr	r2, [r4, #16]
 800c4fe:	6022      	str	r2, [r4, #0]
 800c500:	d504      	bpl.n	800c50c <__sflush_r+0x78>
 800c502:	1c42      	adds	r2, r0, #1
 800c504:	d101      	bne.n	800c50a <__sflush_r+0x76>
 800c506:	682b      	ldr	r3, [r5, #0]
 800c508:	b903      	cbnz	r3, 800c50c <__sflush_r+0x78>
 800c50a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c50c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c50e:	602f      	str	r7, [r5, #0]
 800c510:	b1b9      	cbz	r1, 800c542 <__sflush_r+0xae>
 800c512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c516:	4299      	cmp	r1, r3
 800c518:	d002      	beq.n	800c520 <__sflush_r+0x8c>
 800c51a:	4628      	mov	r0, r5
 800c51c:	f7fe faa8 	bl	800aa70 <_free_r>
 800c520:	2300      	movs	r3, #0
 800c522:	6363      	str	r3, [r4, #52]	@ 0x34
 800c524:	e00d      	b.n	800c542 <__sflush_r+0xae>
 800c526:	2301      	movs	r3, #1
 800c528:	4628      	mov	r0, r5
 800c52a:	47b0      	blx	r6
 800c52c:	4602      	mov	r2, r0
 800c52e:	1c50      	adds	r0, r2, #1
 800c530:	d1c9      	bne.n	800c4c6 <__sflush_r+0x32>
 800c532:	682b      	ldr	r3, [r5, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d0c6      	beq.n	800c4c6 <__sflush_r+0x32>
 800c538:	2b1d      	cmp	r3, #29
 800c53a:	d001      	beq.n	800c540 <__sflush_r+0xac>
 800c53c:	2b16      	cmp	r3, #22
 800c53e:	d11e      	bne.n	800c57e <__sflush_r+0xea>
 800c540:	602f      	str	r7, [r5, #0]
 800c542:	2000      	movs	r0, #0
 800c544:	e022      	b.n	800c58c <__sflush_r+0xf8>
 800c546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c54a:	b21b      	sxth	r3, r3
 800c54c:	e01b      	b.n	800c586 <__sflush_r+0xf2>
 800c54e:	690f      	ldr	r7, [r1, #16]
 800c550:	2f00      	cmp	r7, #0
 800c552:	d0f6      	beq.n	800c542 <__sflush_r+0xae>
 800c554:	0793      	lsls	r3, r2, #30
 800c556:	680e      	ldr	r6, [r1, #0]
 800c558:	bf08      	it	eq
 800c55a:	694b      	ldreq	r3, [r1, #20]
 800c55c:	600f      	str	r7, [r1, #0]
 800c55e:	bf18      	it	ne
 800c560:	2300      	movne	r3, #0
 800c562:	eba6 0807 	sub.w	r8, r6, r7
 800c566:	608b      	str	r3, [r1, #8]
 800c568:	f1b8 0f00 	cmp.w	r8, #0
 800c56c:	dde9      	ble.n	800c542 <__sflush_r+0xae>
 800c56e:	6a21      	ldr	r1, [r4, #32]
 800c570:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c572:	4643      	mov	r3, r8
 800c574:	463a      	mov	r2, r7
 800c576:	4628      	mov	r0, r5
 800c578:	47b0      	blx	r6
 800c57a:	2800      	cmp	r0, #0
 800c57c:	dc08      	bgt.n	800c590 <__sflush_r+0xfc>
 800c57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c586:	81a3      	strh	r3, [r4, #12]
 800c588:	f04f 30ff 	mov.w	r0, #4294967295
 800c58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c590:	4407      	add	r7, r0
 800c592:	eba8 0800 	sub.w	r8, r8, r0
 800c596:	e7e7      	b.n	800c568 <__sflush_r+0xd4>
 800c598:	dfbffffe 	.word	0xdfbffffe

0800c59c <_fflush_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	690b      	ldr	r3, [r1, #16]
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	b913      	cbnz	r3, 800c5ac <_fflush_r+0x10>
 800c5a6:	2500      	movs	r5, #0
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	b118      	cbz	r0, 800c5b6 <_fflush_r+0x1a>
 800c5ae:	6a03      	ldr	r3, [r0, #32]
 800c5b0:	b90b      	cbnz	r3, 800c5b6 <_fflush_r+0x1a>
 800c5b2:	f7fd fadf 	bl	8009b74 <__sinit>
 800c5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d0f3      	beq.n	800c5a6 <_fflush_r+0xa>
 800c5be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5c0:	07d0      	lsls	r0, r2, #31
 800c5c2:	d404      	bmi.n	800c5ce <_fflush_r+0x32>
 800c5c4:	0599      	lsls	r1, r3, #22
 800c5c6:	d402      	bmi.n	800c5ce <_fflush_r+0x32>
 800c5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5ca:	f7fd fbfc 	bl	8009dc6 <__retarget_lock_acquire_recursive>
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	f7ff ff5f 	bl	800c494 <__sflush_r>
 800c5d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5d8:	07da      	lsls	r2, r3, #31
 800c5da:	4605      	mov	r5, r0
 800c5dc:	d4e4      	bmi.n	800c5a8 <_fflush_r+0xc>
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	059b      	lsls	r3, r3, #22
 800c5e2:	d4e1      	bmi.n	800c5a8 <_fflush_r+0xc>
 800c5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5e6:	f7fd fbef 	bl	8009dc8 <__retarget_lock_release_recursive>
 800c5ea:	e7dd      	b.n	800c5a8 <_fflush_r+0xc>

0800c5ec <memmove>:
 800c5ec:	4288      	cmp	r0, r1
 800c5ee:	b510      	push	{r4, lr}
 800c5f0:	eb01 0402 	add.w	r4, r1, r2
 800c5f4:	d902      	bls.n	800c5fc <memmove+0x10>
 800c5f6:	4284      	cmp	r4, r0
 800c5f8:	4623      	mov	r3, r4
 800c5fa:	d807      	bhi.n	800c60c <memmove+0x20>
 800c5fc:	1e43      	subs	r3, r0, #1
 800c5fe:	42a1      	cmp	r1, r4
 800c600:	d008      	beq.n	800c614 <memmove+0x28>
 800c602:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c60a:	e7f8      	b.n	800c5fe <memmove+0x12>
 800c60c:	4402      	add	r2, r0
 800c60e:	4601      	mov	r1, r0
 800c610:	428a      	cmp	r2, r1
 800c612:	d100      	bne.n	800c616 <memmove+0x2a>
 800c614:	bd10      	pop	{r4, pc}
 800c616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c61a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c61e:	e7f7      	b.n	800c610 <memmove+0x24>

0800c620 <_sbrk_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4d06      	ldr	r5, [pc, #24]	@ (800c63c <_sbrk_r+0x1c>)
 800c624:	2300      	movs	r3, #0
 800c626:	4604      	mov	r4, r0
 800c628:	4608      	mov	r0, r1
 800c62a:	602b      	str	r3, [r5, #0]
 800c62c:	f7f5 fc66 	bl	8001efc <_sbrk>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d102      	bne.n	800c63a <_sbrk_r+0x1a>
 800c634:	682b      	ldr	r3, [r5, #0]
 800c636:	b103      	cbz	r3, 800c63a <_sbrk_r+0x1a>
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	bd38      	pop	{r3, r4, r5, pc}
 800c63c:	20000db4 	.word	0x20000db4

0800c640 <memcpy>:
 800c640:	440a      	add	r2, r1
 800c642:	4291      	cmp	r1, r2
 800c644:	f100 33ff 	add.w	r3, r0, #4294967295
 800c648:	d100      	bne.n	800c64c <memcpy+0xc>
 800c64a:	4770      	bx	lr
 800c64c:	b510      	push	{r4, lr}
 800c64e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c652:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c656:	4291      	cmp	r1, r2
 800c658:	d1f9      	bne.n	800c64e <memcpy+0xe>
 800c65a:	bd10      	pop	{r4, pc}
 800c65c:	0000      	movs	r0, r0
	...

0800c660 <nan>:
 800c660:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c668 <nan+0x8>
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	00000000 	.word	0x00000000
 800c66c:	7ff80000 	.word	0x7ff80000

0800c670 <__assert_func>:
 800c670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c672:	4614      	mov	r4, r2
 800c674:	461a      	mov	r2, r3
 800c676:	4b09      	ldr	r3, [pc, #36]	@ (800c69c <__assert_func+0x2c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4605      	mov	r5, r0
 800c67c:	68d8      	ldr	r0, [r3, #12]
 800c67e:	b954      	cbnz	r4, 800c696 <__assert_func+0x26>
 800c680:	4b07      	ldr	r3, [pc, #28]	@ (800c6a0 <__assert_func+0x30>)
 800c682:	461c      	mov	r4, r3
 800c684:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c688:	9100      	str	r1, [sp, #0]
 800c68a:	462b      	mov	r3, r5
 800c68c:	4905      	ldr	r1, [pc, #20]	@ (800c6a4 <__assert_func+0x34>)
 800c68e:	f000 fba7 	bl	800cde0 <fiprintf>
 800c692:	f000 fbb7 	bl	800ce04 <abort>
 800c696:	4b04      	ldr	r3, [pc, #16]	@ (800c6a8 <__assert_func+0x38>)
 800c698:	e7f4      	b.n	800c684 <__assert_func+0x14>
 800c69a:	bf00      	nop
 800c69c:	20000028 	.word	0x20000028
 800c6a0:	0800d7bc 	.word	0x0800d7bc
 800c6a4:	0800d78e 	.word	0x0800d78e
 800c6a8:	0800d781 	.word	0x0800d781

0800c6ac <_calloc_r>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	fba1 5402 	umull	r5, r4, r1, r2
 800c6b2:	b93c      	cbnz	r4, 800c6c4 <_calloc_r+0x18>
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	f7fe fa4f 	bl	800ab58 <_malloc_r>
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	b928      	cbnz	r0, 800c6ca <_calloc_r+0x1e>
 800c6be:	2600      	movs	r6, #0
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}
 800c6c4:	220c      	movs	r2, #12
 800c6c6:	6002      	str	r2, [r0, #0]
 800c6c8:	e7f9      	b.n	800c6be <_calloc_r+0x12>
 800c6ca:	462a      	mov	r2, r5
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	f7fd faea 	bl	8009ca6 <memset>
 800c6d2:	e7f5      	b.n	800c6c0 <_calloc_r+0x14>

0800c6d4 <rshift>:
 800c6d4:	6903      	ldr	r3, [r0, #16]
 800c6d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c6da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c6e2:	f100 0414 	add.w	r4, r0, #20
 800c6e6:	dd45      	ble.n	800c774 <rshift+0xa0>
 800c6e8:	f011 011f 	ands.w	r1, r1, #31
 800c6ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c6f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c6f4:	d10c      	bne.n	800c710 <rshift+0x3c>
 800c6f6:	f100 0710 	add.w	r7, r0, #16
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	42b1      	cmp	r1, r6
 800c6fe:	d334      	bcc.n	800c76a <rshift+0x96>
 800c700:	1a9b      	subs	r3, r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	1eea      	subs	r2, r5, #3
 800c706:	4296      	cmp	r6, r2
 800c708:	bf38      	it	cc
 800c70a:	2300      	movcc	r3, #0
 800c70c:	4423      	add	r3, r4
 800c70e:	e015      	b.n	800c73c <rshift+0x68>
 800c710:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c714:	f1c1 0820 	rsb	r8, r1, #32
 800c718:	40cf      	lsrs	r7, r1
 800c71a:	f105 0e04 	add.w	lr, r5, #4
 800c71e:	46a1      	mov	r9, r4
 800c720:	4576      	cmp	r6, lr
 800c722:	46f4      	mov	ip, lr
 800c724:	d815      	bhi.n	800c752 <rshift+0x7e>
 800c726:	1a9a      	subs	r2, r3, r2
 800c728:	0092      	lsls	r2, r2, #2
 800c72a:	3a04      	subs	r2, #4
 800c72c:	3501      	adds	r5, #1
 800c72e:	42ae      	cmp	r6, r5
 800c730:	bf38      	it	cc
 800c732:	2200      	movcc	r2, #0
 800c734:	18a3      	adds	r3, r4, r2
 800c736:	50a7      	str	r7, [r4, r2]
 800c738:	b107      	cbz	r7, 800c73c <rshift+0x68>
 800c73a:	3304      	adds	r3, #4
 800c73c:	1b1a      	subs	r2, r3, r4
 800c73e:	42a3      	cmp	r3, r4
 800c740:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c744:	bf08      	it	eq
 800c746:	2300      	moveq	r3, #0
 800c748:	6102      	str	r2, [r0, #16]
 800c74a:	bf08      	it	eq
 800c74c:	6143      	streq	r3, [r0, #20]
 800c74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c752:	f8dc c000 	ldr.w	ip, [ip]
 800c756:	fa0c fc08 	lsl.w	ip, ip, r8
 800c75a:	ea4c 0707 	orr.w	r7, ip, r7
 800c75e:	f849 7b04 	str.w	r7, [r9], #4
 800c762:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c766:	40cf      	lsrs	r7, r1
 800c768:	e7da      	b.n	800c720 <rshift+0x4c>
 800c76a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c76e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c772:	e7c3      	b.n	800c6fc <rshift+0x28>
 800c774:	4623      	mov	r3, r4
 800c776:	e7e1      	b.n	800c73c <rshift+0x68>

0800c778 <__hexdig_fun>:
 800c778:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c77c:	2b09      	cmp	r3, #9
 800c77e:	d802      	bhi.n	800c786 <__hexdig_fun+0xe>
 800c780:	3820      	subs	r0, #32
 800c782:	b2c0      	uxtb	r0, r0
 800c784:	4770      	bx	lr
 800c786:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c78a:	2b05      	cmp	r3, #5
 800c78c:	d801      	bhi.n	800c792 <__hexdig_fun+0x1a>
 800c78e:	3847      	subs	r0, #71	@ 0x47
 800c790:	e7f7      	b.n	800c782 <__hexdig_fun+0xa>
 800c792:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c796:	2b05      	cmp	r3, #5
 800c798:	d801      	bhi.n	800c79e <__hexdig_fun+0x26>
 800c79a:	3827      	subs	r0, #39	@ 0x27
 800c79c:	e7f1      	b.n	800c782 <__hexdig_fun+0xa>
 800c79e:	2000      	movs	r0, #0
 800c7a0:	4770      	bx	lr
	...

0800c7a4 <__gethex>:
 800c7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a8:	b085      	sub	sp, #20
 800c7aa:	468a      	mov	sl, r1
 800c7ac:	9302      	str	r3, [sp, #8]
 800c7ae:	680b      	ldr	r3, [r1, #0]
 800c7b0:	9001      	str	r0, [sp, #4]
 800c7b2:	4690      	mov	r8, r2
 800c7b4:	1c9c      	adds	r4, r3, #2
 800c7b6:	46a1      	mov	r9, r4
 800c7b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c7bc:	2830      	cmp	r0, #48	@ 0x30
 800c7be:	d0fa      	beq.n	800c7b6 <__gethex+0x12>
 800c7c0:	eba9 0303 	sub.w	r3, r9, r3
 800c7c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c7c8:	f7ff ffd6 	bl	800c778 <__hexdig_fun>
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d168      	bne.n	800c8a4 <__gethex+0x100>
 800c7d2:	49a0      	ldr	r1, [pc, #640]	@ (800ca54 <__gethex+0x2b0>)
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	4648      	mov	r0, r9
 800c7d8:	f7fd fa6d 	bl	8009cb6 <strncmp>
 800c7dc:	4607      	mov	r7, r0
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d167      	bne.n	800c8b2 <__gethex+0x10e>
 800c7e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c7e6:	4626      	mov	r6, r4
 800c7e8:	f7ff ffc6 	bl	800c778 <__hexdig_fun>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d062      	beq.n	800c8b6 <__gethex+0x112>
 800c7f0:	4623      	mov	r3, r4
 800c7f2:	7818      	ldrb	r0, [r3, #0]
 800c7f4:	2830      	cmp	r0, #48	@ 0x30
 800c7f6:	4699      	mov	r9, r3
 800c7f8:	f103 0301 	add.w	r3, r3, #1
 800c7fc:	d0f9      	beq.n	800c7f2 <__gethex+0x4e>
 800c7fe:	f7ff ffbb 	bl	800c778 <__hexdig_fun>
 800c802:	fab0 f580 	clz	r5, r0
 800c806:	096d      	lsrs	r5, r5, #5
 800c808:	f04f 0b01 	mov.w	fp, #1
 800c80c:	464a      	mov	r2, r9
 800c80e:	4616      	mov	r6, r2
 800c810:	3201      	adds	r2, #1
 800c812:	7830      	ldrb	r0, [r6, #0]
 800c814:	f7ff ffb0 	bl	800c778 <__hexdig_fun>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d1f8      	bne.n	800c80e <__gethex+0x6a>
 800c81c:	498d      	ldr	r1, [pc, #564]	@ (800ca54 <__gethex+0x2b0>)
 800c81e:	2201      	movs	r2, #1
 800c820:	4630      	mov	r0, r6
 800c822:	f7fd fa48 	bl	8009cb6 <strncmp>
 800c826:	2800      	cmp	r0, #0
 800c828:	d13f      	bne.n	800c8aa <__gethex+0x106>
 800c82a:	b944      	cbnz	r4, 800c83e <__gethex+0x9a>
 800c82c:	1c74      	adds	r4, r6, #1
 800c82e:	4622      	mov	r2, r4
 800c830:	4616      	mov	r6, r2
 800c832:	3201      	adds	r2, #1
 800c834:	7830      	ldrb	r0, [r6, #0]
 800c836:	f7ff ff9f 	bl	800c778 <__hexdig_fun>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d1f8      	bne.n	800c830 <__gethex+0x8c>
 800c83e:	1ba4      	subs	r4, r4, r6
 800c840:	00a7      	lsls	r7, r4, #2
 800c842:	7833      	ldrb	r3, [r6, #0]
 800c844:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c848:	2b50      	cmp	r3, #80	@ 0x50
 800c84a:	d13e      	bne.n	800c8ca <__gethex+0x126>
 800c84c:	7873      	ldrb	r3, [r6, #1]
 800c84e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c850:	d033      	beq.n	800c8ba <__gethex+0x116>
 800c852:	2b2d      	cmp	r3, #45	@ 0x2d
 800c854:	d034      	beq.n	800c8c0 <__gethex+0x11c>
 800c856:	1c71      	adds	r1, r6, #1
 800c858:	2400      	movs	r4, #0
 800c85a:	7808      	ldrb	r0, [r1, #0]
 800c85c:	f7ff ff8c 	bl	800c778 <__hexdig_fun>
 800c860:	1e43      	subs	r3, r0, #1
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b18      	cmp	r3, #24
 800c866:	d830      	bhi.n	800c8ca <__gethex+0x126>
 800c868:	f1a0 0210 	sub.w	r2, r0, #16
 800c86c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c870:	f7ff ff82 	bl	800c778 <__hexdig_fun>
 800c874:	f100 3cff 	add.w	ip, r0, #4294967295
 800c878:	fa5f fc8c 	uxtb.w	ip, ip
 800c87c:	f1bc 0f18 	cmp.w	ip, #24
 800c880:	f04f 030a 	mov.w	r3, #10
 800c884:	d91e      	bls.n	800c8c4 <__gethex+0x120>
 800c886:	b104      	cbz	r4, 800c88a <__gethex+0xe6>
 800c888:	4252      	negs	r2, r2
 800c88a:	4417      	add	r7, r2
 800c88c:	f8ca 1000 	str.w	r1, [sl]
 800c890:	b1ed      	cbz	r5, 800c8ce <__gethex+0x12a>
 800c892:	f1bb 0f00 	cmp.w	fp, #0
 800c896:	bf0c      	ite	eq
 800c898:	2506      	moveq	r5, #6
 800c89a:	2500      	movne	r5, #0
 800c89c:	4628      	mov	r0, r5
 800c89e:	b005      	add	sp, #20
 800c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a4:	2500      	movs	r5, #0
 800c8a6:	462c      	mov	r4, r5
 800c8a8:	e7b0      	b.n	800c80c <__gethex+0x68>
 800c8aa:	2c00      	cmp	r4, #0
 800c8ac:	d1c7      	bne.n	800c83e <__gethex+0x9a>
 800c8ae:	4627      	mov	r7, r4
 800c8b0:	e7c7      	b.n	800c842 <__gethex+0x9e>
 800c8b2:	464e      	mov	r6, r9
 800c8b4:	462f      	mov	r7, r5
 800c8b6:	2501      	movs	r5, #1
 800c8b8:	e7c3      	b.n	800c842 <__gethex+0x9e>
 800c8ba:	2400      	movs	r4, #0
 800c8bc:	1cb1      	adds	r1, r6, #2
 800c8be:	e7cc      	b.n	800c85a <__gethex+0xb6>
 800c8c0:	2401      	movs	r4, #1
 800c8c2:	e7fb      	b.n	800c8bc <__gethex+0x118>
 800c8c4:	fb03 0002 	mla	r0, r3, r2, r0
 800c8c8:	e7ce      	b.n	800c868 <__gethex+0xc4>
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	e7de      	b.n	800c88c <__gethex+0xe8>
 800c8ce:	eba6 0309 	sub.w	r3, r6, r9
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	2b07      	cmp	r3, #7
 800c8d8:	dc0a      	bgt.n	800c8f0 <__gethex+0x14c>
 800c8da:	9801      	ldr	r0, [sp, #4]
 800c8dc:	f7fe f9c8 	bl	800ac70 <_Balloc>
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	b940      	cbnz	r0, 800c8f6 <__gethex+0x152>
 800c8e4:	4b5c      	ldr	r3, [pc, #368]	@ (800ca58 <__gethex+0x2b4>)
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	21e4      	movs	r1, #228	@ 0xe4
 800c8ea:	485c      	ldr	r0, [pc, #368]	@ (800ca5c <__gethex+0x2b8>)
 800c8ec:	f7ff fec0 	bl	800c670 <__assert_func>
 800c8f0:	3101      	adds	r1, #1
 800c8f2:	105b      	asrs	r3, r3, #1
 800c8f4:	e7ef      	b.n	800c8d6 <__gethex+0x132>
 800c8f6:	f100 0a14 	add.w	sl, r0, #20
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	4655      	mov	r5, sl
 800c8fe:	469b      	mov	fp, r3
 800c900:	45b1      	cmp	r9, r6
 800c902:	d337      	bcc.n	800c974 <__gethex+0x1d0>
 800c904:	f845 bb04 	str.w	fp, [r5], #4
 800c908:	eba5 050a 	sub.w	r5, r5, sl
 800c90c:	10ad      	asrs	r5, r5, #2
 800c90e:	6125      	str	r5, [r4, #16]
 800c910:	4658      	mov	r0, fp
 800c912:	f7fe fa9f 	bl	800ae54 <__hi0bits>
 800c916:	016d      	lsls	r5, r5, #5
 800c918:	f8d8 6000 	ldr.w	r6, [r8]
 800c91c:	1a2d      	subs	r5, r5, r0
 800c91e:	42b5      	cmp	r5, r6
 800c920:	dd54      	ble.n	800c9cc <__gethex+0x228>
 800c922:	1bad      	subs	r5, r5, r6
 800c924:	4629      	mov	r1, r5
 800c926:	4620      	mov	r0, r4
 800c928:	f7fe fe33 	bl	800b592 <__any_on>
 800c92c:	4681      	mov	r9, r0
 800c92e:	b178      	cbz	r0, 800c950 <__gethex+0x1ac>
 800c930:	1e6b      	subs	r3, r5, #1
 800c932:	1159      	asrs	r1, r3, #5
 800c934:	f003 021f 	and.w	r2, r3, #31
 800c938:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c93c:	f04f 0901 	mov.w	r9, #1
 800c940:	fa09 f202 	lsl.w	r2, r9, r2
 800c944:	420a      	tst	r2, r1
 800c946:	d003      	beq.n	800c950 <__gethex+0x1ac>
 800c948:	454b      	cmp	r3, r9
 800c94a:	dc36      	bgt.n	800c9ba <__gethex+0x216>
 800c94c:	f04f 0902 	mov.w	r9, #2
 800c950:	4629      	mov	r1, r5
 800c952:	4620      	mov	r0, r4
 800c954:	f7ff febe 	bl	800c6d4 <rshift>
 800c958:	442f      	add	r7, r5
 800c95a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c95e:	42bb      	cmp	r3, r7
 800c960:	da42      	bge.n	800c9e8 <__gethex+0x244>
 800c962:	9801      	ldr	r0, [sp, #4]
 800c964:	4621      	mov	r1, r4
 800c966:	f7fe f9c3 	bl	800acf0 <_Bfree>
 800c96a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c96c:	2300      	movs	r3, #0
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	25a3      	movs	r5, #163	@ 0xa3
 800c972:	e793      	b.n	800c89c <__gethex+0xf8>
 800c974:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c978:	2a2e      	cmp	r2, #46	@ 0x2e
 800c97a:	d012      	beq.n	800c9a2 <__gethex+0x1fe>
 800c97c:	2b20      	cmp	r3, #32
 800c97e:	d104      	bne.n	800c98a <__gethex+0x1e6>
 800c980:	f845 bb04 	str.w	fp, [r5], #4
 800c984:	f04f 0b00 	mov.w	fp, #0
 800c988:	465b      	mov	r3, fp
 800c98a:	7830      	ldrb	r0, [r6, #0]
 800c98c:	9303      	str	r3, [sp, #12]
 800c98e:	f7ff fef3 	bl	800c778 <__hexdig_fun>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	f000 000f 	and.w	r0, r0, #15
 800c998:	4098      	lsls	r0, r3
 800c99a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c99e:	3304      	adds	r3, #4
 800c9a0:	e7ae      	b.n	800c900 <__gethex+0x15c>
 800c9a2:	45b1      	cmp	r9, r6
 800c9a4:	d8ea      	bhi.n	800c97c <__gethex+0x1d8>
 800c9a6:	492b      	ldr	r1, [pc, #172]	@ (800ca54 <__gethex+0x2b0>)
 800c9a8:	9303      	str	r3, [sp, #12]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7fd f982 	bl	8009cb6 <strncmp>
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d1e1      	bne.n	800c97c <__gethex+0x1d8>
 800c9b8:	e7a2      	b.n	800c900 <__gethex+0x15c>
 800c9ba:	1ea9      	subs	r1, r5, #2
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f7fe fde8 	bl	800b592 <__any_on>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d0c2      	beq.n	800c94c <__gethex+0x1a8>
 800c9c6:	f04f 0903 	mov.w	r9, #3
 800c9ca:	e7c1      	b.n	800c950 <__gethex+0x1ac>
 800c9cc:	da09      	bge.n	800c9e2 <__gethex+0x23e>
 800c9ce:	1b75      	subs	r5, r6, r5
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	9801      	ldr	r0, [sp, #4]
 800c9d4:	462a      	mov	r2, r5
 800c9d6:	f7fe fba3 	bl	800b120 <__lshift>
 800c9da:	1b7f      	subs	r7, r7, r5
 800c9dc:	4604      	mov	r4, r0
 800c9de:	f100 0a14 	add.w	sl, r0, #20
 800c9e2:	f04f 0900 	mov.w	r9, #0
 800c9e6:	e7b8      	b.n	800c95a <__gethex+0x1b6>
 800c9e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c9ec:	42bd      	cmp	r5, r7
 800c9ee:	dd6f      	ble.n	800cad0 <__gethex+0x32c>
 800c9f0:	1bed      	subs	r5, r5, r7
 800c9f2:	42ae      	cmp	r6, r5
 800c9f4:	dc34      	bgt.n	800ca60 <__gethex+0x2bc>
 800c9f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d022      	beq.n	800ca44 <__gethex+0x2a0>
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d024      	beq.n	800ca4c <__gethex+0x2a8>
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d115      	bne.n	800ca32 <__gethex+0x28e>
 800ca06:	42ae      	cmp	r6, r5
 800ca08:	d113      	bne.n	800ca32 <__gethex+0x28e>
 800ca0a:	2e01      	cmp	r6, #1
 800ca0c:	d10b      	bne.n	800ca26 <__gethex+0x282>
 800ca0e:	9a02      	ldr	r2, [sp, #8]
 800ca10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	2301      	movs	r3, #1
 800ca18:	6123      	str	r3, [r4, #16]
 800ca1a:	f8ca 3000 	str.w	r3, [sl]
 800ca1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca20:	2562      	movs	r5, #98	@ 0x62
 800ca22:	601c      	str	r4, [r3, #0]
 800ca24:	e73a      	b.n	800c89c <__gethex+0xf8>
 800ca26:	1e71      	subs	r1, r6, #1
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f7fe fdb2 	bl	800b592 <__any_on>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d1ed      	bne.n	800ca0e <__gethex+0x26a>
 800ca32:	9801      	ldr	r0, [sp, #4]
 800ca34:	4621      	mov	r1, r4
 800ca36:	f7fe f95b 	bl	800acf0 <_Bfree>
 800ca3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	2550      	movs	r5, #80	@ 0x50
 800ca42:	e72b      	b.n	800c89c <__gethex+0xf8>
 800ca44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1f3      	bne.n	800ca32 <__gethex+0x28e>
 800ca4a:	e7e0      	b.n	800ca0e <__gethex+0x26a>
 800ca4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1dd      	bne.n	800ca0e <__gethex+0x26a>
 800ca52:	e7ee      	b.n	800ca32 <__gethex+0x28e>
 800ca54:	0800d710 	.word	0x0800d710
 800ca58:	0800d5a6 	.word	0x0800d5a6
 800ca5c:	0800d7bd 	.word	0x0800d7bd
 800ca60:	1e6f      	subs	r7, r5, #1
 800ca62:	f1b9 0f00 	cmp.w	r9, #0
 800ca66:	d130      	bne.n	800caca <__gethex+0x326>
 800ca68:	b127      	cbz	r7, 800ca74 <__gethex+0x2d0>
 800ca6a:	4639      	mov	r1, r7
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f7fe fd90 	bl	800b592 <__any_on>
 800ca72:	4681      	mov	r9, r0
 800ca74:	117a      	asrs	r2, r7, #5
 800ca76:	2301      	movs	r3, #1
 800ca78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ca7c:	f007 071f 	and.w	r7, r7, #31
 800ca80:	40bb      	lsls	r3, r7
 800ca82:	4213      	tst	r3, r2
 800ca84:	4629      	mov	r1, r5
 800ca86:	4620      	mov	r0, r4
 800ca88:	bf18      	it	ne
 800ca8a:	f049 0902 	orrne.w	r9, r9, #2
 800ca8e:	f7ff fe21 	bl	800c6d4 <rshift>
 800ca92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ca96:	1b76      	subs	r6, r6, r5
 800ca98:	2502      	movs	r5, #2
 800ca9a:	f1b9 0f00 	cmp.w	r9, #0
 800ca9e:	d047      	beq.n	800cb30 <__gethex+0x38c>
 800caa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d015      	beq.n	800cad4 <__gethex+0x330>
 800caa8:	2b03      	cmp	r3, #3
 800caaa:	d017      	beq.n	800cadc <__gethex+0x338>
 800caac:	2b01      	cmp	r3, #1
 800caae:	d109      	bne.n	800cac4 <__gethex+0x320>
 800cab0:	f019 0f02 	tst.w	r9, #2
 800cab4:	d006      	beq.n	800cac4 <__gethex+0x320>
 800cab6:	f8da 3000 	ldr.w	r3, [sl]
 800caba:	ea49 0903 	orr.w	r9, r9, r3
 800cabe:	f019 0f01 	tst.w	r9, #1
 800cac2:	d10e      	bne.n	800cae2 <__gethex+0x33e>
 800cac4:	f045 0510 	orr.w	r5, r5, #16
 800cac8:	e032      	b.n	800cb30 <__gethex+0x38c>
 800caca:	f04f 0901 	mov.w	r9, #1
 800cace:	e7d1      	b.n	800ca74 <__gethex+0x2d0>
 800cad0:	2501      	movs	r5, #1
 800cad2:	e7e2      	b.n	800ca9a <__gethex+0x2f6>
 800cad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cad6:	f1c3 0301 	rsb	r3, r3, #1
 800cada:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cadc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0f0      	beq.n	800cac4 <__gethex+0x320>
 800cae2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cae6:	f104 0314 	add.w	r3, r4, #20
 800caea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800caee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800caf2:	f04f 0c00 	mov.w	ip, #0
 800caf6:	4618      	mov	r0, r3
 800caf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cafc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb00:	d01b      	beq.n	800cb3a <__gethex+0x396>
 800cb02:	3201      	adds	r2, #1
 800cb04:	6002      	str	r2, [r0, #0]
 800cb06:	2d02      	cmp	r5, #2
 800cb08:	f104 0314 	add.w	r3, r4, #20
 800cb0c:	d13c      	bne.n	800cb88 <__gethex+0x3e4>
 800cb0e:	f8d8 2000 	ldr.w	r2, [r8]
 800cb12:	3a01      	subs	r2, #1
 800cb14:	42b2      	cmp	r2, r6
 800cb16:	d109      	bne.n	800cb2c <__gethex+0x388>
 800cb18:	1171      	asrs	r1, r6, #5
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb20:	f006 061f 	and.w	r6, r6, #31
 800cb24:	fa02 f606 	lsl.w	r6, r2, r6
 800cb28:	421e      	tst	r6, r3
 800cb2a:	d13a      	bne.n	800cba2 <__gethex+0x3fe>
 800cb2c:	f045 0520 	orr.w	r5, r5, #32
 800cb30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb32:	601c      	str	r4, [r3, #0]
 800cb34:	9b02      	ldr	r3, [sp, #8]
 800cb36:	601f      	str	r7, [r3, #0]
 800cb38:	e6b0      	b.n	800c89c <__gethex+0xf8>
 800cb3a:	4299      	cmp	r1, r3
 800cb3c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb40:	d8d9      	bhi.n	800caf6 <__gethex+0x352>
 800cb42:	68a3      	ldr	r3, [r4, #8]
 800cb44:	459b      	cmp	fp, r3
 800cb46:	db17      	blt.n	800cb78 <__gethex+0x3d4>
 800cb48:	6861      	ldr	r1, [r4, #4]
 800cb4a:	9801      	ldr	r0, [sp, #4]
 800cb4c:	3101      	adds	r1, #1
 800cb4e:	f7fe f88f 	bl	800ac70 <_Balloc>
 800cb52:	4681      	mov	r9, r0
 800cb54:	b918      	cbnz	r0, 800cb5e <__gethex+0x3ba>
 800cb56:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc0 <__gethex+0x41c>)
 800cb58:	4602      	mov	r2, r0
 800cb5a:	2184      	movs	r1, #132	@ 0x84
 800cb5c:	e6c5      	b.n	800c8ea <__gethex+0x146>
 800cb5e:	6922      	ldr	r2, [r4, #16]
 800cb60:	3202      	adds	r2, #2
 800cb62:	f104 010c 	add.w	r1, r4, #12
 800cb66:	0092      	lsls	r2, r2, #2
 800cb68:	300c      	adds	r0, #12
 800cb6a:	f7ff fd69 	bl	800c640 <memcpy>
 800cb6e:	4621      	mov	r1, r4
 800cb70:	9801      	ldr	r0, [sp, #4]
 800cb72:	f7fe f8bd 	bl	800acf0 <_Bfree>
 800cb76:	464c      	mov	r4, r9
 800cb78:	6923      	ldr	r3, [r4, #16]
 800cb7a:	1c5a      	adds	r2, r3, #1
 800cb7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb80:	6122      	str	r2, [r4, #16]
 800cb82:	2201      	movs	r2, #1
 800cb84:	615a      	str	r2, [r3, #20]
 800cb86:	e7be      	b.n	800cb06 <__gethex+0x362>
 800cb88:	6922      	ldr	r2, [r4, #16]
 800cb8a:	455a      	cmp	r2, fp
 800cb8c:	dd0b      	ble.n	800cba6 <__gethex+0x402>
 800cb8e:	2101      	movs	r1, #1
 800cb90:	4620      	mov	r0, r4
 800cb92:	f7ff fd9f 	bl	800c6d4 <rshift>
 800cb96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb9a:	3701      	adds	r7, #1
 800cb9c:	42bb      	cmp	r3, r7
 800cb9e:	f6ff aee0 	blt.w	800c962 <__gethex+0x1be>
 800cba2:	2501      	movs	r5, #1
 800cba4:	e7c2      	b.n	800cb2c <__gethex+0x388>
 800cba6:	f016 061f 	ands.w	r6, r6, #31
 800cbaa:	d0fa      	beq.n	800cba2 <__gethex+0x3fe>
 800cbac:	4453      	add	r3, sl
 800cbae:	f1c6 0620 	rsb	r6, r6, #32
 800cbb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cbb6:	f7fe f94d 	bl	800ae54 <__hi0bits>
 800cbba:	42b0      	cmp	r0, r6
 800cbbc:	dbe7      	blt.n	800cb8e <__gethex+0x3ea>
 800cbbe:	e7f0      	b.n	800cba2 <__gethex+0x3fe>
 800cbc0:	0800d5a6 	.word	0x0800d5a6

0800cbc4 <L_shift>:
 800cbc4:	f1c2 0208 	rsb	r2, r2, #8
 800cbc8:	0092      	lsls	r2, r2, #2
 800cbca:	b570      	push	{r4, r5, r6, lr}
 800cbcc:	f1c2 0620 	rsb	r6, r2, #32
 800cbd0:	6843      	ldr	r3, [r0, #4]
 800cbd2:	6804      	ldr	r4, [r0, #0]
 800cbd4:	fa03 f506 	lsl.w	r5, r3, r6
 800cbd8:	432c      	orrs	r4, r5
 800cbda:	40d3      	lsrs	r3, r2
 800cbdc:	6004      	str	r4, [r0, #0]
 800cbde:	f840 3f04 	str.w	r3, [r0, #4]!
 800cbe2:	4288      	cmp	r0, r1
 800cbe4:	d3f4      	bcc.n	800cbd0 <L_shift+0xc>
 800cbe6:	bd70      	pop	{r4, r5, r6, pc}

0800cbe8 <__match>:
 800cbe8:	b530      	push	{r4, r5, lr}
 800cbea:	6803      	ldr	r3, [r0, #0]
 800cbec:	3301      	adds	r3, #1
 800cbee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbf2:	b914      	cbnz	r4, 800cbfa <__match+0x12>
 800cbf4:	6003      	str	r3, [r0, #0]
 800cbf6:	2001      	movs	r0, #1
 800cbf8:	bd30      	pop	{r4, r5, pc}
 800cbfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cc02:	2d19      	cmp	r5, #25
 800cc04:	bf98      	it	ls
 800cc06:	3220      	addls	r2, #32
 800cc08:	42a2      	cmp	r2, r4
 800cc0a:	d0f0      	beq.n	800cbee <__match+0x6>
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	e7f3      	b.n	800cbf8 <__match+0x10>

0800cc10 <__hexnan>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	680b      	ldr	r3, [r1, #0]
 800cc16:	6801      	ldr	r1, [r0, #0]
 800cc18:	115e      	asrs	r6, r3, #5
 800cc1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc1e:	f013 031f 	ands.w	r3, r3, #31
 800cc22:	b087      	sub	sp, #28
 800cc24:	bf18      	it	ne
 800cc26:	3604      	addne	r6, #4
 800cc28:	2500      	movs	r5, #0
 800cc2a:	1f37      	subs	r7, r6, #4
 800cc2c:	4682      	mov	sl, r0
 800cc2e:	4690      	mov	r8, r2
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc36:	46b9      	mov	r9, r7
 800cc38:	463c      	mov	r4, r7
 800cc3a:	9502      	str	r5, [sp, #8]
 800cc3c:	46ab      	mov	fp, r5
 800cc3e:	784a      	ldrb	r2, [r1, #1]
 800cc40:	1c4b      	adds	r3, r1, #1
 800cc42:	9303      	str	r3, [sp, #12]
 800cc44:	b342      	cbz	r2, 800cc98 <__hexnan+0x88>
 800cc46:	4610      	mov	r0, r2
 800cc48:	9105      	str	r1, [sp, #20]
 800cc4a:	9204      	str	r2, [sp, #16]
 800cc4c:	f7ff fd94 	bl	800c778 <__hexdig_fun>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d151      	bne.n	800ccf8 <__hexnan+0xe8>
 800cc54:	9a04      	ldr	r2, [sp, #16]
 800cc56:	9905      	ldr	r1, [sp, #20]
 800cc58:	2a20      	cmp	r2, #32
 800cc5a:	d818      	bhi.n	800cc8e <__hexnan+0x7e>
 800cc5c:	9b02      	ldr	r3, [sp, #8]
 800cc5e:	459b      	cmp	fp, r3
 800cc60:	dd13      	ble.n	800cc8a <__hexnan+0x7a>
 800cc62:	454c      	cmp	r4, r9
 800cc64:	d206      	bcs.n	800cc74 <__hexnan+0x64>
 800cc66:	2d07      	cmp	r5, #7
 800cc68:	dc04      	bgt.n	800cc74 <__hexnan+0x64>
 800cc6a:	462a      	mov	r2, r5
 800cc6c:	4649      	mov	r1, r9
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f7ff ffa8 	bl	800cbc4 <L_shift>
 800cc74:	4544      	cmp	r4, r8
 800cc76:	d952      	bls.n	800cd1e <__hexnan+0x10e>
 800cc78:	2300      	movs	r3, #0
 800cc7a:	f1a4 0904 	sub.w	r9, r4, #4
 800cc7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc82:	f8cd b008 	str.w	fp, [sp, #8]
 800cc86:	464c      	mov	r4, r9
 800cc88:	461d      	mov	r5, r3
 800cc8a:	9903      	ldr	r1, [sp, #12]
 800cc8c:	e7d7      	b.n	800cc3e <__hexnan+0x2e>
 800cc8e:	2a29      	cmp	r2, #41	@ 0x29
 800cc90:	d157      	bne.n	800cd42 <__hexnan+0x132>
 800cc92:	3102      	adds	r1, #2
 800cc94:	f8ca 1000 	str.w	r1, [sl]
 800cc98:	f1bb 0f00 	cmp.w	fp, #0
 800cc9c:	d051      	beq.n	800cd42 <__hexnan+0x132>
 800cc9e:	454c      	cmp	r4, r9
 800cca0:	d206      	bcs.n	800ccb0 <__hexnan+0xa0>
 800cca2:	2d07      	cmp	r5, #7
 800cca4:	dc04      	bgt.n	800ccb0 <__hexnan+0xa0>
 800cca6:	462a      	mov	r2, r5
 800cca8:	4649      	mov	r1, r9
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f7ff ff8a 	bl	800cbc4 <L_shift>
 800ccb0:	4544      	cmp	r4, r8
 800ccb2:	d936      	bls.n	800cd22 <__hexnan+0x112>
 800ccb4:	f1a8 0204 	sub.w	r2, r8, #4
 800ccb8:	4623      	mov	r3, r4
 800ccba:	f853 1b04 	ldr.w	r1, [r3], #4
 800ccbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800ccc2:	429f      	cmp	r7, r3
 800ccc4:	d2f9      	bcs.n	800ccba <__hexnan+0xaa>
 800ccc6:	1b3b      	subs	r3, r7, r4
 800ccc8:	f023 0303 	bic.w	r3, r3, #3
 800cccc:	3304      	adds	r3, #4
 800ccce:	3401      	adds	r4, #1
 800ccd0:	3e03      	subs	r6, #3
 800ccd2:	42b4      	cmp	r4, r6
 800ccd4:	bf88      	it	hi
 800ccd6:	2304      	movhi	r3, #4
 800ccd8:	4443      	add	r3, r8
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f843 2b04 	str.w	r2, [r3], #4
 800cce0:	429f      	cmp	r7, r3
 800cce2:	d2fb      	bcs.n	800ccdc <__hexnan+0xcc>
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	b91b      	cbnz	r3, 800ccf0 <__hexnan+0xe0>
 800cce8:	4547      	cmp	r7, r8
 800ccea:	d128      	bne.n	800cd3e <__hexnan+0x12e>
 800ccec:	2301      	movs	r3, #1
 800ccee:	603b      	str	r3, [r7, #0]
 800ccf0:	2005      	movs	r0, #5
 800ccf2:	b007      	add	sp, #28
 800ccf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf8:	3501      	adds	r5, #1
 800ccfa:	2d08      	cmp	r5, #8
 800ccfc:	f10b 0b01 	add.w	fp, fp, #1
 800cd00:	dd06      	ble.n	800cd10 <__hexnan+0x100>
 800cd02:	4544      	cmp	r4, r8
 800cd04:	d9c1      	bls.n	800cc8a <__hexnan+0x7a>
 800cd06:	2300      	movs	r3, #0
 800cd08:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd0c:	2501      	movs	r5, #1
 800cd0e:	3c04      	subs	r4, #4
 800cd10:	6822      	ldr	r2, [r4, #0]
 800cd12:	f000 000f 	and.w	r0, r0, #15
 800cd16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cd1a:	6020      	str	r0, [r4, #0]
 800cd1c:	e7b5      	b.n	800cc8a <__hexnan+0x7a>
 800cd1e:	2508      	movs	r5, #8
 800cd20:	e7b3      	b.n	800cc8a <__hexnan+0x7a>
 800cd22:	9b01      	ldr	r3, [sp, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0dd      	beq.n	800cce4 <__hexnan+0xd4>
 800cd28:	f1c3 0320 	rsb	r3, r3, #32
 800cd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd30:	40da      	lsrs	r2, r3
 800cd32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cd36:	4013      	ands	r3, r2
 800cd38:	f846 3c04 	str.w	r3, [r6, #-4]
 800cd3c:	e7d2      	b.n	800cce4 <__hexnan+0xd4>
 800cd3e:	3f04      	subs	r7, #4
 800cd40:	e7d0      	b.n	800cce4 <__hexnan+0xd4>
 800cd42:	2004      	movs	r0, #4
 800cd44:	e7d5      	b.n	800ccf2 <__hexnan+0xe2>

0800cd46 <__ascii_mbtowc>:
 800cd46:	b082      	sub	sp, #8
 800cd48:	b901      	cbnz	r1, 800cd4c <__ascii_mbtowc+0x6>
 800cd4a:	a901      	add	r1, sp, #4
 800cd4c:	b142      	cbz	r2, 800cd60 <__ascii_mbtowc+0x1a>
 800cd4e:	b14b      	cbz	r3, 800cd64 <__ascii_mbtowc+0x1e>
 800cd50:	7813      	ldrb	r3, [r2, #0]
 800cd52:	600b      	str	r3, [r1, #0]
 800cd54:	7812      	ldrb	r2, [r2, #0]
 800cd56:	1e10      	subs	r0, r2, #0
 800cd58:	bf18      	it	ne
 800cd5a:	2001      	movne	r0, #1
 800cd5c:	b002      	add	sp, #8
 800cd5e:	4770      	bx	lr
 800cd60:	4610      	mov	r0, r2
 800cd62:	e7fb      	b.n	800cd5c <__ascii_mbtowc+0x16>
 800cd64:	f06f 0001 	mvn.w	r0, #1
 800cd68:	e7f8      	b.n	800cd5c <__ascii_mbtowc+0x16>

0800cd6a <_realloc_r>:
 800cd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6e:	4680      	mov	r8, r0
 800cd70:	4615      	mov	r5, r2
 800cd72:	460c      	mov	r4, r1
 800cd74:	b921      	cbnz	r1, 800cd80 <_realloc_r+0x16>
 800cd76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	f7fd beec 	b.w	800ab58 <_malloc_r>
 800cd80:	b92a      	cbnz	r2, 800cd8e <_realloc_r+0x24>
 800cd82:	f7fd fe75 	bl	800aa70 <_free_r>
 800cd86:	2400      	movs	r4, #0
 800cd88:	4620      	mov	r0, r4
 800cd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd8e:	f000 f840 	bl	800ce12 <_malloc_usable_size_r>
 800cd92:	4285      	cmp	r5, r0
 800cd94:	4606      	mov	r6, r0
 800cd96:	d802      	bhi.n	800cd9e <_realloc_r+0x34>
 800cd98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cd9c:	d8f4      	bhi.n	800cd88 <_realloc_r+0x1e>
 800cd9e:	4629      	mov	r1, r5
 800cda0:	4640      	mov	r0, r8
 800cda2:	f7fd fed9 	bl	800ab58 <_malloc_r>
 800cda6:	4607      	mov	r7, r0
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d0ec      	beq.n	800cd86 <_realloc_r+0x1c>
 800cdac:	42b5      	cmp	r5, r6
 800cdae:	462a      	mov	r2, r5
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	bf28      	it	cs
 800cdb4:	4632      	movcs	r2, r6
 800cdb6:	f7ff fc43 	bl	800c640 <memcpy>
 800cdba:	4621      	mov	r1, r4
 800cdbc:	4640      	mov	r0, r8
 800cdbe:	f7fd fe57 	bl	800aa70 <_free_r>
 800cdc2:	463c      	mov	r4, r7
 800cdc4:	e7e0      	b.n	800cd88 <_realloc_r+0x1e>

0800cdc6 <__ascii_wctomb>:
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	4608      	mov	r0, r1
 800cdca:	b141      	cbz	r1, 800cdde <__ascii_wctomb+0x18>
 800cdcc:	2aff      	cmp	r2, #255	@ 0xff
 800cdce:	d904      	bls.n	800cdda <__ascii_wctomb+0x14>
 800cdd0:	228a      	movs	r2, #138	@ 0x8a
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd8:	4770      	bx	lr
 800cdda:	700a      	strb	r2, [r1, #0]
 800cddc:	2001      	movs	r0, #1
 800cdde:	4770      	bx	lr

0800cde0 <fiprintf>:
 800cde0:	b40e      	push	{r1, r2, r3}
 800cde2:	b503      	push	{r0, r1, lr}
 800cde4:	4601      	mov	r1, r0
 800cde6:	ab03      	add	r3, sp, #12
 800cde8:	4805      	ldr	r0, [pc, #20]	@ (800ce00 <fiprintf+0x20>)
 800cdea:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdee:	6800      	ldr	r0, [r0, #0]
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	f000 f83f 	bl	800ce74 <_vfiprintf_r>
 800cdf6:	b002      	add	sp, #8
 800cdf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdfc:	b003      	add	sp, #12
 800cdfe:	4770      	bx	lr
 800ce00:	20000028 	.word	0x20000028

0800ce04 <abort>:
 800ce04:	b508      	push	{r3, lr}
 800ce06:	2006      	movs	r0, #6
 800ce08:	f000 fa08 	bl	800d21c <raise>
 800ce0c:	2001      	movs	r0, #1
 800ce0e:	f7f4 fffd 	bl	8001e0c <_exit>

0800ce12 <_malloc_usable_size_r>:
 800ce12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce16:	1f18      	subs	r0, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	bfbc      	itt	lt
 800ce1c:	580b      	ldrlt	r3, [r1, r0]
 800ce1e:	18c0      	addlt	r0, r0, r3
 800ce20:	4770      	bx	lr

0800ce22 <__sfputc_r>:
 800ce22:	6893      	ldr	r3, [r2, #8]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	b410      	push	{r4}
 800ce2a:	6093      	str	r3, [r2, #8]
 800ce2c:	da08      	bge.n	800ce40 <__sfputc_r+0x1e>
 800ce2e:	6994      	ldr	r4, [r2, #24]
 800ce30:	42a3      	cmp	r3, r4
 800ce32:	db01      	blt.n	800ce38 <__sfputc_r+0x16>
 800ce34:	290a      	cmp	r1, #10
 800ce36:	d103      	bne.n	800ce40 <__sfputc_r+0x1e>
 800ce38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce3c:	f000 b932 	b.w	800d0a4 <__swbuf_r>
 800ce40:	6813      	ldr	r3, [r2, #0]
 800ce42:	1c58      	adds	r0, r3, #1
 800ce44:	6010      	str	r0, [r2, #0]
 800ce46:	7019      	strb	r1, [r3, #0]
 800ce48:	4608      	mov	r0, r1
 800ce4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <__sfputs_r>:
 800ce50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce52:	4606      	mov	r6, r0
 800ce54:	460f      	mov	r7, r1
 800ce56:	4614      	mov	r4, r2
 800ce58:	18d5      	adds	r5, r2, r3
 800ce5a:	42ac      	cmp	r4, r5
 800ce5c:	d101      	bne.n	800ce62 <__sfputs_r+0x12>
 800ce5e:	2000      	movs	r0, #0
 800ce60:	e007      	b.n	800ce72 <__sfputs_r+0x22>
 800ce62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce66:	463a      	mov	r2, r7
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f7ff ffda 	bl	800ce22 <__sfputc_r>
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	d1f3      	bne.n	800ce5a <__sfputs_r+0xa>
 800ce72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce74 <_vfiprintf_r>:
 800ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce78:	460d      	mov	r5, r1
 800ce7a:	b09d      	sub	sp, #116	@ 0x74
 800ce7c:	4614      	mov	r4, r2
 800ce7e:	4698      	mov	r8, r3
 800ce80:	4606      	mov	r6, r0
 800ce82:	b118      	cbz	r0, 800ce8c <_vfiprintf_r+0x18>
 800ce84:	6a03      	ldr	r3, [r0, #32]
 800ce86:	b90b      	cbnz	r3, 800ce8c <_vfiprintf_r+0x18>
 800ce88:	f7fc fe74 	bl	8009b74 <__sinit>
 800ce8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce8e:	07d9      	lsls	r1, r3, #31
 800ce90:	d405      	bmi.n	800ce9e <_vfiprintf_r+0x2a>
 800ce92:	89ab      	ldrh	r3, [r5, #12]
 800ce94:	059a      	lsls	r2, r3, #22
 800ce96:	d402      	bmi.n	800ce9e <_vfiprintf_r+0x2a>
 800ce98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce9a:	f7fc ff94 	bl	8009dc6 <__retarget_lock_acquire_recursive>
 800ce9e:	89ab      	ldrh	r3, [r5, #12]
 800cea0:	071b      	lsls	r3, r3, #28
 800cea2:	d501      	bpl.n	800cea8 <_vfiprintf_r+0x34>
 800cea4:	692b      	ldr	r3, [r5, #16]
 800cea6:	b99b      	cbnz	r3, 800ced0 <_vfiprintf_r+0x5c>
 800cea8:	4629      	mov	r1, r5
 800ceaa:	4630      	mov	r0, r6
 800ceac:	f000 f938 	bl	800d120 <__swsetup_r>
 800ceb0:	b170      	cbz	r0, 800ced0 <_vfiprintf_r+0x5c>
 800ceb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceb4:	07dc      	lsls	r4, r3, #31
 800ceb6:	d504      	bpl.n	800cec2 <_vfiprintf_r+0x4e>
 800ceb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cebc:	b01d      	add	sp, #116	@ 0x74
 800cebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec2:	89ab      	ldrh	r3, [r5, #12]
 800cec4:	0598      	lsls	r0, r3, #22
 800cec6:	d4f7      	bmi.n	800ceb8 <_vfiprintf_r+0x44>
 800cec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ceca:	f7fc ff7d 	bl	8009dc8 <__retarget_lock_release_recursive>
 800cece:	e7f3      	b.n	800ceb8 <_vfiprintf_r+0x44>
 800ced0:	2300      	movs	r3, #0
 800ced2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ced4:	2320      	movs	r3, #32
 800ced6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ceda:	f8cd 800c 	str.w	r8, [sp, #12]
 800cede:	2330      	movs	r3, #48	@ 0x30
 800cee0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d090 <_vfiprintf_r+0x21c>
 800cee4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cee8:	f04f 0901 	mov.w	r9, #1
 800ceec:	4623      	mov	r3, r4
 800ceee:	469a      	mov	sl, r3
 800cef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cef4:	b10a      	cbz	r2, 800cefa <_vfiprintf_r+0x86>
 800cef6:	2a25      	cmp	r2, #37	@ 0x25
 800cef8:	d1f9      	bne.n	800ceee <_vfiprintf_r+0x7a>
 800cefa:	ebba 0b04 	subs.w	fp, sl, r4
 800cefe:	d00b      	beq.n	800cf18 <_vfiprintf_r+0xa4>
 800cf00:	465b      	mov	r3, fp
 800cf02:	4622      	mov	r2, r4
 800cf04:	4629      	mov	r1, r5
 800cf06:	4630      	mov	r0, r6
 800cf08:	f7ff ffa2 	bl	800ce50 <__sfputs_r>
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	f000 80a7 	beq.w	800d060 <_vfiprintf_r+0x1ec>
 800cf12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf14:	445a      	add	r2, fp
 800cf16:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf18:	f89a 3000 	ldrb.w	r3, [sl]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 809f 	beq.w	800d060 <_vfiprintf_r+0x1ec>
 800cf22:	2300      	movs	r3, #0
 800cf24:	f04f 32ff 	mov.w	r2, #4294967295
 800cf28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf2c:	f10a 0a01 	add.w	sl, sl, #1
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	9307      	str	r3, [sp, #28]
 800cf34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf38:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf3a:	4654      	mov	r4, sl
 800cf3c:	2205      	movs	r2, #5
 800cf3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf42:	4853      	ldr	r0, [pc, #332]	@ (800d090 <_vfiprintf_r+0x21c>)
 800cf44:	f7f3 f964 	bl	8000210 <memchr>
 800cf48:	9a04      	ldr	r2, [sp, #16]
 800cf4a:	b9d8      	cbnz	r0, 800cf84 <_vfiprintf_r+0x110>
 800cf4c:	06d1      	lsls	r1, r2, #27
 800cf4e:	bf44      	itt	mi
 800cf50:	2320      	movmi	r3, #32
 800cf52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf56:	0713      	lsls	r3, r2, #28
 800cf58:	bf44      	itt	mi
 800cf5a:	232b      	movmi	r3, #43	@ 0x2b
 800cf5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf60:	f89a 3000 	ldrb.w	r3, [sl]
 800cf64:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf66:	d015      	beq.n	800cf94 <_vfiprintf_r+0x120>
 800cf68:	9a07      	ldr	r2, [sp, #28]
 800cf6a:	4654      	mov	r4, sl
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	f04f 0c0a 	mov.w	ip, #10
 800cf72:	4621      	mov	r1, r4
 800cf74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf78:	3b30      	subs	r3, #48	@ 0x30
 800cf7a:	2b09      	cmp	r3, #9
 800cf7c:	d94b      	bls.n	800d016 <_vfiprintf_r+0x1a2>
 800cf7e:	b1b0      	cbz	r0, 800cfae <_vfiprintf_r+0x13a>
 800cf80:	9207      	str	r2, [sp, #28]
 800cf82:	e014      	b.n	800cfae <_vfiprintf_r+0x13a>
 800cf84:	eba0 0308 	sub.w	r3, r0, r8
 800cf88:	fa09 f303 	lsl.w	r3, r9, r3
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	9304      	str	r3, [sp, #16]
 800cf90:	46a2      	mov	sl, r4
 800cf92:	e7d2      	b.n	800cf3a <_vfiprintf_r+0xc6>
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	1d19      	adds	r1, r3, #4
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	9103      	str	r1, [sp, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	bfbb      	ittet	lt
 800cfa0:	425b      	neglt	r3, r3
 800cfa2:	f042 0202 	orrlt.w	r2, r2, #2
 800cfa6:	9307      	strge	r3, [sp, #28]
 800cfa8:	9307      	strlt	r3, [sp, #28]
 800cfaa:	bfb8      	it	lt
 800cfac:	9204      	strlt	r2, [sp, #16]
 800cfae:	7823      	ldrb	r3, [r4, #0]
 800cfb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfb2:	d10a      	bne.n	800cfca <_vfiprintf_r+0x156>
 800cfb4:	7863      	ldrb	r3, [r4, #1]
 800cfb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfb8:	d132      	bne.n	800d020 <_vfiprintf_r+0x1ac>
 800cfba:	9b03      	ldr	r3, [sp, #12]
 800cfbc:	1d1a      	adds	r2, r3, #4
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	9203      	str	r2, [sp, #12]
 800cfc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cfc6:	3402      	adds	r4, #2
 800cfc8:	9305      	str	r3, [sp, #20]
 800cfca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d0a0 <_vfiprintf_r+0x22c>
 800cfce:	7821      	ldrb	r1, [r4, #0]
 800cfd0:	2203      	movs	r2, #3
 800cfd2:	4650      	mov	r0, sl
 800cfd4:	f7f3 f91c 	bl	8000210 <memchr>
 800cfd8:	b138      	cbz	r0, 800cfea <_vfiprintf_r+0x176>
 800cfda:	9b04      	ldr	r3, [sp, #16]
 800cfdc:	eba0 000a 	sub.w	r0, r0, sl
 800cfe0:	2240      	movs	r2, #64	@ 0x40
 800cfe2:	4082      	lsls	r2, r0
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	3401      	adds	r4, #1
 800cfe8:	9304      	str	r3, [sp, #16]
 800cfea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfee:	4829      	ldr	r0, [pc, #164]	@ (800d094 <_vfiprintf_r+0x220>)
 800cff0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cff4:	2206      	movs	r2, #6
 800cff6:	f7f3 f90b 	bl	8000210 <memchr>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d03f      	beq.n	800d07e <_vfiprintf_r+0x20a>
 800cffe:	4b26      	ldr	r3, [pc, #152]	@ (800d098 <_vfiprintf_r+0x224>)
 800d000:	bb1b      	cbnz	r3, 800d04a <_vfiprintf_r+0x1d6>
 800d002:	9b03      	ldr	r3, [sp, #12]
 800d004:	3307      	adds	r3, #7
 800d006:	f023 0307 	bic.w	r3, r3, #7
 800d00a:	3308      	adds	r3, #8
 800d00c:	9303      	str	r3, [sp, #12]
 800d00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d010:	443b      	add	r3, r7
 800d012:	9309      	str	r3, [sp, #36]	@ 0x24
 800d014:	e76a      	b.n	800ceec <_vfiprintf_r+0x78>
 800d016:	fb0c 3202 	mla	r2, ip, r2, r3
 800d01a:	460c      	mov	r4, r1
 800d01c:	2001      	movs	r0, #1
 800d01e:	e7a8      	b.n	800cf72 <_vfiprintf_r+0xfe>
 800d020:	2300      	movs	r3, #0
 800d022:	3401      	adds	r4, #1
 800d024:	9305      	str	r3, [sp, #20]
 800d026:	4619      	mov	r1, r3
 800d028:	f04f 0c0a 	mov.w	ip, #10
 800d02c:	4620      	mov	r0, r4
 800d02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d032:	3a30      	subs	r2, #48	@ 0x30
 800d034:	2a09      	cmp	r2, #9
 800d036:	d903      	bls.n	800d040 <_vfiprintf_r+0x1cc>
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d0c6      	beq.n	800cfca <_vfiprintf_r+0x156>
 800d03c:	9105      	str	r1, [sp, #20]
 800d03e:	e7c4      	b.n	800cfca <_vfiprintf_r+0x156>
 800d040:	fb0c 2101 	mla	r1, ip, r1, r2
 800d044:	4604      	mov	r4, r0
 800d046:	2301      	movs	r3, #1
 800d048:	e7f0      	b.n	800d02c <_vfiprintf_r+0x1b8>
 800d04a:	ab03      	add	r3, sp, #12
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	462a      	mov	r2, r5
 800d050:	4b12      	ldr	r3, [pc, #72]	@ (800d09c <_vfiprintf_r+0x228>)
 800d052:	a904      	add	r1, sp, #16
 800d054:	4630      	mov	r0, r6
 800d056:	f7fb ff35 	bl	8008ec4 <_printf_float>
 800d05a:	4607      	mov	r7, r0
 800d05c:	1c78      	adds	r0, r7, #1
 800d05e:	d1d6      	bne.n	800d00e <_vfiprintf_r+0x19a>
 800d060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d062:	07d9      	lsls	r1, r3, #31
 800d064:	d405      	bmi.n	800d072 <_vfiprintf_r+0x1fe>
 800d066:	89ab      	ldrh	r3, [r5, #12]
 800d068:	059a      	lsls	r2, r3, #22
 800d06a:	d402      	bmi.n	800d072 <_vfiprintf_r+0x1fe>
 800d06c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d06e:	f7fc feab 	bl	8009dc8 <__retarget_lock_release_recursive>
 800d072:	89ab      	ldrh	r3, [r5, #12]
 800d074:	065b      	lsls	r3, r3, #25
 800d076:	f53f af1f 	bmi.w	800ceb8 <_vfiprintf_r+0x44>
 800d07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d07c:	e71e      	b.n	800cebc <_vfiprintf_r+0x48>
 800d07e:	ab03      	add	r3, sp, #12
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	462a      	mov	r2, r5
 800d084:	4b05      	ldr	r3, [pc, #20]	@ (800d09c <_vfiprintf_r+0x228>)
 800d086:	a904      	add	r1, sp, #16
 800d088:	4630      	mov	r0, r6
 800d08a:	f7fc f9b3 	bl	80093f4 <_printf_i>
 800d08e:	e7e4      	b.n	800d05a <_vfiprintf_r+0x1e6>
 800d090:	0800d768 	.word	0x0800d768
 800d094:	0800d772 	.word	0x0800d772
 800d098:	08008ec5 	.word	0x08008ec5
 800d09c:	0800ce51 	.word	0x0800ce51
 800d0a0:	0800d76e 	.word	0x0800d76e

0800d0a4 <__swbuf_r>:
 800d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a6:	460e      	mov	r6, r1
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	b118      	cbz	r0, 800d0b6 <__swbuf_r+0x12>
 800d0ae:	6a03      	ldr	r3, [r0, #32]
 800d0b0:	b90b      	cbnz	r3, 800d0b6 <__swbuf_r+0x12>
 800d0b2:	f7fc fd5f 	bl	8009b74 <__sinit>
 800d0b6:	69a3      	ldr	r3, [r4, #24]
 800d0b8:	60a3      	str	r3, [r4, #8]
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	071a      	lsls	r2, r3, #28
 800d0be:	d501      	bpl.n	800d0c4 <__swbuf_r+0x20>
 800d0c0:	6923      	ldr	r3, [r4, #16]
 800d0c2:	b943      	cbnz	r3, 800d0d6 <__swbuf_r+0x32>
 800d0c4:	4621      	mov	r1, r4
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	f000 f82a 	bl	800d120 <__swsetup_r>
 800d0cc:	b118      	cbz	r0, 800d0d6 <__swbuf_r+0x32>
 800d0ce:	f04f 37ff 	mov.w	r7, #4294967295
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0d6:	6823      	ldr	r3, [r4, #0]
 800d0d8:	6922      	ldr	r2, [r4, #16]
 800d0da:	1a98      	subs	r0, r3, r2
 800d0dc:	6963      	ldr	r3, [r4, #20]
 800d0de:	b2f6      	uxtb	r6, r6
 800d0e0:	4283      	cmp	r3, r0
 800d0e2:	4637      	mov	r7, r6
 800d0e4:	dc05      	bgt.n	800d0f2 <__swbuf_r+0x4e>
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	f7ff fa57 	bl	800c59c <_fflush_r>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d1ed      	bne.n	800d0ce <__swbuf_r+0x2a>
 800d0f2:	68a3      	ldr	r3, [r4, #8]
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	60a3      	str	r3, [r4, #8]
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	6022      	str	r2, [r4, #0]
 800d0fe:	701e      	strb	r6, [r3, #0]
 800d100:	6962      	ldr	r2, [r4, #20]
 800d102:	1c43      	adds	r3, r0, #1
 800d104:	429a      	cmp	r2, r3
 800d106:	d004      	beq.n	800d112 <__swbuf_r+0x6e>
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	07db      	lsls	r3, r3, #31
 800d10c:	d5e1      	bpl.n	800d0d2 <__swbuf_r+0x2e>
 800d10e:	2e0a      	cmp	r6, #10
 800d110:	d1df      	bne.n	800d0d2 <__swbuf_r+0x2e>
 800d112:	4621      	mov	r1, r4
 800d114:	4628      	mov	r0, r5
 800d116:	f7ff fa41 	bl	800c59c <_fflush_r>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d0d9      	beq.n	800d0d2 <__swbuf_r+0x2e>
 800d11e:	e7d6      	b.n	800d0ce <__swbuf_r+0x2a>

0800d120 <__swsetup_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4b29      	ldr	r3, [pc, #164]	@ (800d1c8 <__swsetup_r+0xa8>)
 800d124:	4605      	mov	r5, r0
 800d126:	6818      	ldr	r0, [r3, #0]
 800d128:	460c      	mov	r4, r1
 800d12a:	b118      	cbz	r0, 800d134 <__swsetup_r+0x14>
 800d12c:	6a03      	ldr	r3, [r0, #32]
 800d12e:	b90b      	cbnz	r3, 800d134 <__swsetup_r+0x14>
 800d130:	f7fc fd20 	bl	8009b74 <__sinit>
 800d134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d138:	0719      	lsls	r1, r3, #28
 800d13a:	d422      	bmi.n	800d182 <__swsetup_r+0x62>
 800d13c:	06da      	lsls	r2, r3, #27
 800d13e:	d407      	bmi.n	800d150 <__swsetup_r+0x30>
 800d140:	2209      	movs	r2, #9
 800d142:	602a      	str	r2, [r5, #0]
 800d144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d148:	81a3      	strh	r3, [r4, #12]
 800d14a:	f04f 30ff 	mov.w	r0, #4294967295
 800d14e:	e033      	b.n	800d1b8 <__swsetup_r+0x98>
 800d150:	0758      	lsls	r0, r3, #29
 800d152:	d512      	bpl.n	800d17a <__swsetup_r+0x5a>
 800d154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d156:	b141      	cbz	r1, 800d16a <__swsetup_r+0x4a>
 800d158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d15c:	4299      	cmp	r1, r3
 800d15e:	d002      	beq.n	800d166 <__swsetup_r+0x46>
 800d160:	4628      	mov	r0, r5
 800d162:	f7fd fc85 	bl	800aa70 <_free_r>
 800d166:	2300      	movs	r3, #0
 800d168:	6363      	str	r3, [r4, #52]	@ 0x34
 800d16a:	89a3      	ldrh	r3, [r4, #12]
 800d16c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d170:	81a3      	strh	r3, [r4, #12]
 800d172:	2300      	movs	r3, #0
 800d174:	6063      	str	r3, [r4, #4]
 800d176:	6923      	ldr	r3, [r4, #16]
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	f043 0308 	orr.w	r3, r3, #8
 800d180:	81a3      	strh	r3, [r4, #12]
 800d182:	6923      	ldr	r3, [r4, #16]
 800d184:	b94b      	cbnz	r3, 800d19a <__swsetup_r+0x7a>
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d18c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d190:	d003      	beq.n	800d19a <__swsetup_r+0x7a>
 800d192:	4621      	mov	r1, r4
 800d194:	4628      	mov	r0, r5
 800d196:	f000 f883 	bl	800d2a0 <__smakebuf_r>
 800d19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d19e:	f013 0201 	ands.w	r2, r3, #1
 800d1a2:	d00a      	beq.n	800d1ba <__swsetup_r+0x9a>
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	60a2      	str	r2, [r4, #8]
 800d1a8:	6962      	ldr	r2, [r4, #20]
 800d1aa:	4252      	negs	r2, r2
 800d1ac:	61a2      	str	r2, [r4, #24]
 800d1ae:	6922      	ldr	r2, [r4, #16]
 800d1b0:	b942      	cbnz	r2, 800d1c4 <__swsetup_r+0xa4>
 800d1b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1b6:	d1c5      	bne.n	800d144 <__swsetup_r+0x24>
 800d1b8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ba:	0799      	lsls	r1, r3, #30
 800d1bc:	bf58      	it	pl
 800d1be:	6962      	ldrpl	r2, [r4, #20]
 800d1c0:	60a2      	str	r2, [r4, #8]
 800d1c2:	e7f4      	b.n	800d1ae <__swsetup_r+0x8e>
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	e7f7      	b.n	800d1b8 <__swsetup_r+0x98>
 800d1c8:	20000028 	.word	0x20000028

0800d1cc <_raise_r>:
 800d1cc:	291f      	cmp	r1, #31
 800d1ce:	b538      	push	{r3, r4, r5, lr}
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	d904      	bls.n	800d1e0 <_raise_r+0x14>
 800d1d6:	2316      	movs	r3, #22
 800d1d8:	6003      	str	r3, [r0, #0]
 800d1da:	f04f 30ff 	mov.w	r0, #4294967295
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1e2:	b112      	cbz	r2, 800d1ea <_raise_r+0x1e>
 800d1e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1e8:	b94b      	cbnz	r3, 800d1fe <_raise_r+0x32>
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	f000 f830 	bl	800d250 <_getpid_r>
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	4601      	mov	r1, r0
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1fa:	f000 b817 	b.w	800d22c <_kill_r>
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d00a      	beq.n	800d218 <_raise_r+0x4c>
 800d202:	1c59      	adds	r1, r3, #1
 800d204:	d103      	bne.n	800d20e <_raise_r+0x42>
 800d206:	2316      	movs	r3, #22
 800d208:	6003      	str	r3, [r0, #0]
 800d20a:	2001      	movs	r0, #1
 800d20c:	e7e7      	b.n	800d1de <_raise_r+0x12>
 800d20e:	2100      	movs	r1, #0
 800d210:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d214:	4620      	mov	r0, r4
 800d216:	4798      	blx	r3
 800d218:	2000      	movs	r0, #0
 800d21a:	e7e0      	b.n	800d1de <_raise_r+0x12>

0800d21c <raise>:
 800d21c:	4b02      	ldr	r3, [pc, #8]	@ (800d228 <raise+0xc>)
 800d21e:	4601      	mov	r1, r0
 800d220:	6818      	ldr	r0, [r3, #0]
 800d222:	f7ff bfd3 	b.w	800d1cc <_raise_r>
 800d226:	bf00      	nop
 800d228:	20000028 	.word	0x20000028

0800d22c <_kill_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4d07      	ldr	r5, [pc, #28]	@ (800d24c <_kill_r+0x20>)
 800d230:	2300      	movs	r3, #0
 800d232:	4604      	mov	r4, r0
 800d234:	4608      	mov	r0, r1
 800d236:	4611      	mov	r1, r2
 800d238:	602b      	str	r3, [r5, #0]
 800d23a:	f7f4 fdd7 	bl	8001dec <_kill>
 800d23e:	1c43      	adds	r3, r0, #1
 800d240:	d102      	bne.n	800d248 <_kill_r+0x1c>
 800d242:	682b      	ldr	r3, [r5, #0]
 800d244:	b103      	cbz	r3, 800d248 <_kill_r+0x1c>
 800d246:	6023      	str	r3, [r4, #0]
 800d248:	bd38      	pop	{r3, r4, r5, pc}
 800d24a:	bf00      	nop
 800d24c:	20000db4 	.word	0x20000db4

0800d250 <_getpid_r>:
 800d250:	f7f4 bdc4 	b.w	8001ddc <_getpid>

0800d254 <__swhatbuf_r>:
 800d254:	b570      	push	{r4, r5, r6, lr}
 800d256:	460c      	mov	r4, r1
 800d258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25c:	2900      	cmp	r1, #0
 800d25e:	b096      	sub	sp, #88	@ 0x58
 800d260:	4615      	mov	r5, r2
 800d262:	461e      	mov	r6, r3
 800d264:	da0d      	bge.n	800d282 <__swhatbuf_r+0x2e>
 800d266:	89a3      	ldrh	r3, [r4, #12]
 800d268:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d26c:	f04f 0100 	mov.w	r1, #0
 800d270:	bf14      	ite	ne
 800d272:	2340      	movne	r3, #64	@ 0x40
 800d274:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d278:	2000      	movs	r0, #0
 800d27a:	6031      	str	r1, [r6, #0]
 800d27c:	602b      	str	r3, [r5, #0]
 800d27e:	b016      	add	sp, #88	@ 0x58
 800d280:	bd70      	pop	{r4, r5, r6, pc}
 800d282:	466a      	mov	r2, sp
 800d284:	f000 f848 	bl	800d318 <_fstat_r>
 800d288:	2800      	cmp	r0, #0
 800d28a:	dbec      	blt.n	800d266 <__swhatbuf_r+0x12>
 800d28c:	9901      	ldr	r1, [sp, #4]
 800d28e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d292:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d296:	4259      	negs	r1, r3
 800d298:	4159      	adcs	r1, r3
 800d29a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d29e:	e7eb      	b.n	800d278 <__swhatbuf_r+0x24>

0800d2a0 <__smakebuf_r>:
 800d2a0:	898b      	ldrh	r3, [r1, #12]
 800d2a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2a4:	079d      	lsls	r5, r3, #30
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	d507      	bpl.n	800d2bc <__smakebuf_r+0x1c>
 800d2ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	6123      	str	r3, [r4, #16]
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	6163      	str	r3, [r4, #20]
 800d2b8:	b003      	add	sp, #12
 800d2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2bc:	ab01      	add	r3, sp, #4
 800d2be:	466a      	mov	r2, sp
 800d2c0:	f7ff ffc8 	bl	800d254 <__swhatbuf_r>
 800d2c4:	9f00      	ldr	r7, [sp, #0]
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f7fd fc44 	bl	800ab58 <_malloc_r>
 800d2d0:	b948      	cbnz	r0, 800d2e6 <__smakebuf_r+0x46>
 800d2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2d6:	059a      	lsls	r2, r3, #22
 800d2d8:	d4ee      	bmi.n	800d2b8 <__smakebuf_r+0x18>
 800d2da:	f023 0303 	bic.w	r3, r3, #3
 800d2de:	f043 0302 	orr.w	r3, r3, #2
 800d2e2:	81a3      	strh	r3, [r4, #12]
 800d2e4:	e7e2      	b.n	800d2ac <__smakebuf_r+0xc>
 800d2e6:	89a3      	ldrh	r3, [r4, #12]
 800d2e8:	6020      	str	r0, [r4, #0]
 800d2ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2ee:	81a3      	strh	r3, [r4, #12]
 800d2f0:	9b01      	ldr	r3, [sp, #4]
 800d2f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d2f6:	b15b      	cbz	r3, 800d310 <__smakebuf_r+0x70>
 800d2f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	f000 f81d 	bl	800d33c <_isatty_r>
 800d302:	b128      	cbz	r0, 800d310 <__smakebuf_r+0x70>
 800d304:	89a3      	ldrh	r3, [r4, #12]
 800d306:	f023 0303 	bic.w	r3, r3, #3
 800d30a:	f043 0301 	orr.w	r3, r3, #1
 800d30e:	81a3      	strh	r3, [r4, #12]
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	431d      	orrs	r5, r3
 800d314:	81a5      	strh	r5, [r4, #12]
 800d316:	e7cf      	b.n	800d2b8 <__smakebuf_r+0x18>

0800d318 <_fstat_r>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	4d07      	ldr	r5, [pc, #28]	@ (800d338 <_fstat_r+0x20>)
 800d31c:	2300      	movs	r3, #0
 800d31e:	4604      	mov	r4, r0
 800d320:	4608      	mov	r0, r1
 800d322:	4611      	mov	r1, r2
 800d324:	602b      	str	r3, [r5, #0]
 800d326:	f7f4 fdc1 	bl	8001eac <_fstat>
 800d32a:	1c43      	adds	r3, r0, #1
 800d32c:	d102      	bne.n	800d334 <_fstat_r+0x1c>
 800d32e:	682b      	ldr	r3, [r5, #0]
 800d330:	b103      	cbz	r3, 800d334 <_fstat_r+0x1c>
 800d332:	6023      	str	r3, [r4, #0]
 800d334:	bd38      	pop	{r3, r4, r5, pc}
 800d336:	bf00      	nop
 800d338:	20000db4 	.word	0x20000db4

0800d33c <_isatty_r>:
 800d33c:	b538      	push	{r3, r4, r5, lr}
 800d33e:	4d06      	ldr	r5, [pc, #24]	@ (800d358 <_isatty_r+0x1c>)
 800d340:	2300      	movs	r3, #0
 800d342:	4604      	mov	r4, r0
 800d344:	4608      	mov	r0, r1
 800d346:	602b      	str	r3, [r5, #0]
 800d348:	f7f4 fdc0 	bl	8001ecc <_isatty>
 800d34c:	1c43      	adds	r3, r0, #1
 800d34e:	d102      	bne.n	800d356 <_isatty_r+0x1a>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	b103      	cbz	r3, 800d356 <_isatty_r+0x1a>
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	20000db4 	.word	0x20000db4

0800d35c <_init>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	bf00      	nop
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr

0800d368 <_fini>:
 800d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36a:	bf00      	nop
 800d36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d36e:	bc08      	pop	{r3}
 800d370:	469e      	mov	lr, r3
 800d372:	4770      	bx	lr
